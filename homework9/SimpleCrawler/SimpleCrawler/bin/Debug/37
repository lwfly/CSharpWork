<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="第一章：手动搭建I/O网络通信框架1：Socket和ServerSocket入门实战，实现单聊 第三章：手动搭建I/O网络通信框架3：NIO编程模型，升级改造聊天室 第四章：手动搭建I/O网络通信框架" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>手动搭建I/O网络通信框架2：BIO编程模型实现群聊 - 耶low - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/custom/bundle-custom.min.css?v=1ssrnY3Il79Ok472qeVrpxlSprSXcHhYPgZC5S3wtVM" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/lbhym/custom.css?v=/bNcoqoCmLiTu3EIkfiCTX1tFFw=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=-Yh290MhQyDeXLmvKTSses9H6-49lqbpXFh55zvS0w8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/lbhym/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/lbhym/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/lbhym/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 524632;
        var currentBlogApp = 'lbhym';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'Custom';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/lbhym/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/lbhym/">耶low的博客</a>
</h1>
<h2>
路途遥远
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/lbhym/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E8%80%B6low">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/lbhym/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
51&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
6</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lbhym/p/12681787.html">手动搭建I/O网络通信框架2：BIO编程模型实现群聊</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p class="postTitle"><span style="font-size: 16px;">第一章：</span><span style="font-size: 16px;"><a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lbhym/p/12673470.html">手动搭建I/O网络通信框架1：Socket和ServerSocket入门实战，实现单聊</a></span></p>
<p class="postTitle"><span style="font-size: 16px;">第三章：</span><span style="font-size: 16px;"><a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lbhym/p/12698309.html">手动搭建I/O网络通信框架3：NIO编程模型，升级改造聊天室</a></span></p>
<p class="postTitle"><span style="font-size: 16px;">第四章：<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lbhym/p/12720944.html">手动搭建I/O网络通信框架4：AIO编程模型，聊天室终极改造</a></span></p>
<p class="postTitle">　　<span style="font-size: 16px;">在第一章中运用Socket和ServerSocket简单的实现了网络通信。这一章，利用BIO编程模型进行升级改造，实现群聊聊天室。</span></p>
<p class="postTitle"><span style="font-size: 16px;">　　所谓BIO，就是Block IO，阻塞式的IO。这个阻塞主要发生在：ServerSocket接收请求时（accept()方法）、InputStream、OutputStream（输入输出流的读和写）都是阻塞的。这个可以在下面代码的调试中发现，比如在客户端接收服务器消息的输入流处打上断点，除非服务器发来消息，不然断点是一直停在这个地方的。也就是说这个线程在这时间是被阻塞的。</span></p>
<p class="postTitle"><span style="font-size: 16px;">　　<img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200411190359629-713089288.png" alt="" width="713" height="382" /></span></p>
<p class="postTitle"><span style="font-size: 16px;">　　<span style="font-size: 16px;">如图：当一个客户端请求进来时，接收器会为这个客户端分配一个工作线程，这个工作线程专职处理客户端的操作。在上一章中，服务器接收到客户端请求后就跑去专门服务这个客户端了，所以当其他请求进来时，是处理不到的。</span></span></p>
<p><span style="font-size: 16px;">　　看到这个图，很容易就会想到线程池，BIO是一个相对简单的模型，实现它的关键之处也在于线程池。</span></p>
<p><span style="font-size: 16px;">　　在上代码之前，先大概说清楚每个类的作用，以免弄混淆。更详细的说明，都写在注释当中。</span></p>
<h2 class="postTitle"><span style="font-size: 16px;">　　</span>服务器端：</h2>
<p class="postTitle"><span style="font-size: 16px;">　　ChatServer:这个类的作用就像图中的Acceptor。它有两个比较关键的全局变量，一个就是存储在线用户信息的Map，一个就是线程池。这个类会监听端口，接收客户端的请求，然后为客户端分配工作线程。还会提供一些常用的工具方法给每个工作线程调用，比如：发送消息、添加在线用户等。我之前简单用过Netty和WebSocket，这个类看上去就已经和这些框架有点相似了。学习IO编程模型也是为了接下来深入学习Netty做准备。<br /></span></p>
<p class="postTitle"><span style="font-size: 16px;">　　ChatHandler:这个类就是工作线程的类。在这个项目中，它的工作很简单：把接收到的消息转发给其他客户端，当然还有一些小功能，比如添加\移除在线用户。</span></p>
<h2 class="postTitle"><span style="font-size: 16px;">　　</span>客户端：</h2>
<p class="postTitle"><span style="font-size: 16px;">　　相较于服务器，客户端的改动较小，主要是把等待用户输入信息这个功能分到其他线程做，不然这个功能会一直阻塞主线程，导致无法接收其他客户端的消息。</span></p>
<p class="postTitle"><span style="font-size: 16px;">　　ChatClient:客户端启动类，也就是主线程，会通过Socket和服务器连接。也提供了两个工具方法：发送消息和接收消息。</span></p>
<p class="postTitle"><span style="font-size: 16px;">　　UserInputHandler:专门负责等待用户输入信息的线程，一旦有信息键入，就马上发送给服务器。</span></p>
<p class="postTitle"><span style="font-size: 16px;">　　首先创建两个包区分一下客户端和服务器，client和server</span></p>
<p class="postTitle"><span style="font-size: 16px;">　　</span><strong><span style="font-size: 16px;">服务器端</span><span style="font-size: 16px;">ChatServer：</span></strong></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ChatServer {
    </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span> DEFAULT_PORT = <span style="color: #800080;">8888</span><span style="color: #000000;">;
    </span><span style="color: #008000;">/*</span><span style="color: #008000;">*
     * 创建一个Map存储在线用户的信息。这个map可以统计在线用户、针对这些用户可以转发其他用户发送的消息
     * 因为会有多个线程操作这个map，所以为了安全起见用ConcurrentHashMap
     * 在这里key就是客户端的端口号，但在实际中肯定不会用端口号区分用户，如果是web的话一般用session。
     * value是IO的Writer，用以存储客户端发送的消息
     </span><span style="color: #008000;">*/</span>
    <span style="color: #0000ff;">private</span> Map&lt;Integer, Writer&gt; map=<span style="color: #0000ff;">new</span> ConcurrentHashMap&lt;&gt;<span style="color: #000000;">();
    </span><span style="color: #008000;">/*</span><span style="color: #008000;">*
     * 创建线程池，线程上限为10个，如果第11个客户端请求进来，服务器会接收但是不会去分配线程处理它。
     * 前10个客户端的聊天记录，它看不见。当有一个客户端下线时，这第11个客户端就会被分配线程，服务器显示在线
     * 大家可以把10再设置小一点，测试看看
     * </span><span style="color: #008000;">*/</span>
    <span style="color: #0000ff;">private</span> ExecutorService executorService= Executors.newFixedThreadPool(<span style="color: #800080;">10</span><span style="color: #000000;">);
    </span><span style="color: #008000;">//</span><span style="color: #008000;">客户端连接时往map添加客户端</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> addClient(Socket socket) throws IOException {
        </span><span style="color: #0000ff;">if</span> (socket != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
            BufferedWriter writer </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> BufferedWriter(
                    </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> OutputStreamWriter(socket.getOutputStream())
            );
            map.put(socket.getPort(), writer);
            System.</span><span style="color: #0000ff;">out</span>.println(<span style="color: #800000;">"</span><span style="color: #800000;">Client[</span><span style="color: #800000;">"</span>+socket.getPort()+<span style="color: #800000;">"</span><span style="color: #800000;">]:Online</span><span style="color: #800000;">"</span><span style="color: #000000;">);
        }
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;">断开连接时map里移除客户端</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> removeClient(Socket socket) throws Exception {
        </span><span style="color: #0000ff;">if</span> (socket != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
            </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (map.containsKey(socket.getPort())) {
                map.</span><span style="color: #0000ff;">get</span><span style="color: #000000;">(socket.getPort()).close();
                map.remove(socket.getPort());
            }
            System.</span><span style="color: #0000ff;">out</span>.println(<span style="color: #800000;">"</span><span style="color: #800000;">Client[</span><span style="color: #800000;">"</span> + socket.getPort() + <span style="color: #800000;">"</span><span style="color: #800000;">]Offline</span><span style="color: #800000;">"</span><span style="color: #000000;">);
        }
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;">转发客户端消息，这个方法就是把消息发送给在线的其他的所有客户端</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> sendMessage(Socket socket, String msg) throws IOException {
        </span><span style="color: #008000;">//</span><span style="color: #008000;">遍历在线客户端</span>
        <span style="color: #0000ff;">for</span><span style="color: #000000;"> (Integer port : map.keySet()) {
            </span><span style="color: #008000;">//</span><span style="color: #008000;">发送给在线的其他客户端</span>
            <span style="color: #0000ff;">if</span> (port !=<span style="color: #000000;"> socket.getPort()) {
                Writer writer </span>= map.<span style="color: #0000ff;">get</span><span style="color: #000000;">(port);
                writer.write(msg);
                writer.flush();
            }
        }
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;">接收客户端请求，并分配Handler去处理请求</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> start() {
        </span><span style="color: #0000ff;">try</span> (ServerSocket serverSocket = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ServerSocket(DEFAULT_PORT)) {
            System.</span><span style="color: #0000ff;">out</span>.println(<span style="color: #800000;">"</span><span style="color: #800000;">Server Start,The Port is:</span><span style="color: #800000;">"</span>+<span style="color: #000000;">DEFAULT_PORT);
            </span><span style="color: #0000ff;">while</span> (<span style="color: #0000ff;">true</span><span style="color: #000000;">){
                </span><span style="color: #008000;">//</span><span style="color: #008000;">等待客户端连接</span>
                Socket socket=<span style="color: #000000;">serverSocket.accept();
                </span><span style="color: #008000;">//</span><span style="color: #008000;">为客户端分配一个ChatHandler线程</span>
                executorService.execute(<span style="color: #0000ff;">new</span> ChatHandler(<span style="color: #0000ff;">this</span><span style="color: #000000;">,socket));
            }
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
            e.printStackTrace();
        }
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
        ChatServer server</span>=<span style="color: #0000ff;">new</span><span style="color: #000000;"> ChatServer();
        server.start();
    }
}</span></pre>
</div>
<p><strong><span style="font-size: 16px;">　　服务器端ChatHandler：</span></strong></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> ChatHandler <span style="color: #0000ff;">implements</span><span style="color: #000000;"> Runnable {
    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> ChatServer server;
    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> Socket socket;

    </span><span style="color: #008000;">//</span><span style="color: #008000;">构造函数，ChatServer通过这个分配Handler线程</span>
    <span style="color: #0000ff;">public</span><span style="color: #000000;"> ChatHandler(ChatServer server, Socket socket) {
        </span><span style="color: #0000ff;">this</span>.server =<span style="color: #000000;"> server;
        </span><span style="color: #0000ff;">this</span>.socket =<span style="color: #000000;"> socket;
    }

    @Override
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run() {
        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            </span><span style="color: #008000;">//</span><span style="color: #008000;">往map里添加这个客户端</span>
<span style="color: #000000;">            server.addClient(socket);
            </span><span style="color: #008000;">//</span><span style="color: #008000;">读取这个客户端发送的消息</span>
            BufferedReader reader = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BufferedReader(
                    </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> InputStreamReader(socket.getInputStream())
            );
            String msg </span>= <span style="color: #0000ff;">null</span><span style="color: #000000;">;
            </span><span style="color: #0000ff;">while</span> ((msg = reader.readLine()) != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
                </span><span style="color: #008000;">//</span><span style="color: #008000;">这样拼接是为了让其他客户端也能看清是谁发送的消息</span>
                String sendmsg = "Client[" + socket.getPort() + "]:" +<span style="color: #000000;"> msg;
                </span><span style="color: #008000;">//</span><span style="color: #008000;">服务器打印这个消息</span>
<span style="color: #000000;">                System.out.println(sendmsg);
                </span><span style="color: #008000;">//</span><span style="color: #008000;">将收到的消息转发给其他在线客户端</span>
                server.sendMessage(socket, sendmsg + "\n"<span style="color: #000000;">);
                </span><span style="color: #0000ff;">if</span> (msg.equals("quit"<span style="color: #000000;">)) {
                    </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;
                }
            }
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
            e.printStackTrace();
        } </span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
            </span><span style="color: #008000;">//</span><span style="color: #008000;">如果用户退出或者发生异常，就在map中移除该客户端</span>
            <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
                server.removeClient(socket);
            } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {
                e.printStackTrace();
            }
        }
    }
}</span></pre>
</div>
<p><strong><span style="font-size: 16px;">　　客户端ChatClient:</span></strong></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ChatClient {
    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> BufferedReader reader;
    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> BufferedWriter writer;
    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> Socket socket;
    </span><span style="color: #008000;">//</span><span style="color: #008000;">发送消息给服务器</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> sendToServer(String msg) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> IOException {
        </span><span style="color: #008000;">//</span><span style="color: #008000;">发送之前，判断socket的输出流是否关闭</span>
        <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">socket.isOutputShutdown()) {
            </span><span style="color: #008000;">//</span><span style="color: #008000;">如果没有关闭就把用户键入的消息放到writer里面</span>
            writer.write(msg + "\n"<span style="color: #000000;">);
            writer.flush();
        }
    }
    </span><span style="color: #008000;">//</span><span style="color: #008000;">从服务器接收消息</span>
    <span style="color: #0000ff;">public</span> String receive() <span style="color: #0000ff;">throws</span><span style="color: #000000;"> IOException {
        String msg </span>= <span style="color: #0000ff;">null</span><span style="color: #000000;">;
        </span><span style="color: #008000;">//</span><span style="color: #008000;">判断socket的输入流是否关闭</span>
        <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">socket.isInputShutdown()) {
            </span><span style="color: #008000;">//</span><span style="color: #008000;">没有关闭的话就可以通过reader读取服务器发送来的消息。注意：如果没有读取到消息线程会阻塞在这里</span>
            msg =<span style="color: #000000;"> reader.readLine();
        }
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> msg;
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> start() {
        </span><span style="color: #008000;">//</span><span style="color: #008000;">和服务创建连接</span>
        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            socket </span>= <span style="color: #0000ff;">new</span> Socket("127.0.0.1", 8888<span style="color: #000000;">);
            reader</span>=<span style="color: #0000ff;">new</span><span style="color: #000000;"> BufferedReader(
                    </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> InputStreamReader(socket.getInputStream())
            );
            writer</span>=<span style="color: #0000ff;">new</span><span style="color: #000000;"> BufferedWriter(
                    </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> OutputStreamWriter(socket.getOutputStream())
            );
            </span><span style="color: #008000;">//</span><span style="color: #008000;">新建一个线程去监听用户输入的消息</span>
            <span style="color: #0000ff;">new</span> Thread(<span style="color: #0000ff;">new</span> UserInputHandler(<span style="color: #0000ff;">this</span><span style="color: #000000;">)).start();
            </span><span style="color: #008000;">/**</span><span style="color: #008000;">
             * 不停的读取服务器转发的其他客户端的信息
             * 记录一下之前踩过的小坑：
             * 这里一定要创建一个msg接收信息，如果直接用receive()方法判断和输出receive()的话会造成有的消息不会显示
             * 因为receive()获取时，在返回之前是阻塞的，一旦接收到消息才会返回，也就是while这里是阻塞的，一旦有消息就会进入到while里面
             * 这时候如果输出的是receive(),那么上次获取的信息就会丢失，然后阻塞在System.out.println
             * </span><span style="color: #008000;">*/</span><span style="color: #000000;">
            String msg</span>=<span style="color: #0000ff;">null</span><span style="color: #000000;">;
            </span><span style="color: #0000ff;">while</span> ((msg=receive())!=<span style="color: #0000ff;">null</span><span style="color: #000000;">){
                System.out.println(msg);
            }
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
            e.printStackTrace();
        }</span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
            </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
               </span><span style="color: #0000ff;">if</span>(writer!=<span style="color: #0000ff;">null</span><span style="color: #000000;">){
                   writer.close();
               }
            } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
                e.printStackTrace();
            }
        }
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
        </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> ChatClient().start();
    }
}</span></pre>
</div>
<p>　<strong><span style="font-size: 16px;">　客户端UserInputHandler:</span></strong></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> UserInputHandler <span style="color: #0000ff;">implements</span><span style="color: #000000;"> Runnable {
    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> ChatClient client;

    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> UserInputHandler(ChatClient client) {
        </span><span style="color: #0000ff;">this</span>.client =<span style="color: #000000;"> client;
    }

    @Override
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run() {
        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            </span><span style="color: #008000;">//</span><span style="color: #008000;">接收用户输入的消息</span>
            BufferedReader reader = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BufferedReader(
                    </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> InputStreamReader(System.in)
            );
            </span><span style="color: #008000;">//</span><span style="color: #008000;">不停的获取reader中的System.in，实现了等待用户输入的效果</span>
            <span style="color: #0000ff;">while</span> (<span style="color: #0000ff;">true</span><span style="color: #000000;">) {
                String input </span>=<span style="color: #000000;"> reader.readLine();
                </span><span style="color: #008000;">//</span><span style="color: #008000;">向服务器发送消息</span>
<span style="color: #000000;">                client.sendToServer(input);
                </span><span style="color: #0000ff;">if</span> (input.equals("quit"<span style="color: #000000;">))
                    </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;
            }
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
            e.printStackTrace();
        }
    }
}</span></pre>
</div>
<p>&nbsp;</p>
<h2><span style="font-size: 16px;">　　运行测试：</span></h2>
<p><span style="font-size: 16px;">　　通过打开终端，通过javac编译。如果大家是在IDEA上编码的话可能会报编码错误，在javac后面加上-encoding utf-8再接java文件就好了。</span></p>
<p><span style="font-size: 16px;">　　编译后运行，通过java运行时，又遇到了一个坑。会报找不到主类的错误，原来是因为加上两个包，要在class文件名前面加上包名。</span><span style="font-size: 16px;">比如当前在src目录，下面有client和server两个包，要这么运行：java client.XXXX。可我之前明明在client文件夹下运行的java，也是不行，不知道为什么。</span></p>
<p><span style="font-size: 16px;">　　接着测试：</span></p>
<p><span style="font-size: 16px;">　　1.首先在一个终端里运行ChatServer，打开服务器</span></p>
<p><span style="font-size: 16px;"><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200411193234531-59946096.png" alt="" width="312" height="104" /></span></p>
<p>　　<span style="font-size: 16px;">2.在第二个终端里打开ChatClient，暂且叫A，此时服务器的终端显示：</span></p>
<p><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200411193327017-1431424368.png" alt="" width="383" height="163" /></p>
<p>　　<span style="font-size: 16px;">3.类似的，在第三个终端里打开ChatClient，暂且叫B，此时服务器显示：</span></p>
<p><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200411193358577-1779741867.png" alt="" width="370" height="149" /></p>
<p>　　<span style="font-size: 16px;">4.A中输入hi,除了服务器会打印hi外，B中也会显示，图片中的端口号和前面的不一样，是因为中间出了点小问题，前三张截图和后面的不是同时运行的。实际中同一个客户端会显示一样的端口号：</span></p>
<p><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200411193747903-851197924.png" alt="" width="442" height="120" /></p>
<p>　<span style="font-size: 16px;">　5.当客户端输入quit时就会断开连接，最后，服务器的显示为：</span></p>
<p><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200411193923381-1365643546.png" alt="" width="514" height="139" /></p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-11 19:40</span>&nbsp;
<a href="https://www.cnblogs.com/lbhym/">耶low</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12681787" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12681787);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 524632, cb_blogApp = 'lbhym', cb_blogUserGuid = '35e67917-dc39-41b2-3962-08d5a8229c33';
    var cb_entryId = 12681787, cb_entryCreatedDate = '2020-04-11 19:40', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 耶low
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>