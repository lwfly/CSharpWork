<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="一.简介 Solr的函数可以动态计算每个文档的值，而不是返回在索引阶段对应字段的静态数值集。函数查询是一类特殊的查询，它可以像关键词一样添加到查询中，对所有文档进行匹配并返回它们的函数计算值作为文档得" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Solr复杂查询一：函数查询 - 云山之巅 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/imetro/bundle-imetro.min.css?v=YTwxgthpkTskG8UPkwMAHbEZxpbL-57mxPk4ngbsi-o" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/yszd/custom.css?v=ly4Uj5A2tCR9MAJlpWb/p233Fqk=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/imetro/bundle-imetro-mobile.min.css?v=HqHem7wV4YSccpGo1wmLZRg95n7LLjNRes4k7IEZ4S8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/yszd/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/yszd/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/yszd/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 415231;
        var currentBlogApp = 'yszd';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'iMetro';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/yszd/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/yszd/">云山之巅</a>
</h1>
<h2>
------自学是你超越他人使自己变重要的一种能力！
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>

</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E4%BA%91%E5%B1%B1%E4%B9%8B%E5%B7%85">
联系</a></li>
<li>

<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
300&nbsp; </span>
<span id="stats_article_count">文章 - 
1&nbsp; </span>
<span id="stats-comment_count">评论 - 
18</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/yszd/p/12707280.html">Solr复杂查询一：函数查询</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <h2>一.简介</h2>
<p>　　Solr的函数可以动态计算每个文档的值，而不是返回在索引阶段对应字段的静态数值集。函数查询是一类特殊的查询，它可以像关键词一样添加到查询中，对所有文档进行匹配并返回它们的函数计算值作为文档得分。使用函数查询，函数计算结果将用于修改相关度得分或用于搜索结果的排序。在应用程序层，函数计算的结果可以作为一个动态字段添加到每个文档。函数也可以嵌套，即一个函数的输出可以作为另一个函数的输入，函数允许嵌套任意多层。</p>
<h2>二.函数语法</h2>
<p>　　Solr的标准函数语法首先定义一个函数名，后面紧跟一对括号，括号中包括零个、一个或多个输入参数，参数之间以逗号分隔：</p>
<p>　　functionName()</p>
<p>　　functionName(input1)</p>
<p>　　funtionName(input1,...inputN)</p>
<p>　　以下内容都可以作为 函数的输入：</p>
<p>　　1.常量。例如：100，&ldquo;Hello world&rdquo;等</p>
<p>　　2.字段。例如：fieldName,field(fieldName)</p>
<p>　　3.另一个函数。例如：functionName(...)</p>
<p>　　4.替代参数。例如：q={!func}min($f1,$f2)&amp;f1=sqrt(popularity)&amp;f2=1</p>
<p>　　Solr将文档中每个输入参数的类型定义为函数，初看可能会对此感到困惑。绝大多数函数遵循标准的函数语法，但常量函数、字段函数和替代参数是简化语法的特例。常量函数的语法就是常量值本身；字段函数的语法是字段的名称，可以选择性地在函数中包含field命名；替代参数的语法是$parameter，其表示URL请求的查询字符串参数。除此之外，其它函数都遵循标准的函数语法。</p>
<p>　　由于函数的所有 输入可以看成函数本身【即使输入的是常量函数】，标准的函数语法可以在概念上简化为functionName(function1,...,functionN)。</p>
<p>　　假设文档中的fieldContainingNumber字段包含值-99，则会出现以下情况：</p>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200416085923904-1295186660.png" alt="" /></p>
<p>　　不难看出，每个函数可以容易地将字段函数置换为常量函数或者其他标准函数。虽然每个例子中计算输入参数的命令和方法不同，但都返回了-99和2之间的最大值。将一个函数输入作为另一个函数的参数的好处是，以有趣的方式组合函数来实现复杂的计算。</p>
<p>　　并不是所有的函数都接受相同类型的输入参数。一些函数将常量值输入转变为字符串，另一些函数则将其转变为整数或者浮点数。假设fieldContainingString赋予hello值，如下所示：</p>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200416090558281-399962323.png" alt="" /></p>
<p>　　strdist函数基于一种特殊的算法【由第三个参数定义，edit表示文本类型】来计算两个字符串的相似度。如果在此函数中输入了错误的类型，会出现以下结果：</p>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200416091148319-983723664.png" alt="" /></p>
<p>　　该函数会自动类型转换，在此是把数值型转换为字符串。很多时候这种转换是不可能的【例如：字符串转数值】，这种情况下，通常会收到Solr异常提醒。需要明确一点，虽然函数嵌套语法是通用的，但并不是所有的函数都可以组合成功。</p>
<p>　　Solr的函数通用性使得它们可以在Solr的各种核心功能上使用。函数可以影响相关度，可以过滤结果，可以用于排序，也可以对文档附加返回的函数值，甚至可以用在分面上。</p>
<h2>三.函数的搜索</h2>
<p>　　在Solr中执行典型的关键词搜索时，每个关键词会在倒排文档中查找一遍，通过计算相关度得分来决定每个文档与关键词的匹配程度。查询并不局限于词项本身，也可以在查询中插入函数 ，将其视为另一个关键词。如下：</p>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200416092844008-624977339.png" alt="" /></p>
<p>　　该查询执行布尔搜索的关键词为United States,France,和President，以及一个返回值为1~100区间值的函数，这个函数用来衡量匹配文档的新旧程度【文档越新，返回值越高】。此查询有如下三个方面需要特别注意：</p>
<p>　　1.语法_val_:value用来将一个查询函数【嵌套recip和ord函数】作为一个词项插入到用户主查询语句中。</p>
<p>　　2.函数查询默认匹配所有文档。在上面例子中查询被限制在包含三个词项的所有文档中，函数查询作为额外的词项并没有改变查询匹配的文档结果数。</p>
<p>　　3.一个查询的相关度评分是查询中每个词项相关度得分的总和。上面提到的三个词项都会得到各自基于tf-idf【词频-逆文档频率】相似度计算的相关度得分，然而函数查询的得分是函数自身的取值。</p>
<p>　　_val_的目的是让越新的文档相关度得分越高。具体而言，最新文档的相关度得分将获得100的加分，最旧文档的相关度得分将获得1的加分，其余文档根据其新旧程度获得1~100之间的加分。注意，每个文档的最后得分会经过规范化处理，因此不会看到实际的1~100分加到每个文档的最后得分中，只会看到越新的文档排名提升越多。如果 从查询中移除函数，Solr的搜索结果排序会发生变化。</p>
<h3>　　在查询中挂接函数</h3>
<p>　　上面提到的_val_:"functionName(...)"语法，可以像关键词那样插入到查询的任何位置。Solr包含一个函数查询解析器，通过本地参数{!func}functionName(...)进行调用。两种方式可以实现相同的功能：将函数的值作为一个词项添加到查询中，它的相关度得分就是函数本身的值。因此，一下语句是等价的。</p>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200416111948932-297967323.png" alt="" /></p>
<p>　　通过向查询添加函数，可以调整与查询匹配的文档相关度得分，这个做法似乎很有用。事实上，如果想要通过函数计算来过滤某个适合结果区间以外的结果，函数查询就不那么有效了。所幸，Solr提供了函数区间查询解析器来解决此类需求。</p>
<h3>　　frange查询解析器</h3>
<p>　　如果需要对搜索结果进行过滤，只留下函数计算产生特定值的文档，可以选择函数区间解析器。frange过滤器执行一个特定的函数查询，然后过滤掉函数值落在最低值和最高值范围之外的文档。例如：</p>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200417085720425-97164428.png" alt="" /></p>
<p>&nbsp;frange查询解析器过滤了总价格在10~15区间之外的那些文档，上限和下限通过本地参数l【最低】和u【最高】来定义。上限和下限是默认的，如果只想匹配包含特定值的文档，可以将l和u的值设为同一值。另外，上限值和下限值的设置是可选的，没有强制要求同时设置上下限。如有需要，frange查询中的本地参数incll【包含下限】和inclu【包含上限】可设置为false，这样可以过滤出不在区间范围内的文档。</p>
<h2>四.以字段形式返回函数</h2>
<p>　　所有的函数输入，包括常量和字段，在函数查询语法中都可视为函数本身。既然如此，函数和字段最终都会返回一个值，因此在Solr中其他一些地方中用函数替代字段是可行的。</p>
<p>　　事实上，不仅可以计算每个文档对应的函数值，也可以将文档的计算值当作伪字段返回。例如：</p>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200417094913772-1554759879.png" alt="" /></p>
<p>　　搜索结果如下：</p>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200417094937336-1674177957.png" alt="" /></p>
<p>&nbsp;　　Solr搜索结果向字段列表请求增加一个函数，会将一个新的字段添加到文档中。这并不是存储在索引中的真实字段，但会像存储字段一样返回到文档。返回到文档中的伪字段名称是计算函数值的语法，这非常不好，因此，需要为返回值的伪字段名称自定义别名。如下：</p>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200417095329376-860425900.png" alt="" /></p>
<p>　　冒号之前是伪字段的名称，冒号之后是计算伪字段值额函数。这让伪字段可以像真实字段一样返回函数值。事实上，动态计算的伪字段也可以覆盖一个真实字段。这样的用例需要在不同用例中的同一个字段上返回不同的值，例如，基于用户访问权限清空字段，或为不同地域提供各种版本的内容翻译来修改字段值。在返回搜索结果之前，函数可以操作任何字段的取值。函数不仅可以修改返回的文档字段，还可以改变返回文档的排序。</p>
<h2>五.函数排序</h2>
<p>　　函数的排序语法与字段的排序语法的唯一不同之处在于，整个函数语法【引用参数包含全函数语法】取代了字段名称：</p>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200417104535690-455941813.png" alt="" /></p>
<p>　　这个请求将根据之前计算的总价格进行排序【升序】，如果价格相同，则按照文档得分降序排序。</p>
<h2>六.Solr的可用函数集</h2>
<p>　　Solr的函数主要分为4类：数据转换函数、数学函数、相关度函数和布尔函数。</p>
<h3>　　1.数据转换函数</h3>
<p>　　　　Solr中最常见的函数是将数据从一种格式转换成另一种格式的函数。例如：map(x, min, max, target)：如果x落在最小值与最大值之间，则使用x替换target的值。</p>
<p>　　常用数据转换函数如下：</p>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200417105442091-1665405082.png" alt="" /></p>
<h3>　　2.数学函数</h3>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200417105925270-1867935828.png" alt="" /></p>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200417110003452-1325302312.png" alt="" /></p>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200417110034609-658526761.png" alt="" /></p>
<h3>　　3.相关度函数</h3>
<p>　　　　Solr的相关度得分默认使用DefaultSimilarity类计算。这个类使用了来自搜索索引及查询术语的多种统计数据，以便识别出与查询最佳匹配的文档。Solr的相关度函数可以返回单独的统计数据供选用。所有关键的相关度统计数据都包含在内，例如常见的tf-idf。</p>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200417110354336-404462838.png" alt="" /></p>
<p>　　例如：</p>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200417110833403-1778839959.png" alt="" /></p>
<h3>　　4.距离函数</h3>
<p>　　　　有时计算两个值直接的距离很有用，可能是地球上两个坐标点的地理距离，也有可能是两个点或者向量的几何距离，甚至是两个字符串之间的字符距离。如下：</p>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200417111053421-1078040151.png" alt="" /></p>
<h3>　　5.布尔函数</h3>
<p>　　<img src="https://img2020.cnblogs.com/blog/1343081/202004/1343081-20200417112746789-1078090195.png" alt="" /></p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-17 11:30</span>&nbsp;
<a href="https://www.cnblogs.com/yszd/">云山之巅</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12707280" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12707280);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 415231, cb_blogApp = 'yszd', cb_blogUserGuid = 'cd5b68eb-4493-460c-9638-08d581a6bd57';
    var cb_entryId = 12707280, cb_entryCreatedDate = '2020-04-17 11:30', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 云山之巅
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>