<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="内存可见性 留意复合类操作 解决num&#x2B;&#x2B;操作的原子性问题 禁止指令重排序 总结 内存可见性 volatile是Java提供的一种轻量级的同步机制，在并发编程中，它也扮演着比较重要的角色。同synch" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>谈谈Java中的volatile - dreamcatcher-cx - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/codinglife/bundle-codinglife.min.css?v=hlpQ1CJDwwJXDxv2HNauUmW3NjyWzoMaw1uER19SLT0" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/chengxiao/custom.css?v=ZRxdYbTq331qU7AwMh18XwKukGk=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/codinglife/bundle-codinglife-mobile.min.css?v=XjHfryC9ctsatIZz1dHn7TsRIqmwz9c3aj_6SCfHSDM" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/chengxiao/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/chengxiao/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/chengxiao/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 304993;
        var currentBlogApp = 'chengxiao';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'CodingLife';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/chengxiao/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/chengxiao/">dreamcatcher-cx</a>
</h1>
<h2>
why is more important than what.
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/chengxiao/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/dreamcatcher-cx">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/chengxiao/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
20&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
250</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/chengxiao/p/6528109.html">谈谈Java中的volatile</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p style="margin-left: 30px;"><span style="color: #800080; font-size: 15px;"><strong><a title="t1" href="#t1"><span style="color: #800080;">内存可见性</span></a></strong></span></p>
<p style="margin-left: 30px;"><span style="color: #800080; font-size: 15px;"><strong><a href="#t2"><span style="color: #800080;">留意复合类操作</span></a></strong></span></p>
<p style="margin-left: 30px;"><span style="color: #800080; font-size: 15px;"><strong><a href="#t3"><span style="color: #800080;">解决num++操作的原子性问题</span></a></strong></span></p>
<p style="margin-left: 30px;"><span style="color: #800080; font-size: 15px;"><strong><a href="#t4"><span style="color: #800080;">禁止指令重排序</span></a></strong></span></p>
<p style="margin-left: 30px;"><span style="color: #800080; font-size: 15px;"><strong><a href="#t5"><span style="color: #800080;">总结</span></a></strong></span></p>
<h1><a name="t1"></a>内存可见性</h1>
<p><span style="font-size: 15px;">　　volatile是Java提供的一种轻量级的同步机制，在并发编程中，它也扮演着比较重要的角色。同synchronized相比（synchronized通常称为重量级锁），volatile更轻量级，相比使用synchronized所带来的庞大开销，倘若能恰当的合理的使用volatile，自然是美事一桩。</span></p>
<p><span style="font-size: 15px;">　　为了能比较清晰彻底的理解volatile，我们一步一步来分析。首先来看看如下代码</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> TestVolatile {
    </span><span style="color: #0000ff;">boolean</span> status = <span style="color: #0000ff;">false</span><span style="color: #000000;">;

    </span><span style="color: #008000;">/**</span><span style="color: #008000;">
     * 状态切换为true
     </span><span style="color: #008000;">*/</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> changeStatus(){
        status </span>= <span style="color: #0000ff;">true</span><span style="color: #000000;">;
    }

    </span><span style="color: #008000;">/**</span><span style="color: #008000;">
     * 若状态为true，则running。
     </span><span style="color: #008000;">*/</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run(){
        </span><span style="color: #0000ff;">if</span><span style="color: #000000;">(status){
            System.out.println(</span>"running...."<span style="color: #000000;">);
        }
    }
}</span></pre>
</div>
<p>　　<span style="font-size: 15px;">上面这个例子，在<strong>多线程环境</strong>里，假设线程A执行changeStatus()方法后,线程B运行run()方法，可以保证输出"running....."吗？</span></p>
<p><span style="font-size: 15px;">　　<strong>答案是NO!&nbsp;</strong></span></p>
<p><span style="font-size: 15px;"><strong>　　</strong></span><span style="font-size: 15px;">这个结论会让人有些疑惑，可以理解。因为倘若在单线程模型里，先运行changeStatus方法，再执行run方法，自然是可以正确输出"running...."的；但是在多线程模型中，是没法做这种保证的。因为对于共享变量status来说，线程A的修改，对于线程B来讲，是"不可见"的。也就是说，线程B此时可能无法观测到status已被修改为true。那么什么是可见性呢？</span></p>
<p><span style="font-size: 15px;">　　<span style="color: #ff0000;"><strong>所谓可见性，是指当一条线程修改了共享变量的值，新值对于其他线程来说是可以立即得知的。很显然，上述的例子中是没有办法做到内存可见性的。</strong></span></span></p>
<p><span style="color: #ff0000;"><strong>　　<span style="color: #000000; font-size: 18px;">Java内存模型</span></strong></span></p>
<p><span style="color: #ff0000;"><strong>　　</strong><span style="color: #000000; font-size: 15px;">为什么出现这种情况呢，我们需要先了解一下<strong>JMM（java内存模型）</strong></span></span></p>
<p><span style="color: #ff0000; font-size: 15px;"><span style="color: #000000;">　<strong>　java虚拟机有自己的内存模型（Java Memory Model，JMM），JMM可以屏蔽掉各种硬件和操作系统的内存访问差异，以实现让java程序在各种平台下都能达到一致的内存访问效果。</strong></span></span></p>
<p><span style="color: #ff0000;"><span style="color: #000000;"><span style="font-size: 15px;"><strong>　　JMM决定一个线程对共享变量的写入何时对另一个线程可见，JMM定义了线程和主内存之间的抽象关系：共享变量存储在主内存(Main Memory)中，每个线程都有一个私有的本地内存（Local Memory），本地内存保存了被该线程使用到的主内存的副本拷贝，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存中的变量。这三者之间的交互关系如下</strong></span><br /></span></span></p>
<p><img src="https://images2015.cnblogs.com/blog/1024555/201703/1024555-20170318223812776-1081654170.png" alt="" width="612" height="465" /></p>
<p>&nbsp;</p>
<p><span style="font-size: 15px;">　　需要注意的是，JMM是个抽象的内存模型，所以所谓的本地内存，主内存都是抽象概念，并不一定就真实的对应cpu缓存和物理内存。当然如果是出于理解的目的，这样对应起来也无不可。</span></p>
<p><span style="font-size: 15px;">　　<strong>大概了解了JMM的简单定义后，问题就很容易理解了，对于普通的共享变量来讲，比如我们上文中的status，线程A将其修改为true这个动作发生在线程A的本地内存中，此时还未同步到主内存中去；而线程B缓存了status的初始值false，此时可能没有观测到status的值被修改了，所以就导致了上述的问题。那么这种共享变量在多线程模型中的不可见性如何解决呢？比较粗暴的方式自然就是加锁，但是此处使用synchronized或者Lock这些方式太重量级了，有点炮打蚊子的意思。比较合理的方式其实就是volatile</strong></span></p>
<p><span style="font-size: 15px;">　　volatile具备两种特性，第一就是保证共享变量对所有线程的可见性。将一个共享变量声明为volatile后，会有以下效应：</span></p>
<p><span style="font-size: 15px;"><strong>　　　　1.当写一个volatile变量时，JMM会把该线程对应的本地内存中的变量强制刷新到主内存中去；</strong></span></p>
<p><span style="font-size: 15px;"><strong>　　　　2.这个写会操作会导致其他线程中的缓存无效。</strong></span></p>
<p><span style="font-size: 15px;">上面的例子只需将status声明为volatile，即可保证在线程A将其修改为true时，线程B可以立刻得知</span></p>
<div class="cnblogs_code">
<pre> <span style="color: #0000ff;">volatile</span> <span style="color: #0000ff;">boolean</span> status = <span style="color: #0000ff;">false</span>;</pre>
</div>
<h1><a name="t2"></a>留意复合类操作</h1>
<p><span style="font-size: 15px;">　　但是需要注意的是，我们一直在拿volatile和synchronized做对比，仅仅是因为这两个关键字在某些内存语义上有共通之处，volatile并不能完全替代synchronized，它依然是个轻量级锁，在很多场景下，volatile并不能胜任。看下这个例子：</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">package</span><span style="color: #000000;"> test;

</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.concurrent.CountDownLatch;

</span><span style="color: #008000;">/**</span><span style="color: #008000;">
 * Created by chengxiao on 2017/3/18.
 </span><span style="color: #008000;">*/</span>
<span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Counter {
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">volatile</span> <span style="color: #0000ff;">int</span> num = 0<span style="color: #000000;">;
    </span><span style="color: #008000;">//</span><span style="color: #008000;">使用CountDownLatch来等待计算线程执行完</span>
    <span style="color: #0000ff;">static</span> CountDownLatch countDownLatch = <span style="color: #0000ff;">new</span> CountDownLatch(30<span style="color: #000000;">);
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> main(String []args) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> InterruptedException {
        </span><span style="color: #008000;">//</span><span style="color: #008000;">开启30个线程进行累加操作</span>
        <span style="color: #0000ff;">for</span>(<span style="color: #0000ff;">int</span> i=0;i&lt;30;i++<span style="color: #000000;">){
            </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> Thread(){
                </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run(){
                    </span><span style="color: #0000ff;">for</span>(<span style="color: #0000ff;">int</span> j=0;j&lt;10000;j++<span style="color: #000000;">){
                        num</span>++;<span style="color: #008000;">//</span><span style="color: #008000;">自加操作</span>
<span style="color: #000000;">                    }
                    countDownLatch.countDown();
                }
            }.start();
        }
        </span><span style="color: #008000;">//</span><span style="color: #008000;">等待计算线程执行完</span>
<span style="color: #000000;">        countDownLatch.await();
        System.out.println(num);
    }
}</span></pre>
</div>
<p><span style="font-size: 15px;">执行结果：</span></p>
<div class="cnblogs_code">
<pre><strong><span style="color: #ff0000;">224291</span></strong></pre>
</div>
<p><span style="font-size: 15px;">针对这个示例，一些同学可能会觉得疑惑，如果用volatile修饰的共享变量可以保证可见性，那么结果不应该是<span style="color: #ff0000;">300000<span style="color: #000000;">么?</span></span></span></p>
<p><span style="color: #ff0000; font-size: 15px;"><span style="color: #000000;">问题就出在num++这个操作上，<strong>因为num++不是个原子性的操作，而是个复合操作</strong>。我们可以简单讲这个操作理解为由这三步组成:</span></span></p>
<p><span style="color: #ff0000; font-size: 15px;"><span style="color: #000000;">　　1.读取</span></span></p>
<p><span style="color: #ff0000; font-size: 15px;"><span style="color: #000000;">　　2.加一</span></span></p>
<p><span style="color: #ff0000; font-size: 15px;"><span style="color: #000000;">　　3.赋值</span></span></p>
<p><span style="font-size: 15px;"><strong><span style="color: #ff0000;"><span style="color: #000000;">　　所以，在多线程环境下，有可能线程A将num读取到本地内存中，此时其他线程可能已经将num增大了很多，线程A依然对过期的num进行自加，重新写到主存中，最终导致了num的结果不合预期，而是小于30000。</span></span></strong></span></p>
<h1><a name="t3"></a>解决num++操作的原子性问题</h1>
<p><span style="font-size: 15px;">　　针对num++这类复合类的操作，可以使用java并发包中的原子操作类原子操作类是通过循环CAS的方式来保证其原子性的。</span></p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">/**</span><span style="color: #008000;">
 * Created by chengxiao on 2017/3/18.
 </span><span style="color: #008000;">*/</span>
<span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Counter {<br />　　<span style="color: #ff0000;">//使用原子操作类
    </span></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> AtomicInteger num = <span style="color: #0000ff;">new</span> AtomicInteger(0<span style="color: #000000;">);
    </span><span style="color: #008000;">//</span><span style="color: #008000;">使用CountDownLatch来等待计算线程执行完</span>
    <span style="color: #0000ff;">static</span> CountDownLatch countDownLatch = <span style="color: #0000ff;">new</span> CountDownLatch(30<span style="color: #000000;">);
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> main(String []args) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> InterruptedException {
        </span><span style="color: #008000;">//</span><span style="color: #008000;">开启30个线程进行累加操作</span>
        <span style="color: #0000ff;">for</span>(<span style="color: #0000ff;">int</span> i=0;i&lt;30;i++<span style="color: #000000;">){
            </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> Thread(){
                </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run(){
                    </span><span style="color: #0000ff;">for</span>(<span style="color: #0000ff;">int</span> j=0;j&lt;10000;j++<span style="color: #000000;">){
                        num.incrementAndGet();<span style="color: #ff0000;">//原子性的num++,通过循环CAS方式</span>
                    }
                    countDownLatch.countDown();
                }
            }.start();
        }
        </span><span style="color: #008000;">//</span><span style="color: #008000;">等待计算线程执行完</span>
<span style="color: #000000;">        countDownLatch.await();
        System.out.println(num);
    }
}</span></pre>
</div>
<p><span style="font-size: 15px;">执行结果</span></p>
<div class="cnblogs_code">
<pre><span style="color: #ff0000;"><strong>300000</strong></span></pre>
</div>
<p><span style="font-size: 15px;">关于原子类操作的基本原理，会在后面的章节进行介绍，此处不再赘述。</span></p>
<h1><a name="t4"></a>禁止指令重排序</h1>
<p><span style="font-size: 15px;">volatile还有一个特性：<strong>禁止指令重排序优化。</strong></span></p>
<p><span style="color: #ff0000; font-size: 15px;"><strong>重排序是指编译器和处理器为了优化程序性能而对指令序列进行排序的一种手段。但是重排序也需要遵守一定规则：</strong></span></p>
<p><span style="font-size: 15px;"><strong>　　1.重排序操作不会对存在数据依赖关系的操作进行重排序。</strong></span></p>
<p><span style="font-size: 15px;">　　　　比如：a=1;b=a; 这个指令序列，由于第二个操作依赖于第一个操作，所以在编译时和处理器运行时这两个操作不会被重排序。</span></p>
<p><span style="font-size: 15px;"><strong>　　2.重排序是为了优化性能，但是不管怎么重排序，单线程下程序的执行结果不能被改变</strong></span></p>
<p><span style="font-size: 15px;"><strong>　　　　</strong>比如：a=1;b=2;c=a+b这三个操作，第一步（a=1)和第二步(b=2)由于不存在数据依赖关系，所以可能会发生重排序，但是c=a+b这个操作是不会被重排序的，因为需要保证最终的结果一定是c=a+b=3。</span></p>
<p><span style="font-size: 15px;">　　重排序在单线程模式下是一定会保证最终结果的正确性，但是在多线程环境下，问题就出来了，来开个例子，我们对第一个TestVolatile的例子稍稍改进，再增加个共享变量a</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> TestVolatile {
    </span><span style="color: #0000ff;">int</span> a = 1<span style="color: #000000;">;
    </span><span style="color: #0000ff;">boolean</span> status = <span style="color: #0000ff;">false</span><span style="color: #000000;">;

    </span><span style="color: #008000;">/**</span><span style="color: #008000;">
     * 状态切换为true
     </span><span style="color: #008000;">*/</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> changeStatus(){
        a </span>= 2;<span style="color: #008000;">//</span><span style="color: #ff0000;">1</span>
        status = <span style="color: #0000ff;">true</span>;<span style="color: #008000;">//</span><span style="color: #ff0000;">2</span>
<span style="color: #000000;">    }

    </span><span style="color: #008000;">/**</span><span style="color: #008000;">
     * 若状态为true，则running。
     </span><span style="color: #008000;">*/</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run(){
        </span><span style="color: #0000ff;">if</span>(status){<span style="color: #008000;">//</span><span style="color: #ff0000;">3</span>
            <span style="color: #0000ff;">int</span> b = a+1;<span style="color: #008000;">//</span><span style="color: #ff0000;">4</span>
<span style="color: #000000;">            System.out.println(b);
        }
    }
}</span></pre>
</div>
<p><span style="font-size: 15px;">　　假设线程A执行changeStatus后，线程B执行run，我们能保证在4处，b一定等于3么？</span></p>
<p><span style="font-size: 15px;">　　<strong>答案依然是无法保证！</strong>也有可能b仍然为2。上面我们提到过，为了提供程序并行度，编译器和处理器可能会对指令进行重排序，而上例中的1和2由于不存在数据依赖关系，则有可能会被重排序，先执行status=true再执行a=2。而此时线程B会顺利到达4处，而线程A中a=2这个操作还未被执行，所以b=a+1的结果也有可能依然等于2。</span></p>
<p><span style="font-size: 15px;">　　使用volatile关键字修饰共享变量便可以禁止这种重排序。<strong>若用volatile修饰共享变量，在编译时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序</strong></span></p>
<p><span style="font-size: 15px;">　　volatile禁止指令重排序也有一些规则，简单列举一下：</span></p>
<p><span style="font-size: 15px;">　　<strong>1.当第二个操作是voaltile写时，无论第一个操作是什么，都不能进行重排序</strong></span></p>
<p><span style="font-size: 15px;"><strong>　　2.当地一个操作是volatile读时，不管第二个操作是什么，都不能进行重排序</strong></span></p>
<p><span style="font-size: 15px;"><strong>　　3.当第一个操作是volatile写时，第二个操作是volatile读时，不能进行重排序</strong></span></p>
<h1><a name="t5"></a>总结：</h1>
<p><span style="font-size: 15px;">　　简单总结下，volatile是一种轻量级的同步机制，它主要有两个特性：一是保证共享变量对所有线程的可见性；二是禁止指令重排序优化。同时需要注意的是，volatile对于单个的共享变量的读/写具有原子性，但是像num++这种复合操作，volatile无法保证其原子性，当然文中也提出了解决方案，就是使用并发包中的原子操作类，通过循环CAS地方式来保证num++操作的原子性。关于原子操作类，会在后续的文章进行介绍。</span></p>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2017-03-18 20:02</span>&nbsp;
<a href="https://www.cnblogs.com/chengxiao/">dreamcatcher-cx</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=6528109" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(6528109);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 304993, cb_blogApp = 'chengxiao', cb_blogUserGuid = '8319750a-5977-e611-9fc1-ac853d9f53cc';
    var cb_entryId = 6528109, cb_entryCreatedDate = '2017-03-18 20:02', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 dreamcatcher-cx
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>