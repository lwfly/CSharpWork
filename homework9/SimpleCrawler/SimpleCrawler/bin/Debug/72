<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="示例程序：启动两个线程，每个线程中让静态变量count循环累加100次。 最终输出的count结果是什么呢？一定会是200吗？ 加了同步锁之后，count自增的操作变成了原子性操作，所以最终的输出一定" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>漫画：什么是CAS机制 - 开源最前线 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/blacklowkey/bundle-blacklowkey.min.css?v=Fx4xdLkGuHnlaG7xntG_wAnZrnorJWp5u_TWKqbvMF0" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/blacklowkey/bundle-blacklowkey-mobile.min.css?v=cYvlxMu_nd6MVfg-vi7YqOC6FaZ7VHFsDM166vO_ekA" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/myopensource/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/myopensource/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/myopensource/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 402652;
        var currentBlogApp = 'myopensource';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'BlackLowKey';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/myopensource/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/myopensource/">开源最前线</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/myopensource/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%BC%80%E6%BA%90%E6%9C%80%E5%89%8D%E7%BA%BF">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/myopensource/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
7&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
5</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/myopensource/p/8177074.html">漫画：什么是CAS机制</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142408987-2093651899.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142428753-1669180149.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142430471-225351748.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142500096-1427562048.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142504799-421806684.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142506378-423385790.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142508549-793117636.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142509471-1716933155.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142510237-1236016542.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142511799-1346955733.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142515503-551725483.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142522659-2136566690.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142524518-461076297.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142526003-26452533.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142527378-1040467173.png" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142528424-1010518323.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142529409-966955979.jpg" alt="" /></p>
<p>示例程序：启动两个线程，每个线程中让静态变量count循环累加100次。</p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142530440-2089624774.jpg" alt="" /></p>
<p>最终输出的count结果是什么呢？一定会是200吗？</p>
<p>加了同步锁之后，count自增的操作变成了原子性操作，所以最终的输出一定是<strong>count=200</strong>，代码实现了线程安全。</p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142531581-25052835.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142532893-620508865.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142534190-1369968744.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142535159-470469724.jpg" alt="" /></p>
<p>所谓原子操作类，指的是java.util.concurrent.atomic包下，一系列以Atomic开头的包装类。例如<strong>AtomicBoolean</strong>，<strong>AtomicInteger</strong>，<strong>AtomicLong</strong>。它们分别用于Boolean，Integer，Long类型的原子性操作。</p>
<p>&nbsp;</p>
<p>现在我们尝试在代码中引入AtomicInteger类：</p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142536128-2024231359.png" alt="" /></p>
<p>为什么这么说呢？关键在于<strong>性能</strong>问题。</p>
<p>&nbsp;</p>
<p>Synchronized关键字会让没有得到锁资源的线程进入<strong>BLOCKED</strong>状态，而后在争夺到锁资源后恢复为<strong>RUNNABLE</strong>状态，这个过程中涉及到操作系统<strong>用户模式</strong>和<strong>内核模式</strong>的转换，代价比较高。</p>
<p>&nbsp;</p>
<p>尽管Java1.6为Synchronized做了优化，增加了从<strong>偏向锁</strong>到<strong>轻量级锁</strong>再到<strong>重量级锁</strong>的过度，但是在最终转变为重量级锁之后，性能仍然较低。</p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142536878-372118513.jpg" alt="" /></p>
<p><strong>什么是CAS？</strong></p>
<p>&nbsp;</p>
<p>CAS是英文单词<strong>Compare And Swap</strong>的缩写，翻译过来就是比较并替换。</p>
<p>&nbsp;</p>
<p>CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，要修改的新值B。</p>
<p>&nbsp;</p>
<p>更新一个变量的时候，只有当变量的预期值A和内存地址V当中的实际值相同时，才会将内存地址V对应的值修改为B。</p>
<p>&nbsp;</p>
<p>这样说或许有些抽象，我们来看一个例子：</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>1.在内存地址V当中，存储着值为10的变量。</p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142540362-571280295.png" alt="" /></p>
<p>2.此时线程1想要把变量的值增加1。对线程1来说，旧的预期值A=10，要修改的新值B=11。</p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142542299-1617994496.png" alt="" /></p>
<p>3.在线程1要提交更新之前，另一个线程2抢先一步，把内存地址V中的变量值率先更新成了11。</p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142543784-1625100143.png" alt="" /></p>
<p>4.线程1开始提交更新，首先进行<strong>A和地址V的实际值比较（Compare）</strong>，发现A不等于V的实际值，提交失败。</p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142545221-837543615.png" alt="" /></p>
<p>5.线程1重新获取内存地址V的当前值，并重新计算想要修改的新值。此时对线程1来说，A=11，B=12。这个重新尝试的过程被称为<strong>自旋</strong>。</p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142546909-270453852.png" alt="" /></p>
<p>6.这一次比较幸运，没有其他线程改变地址V的值。线程1进行<strong>Compare</strong>，发现A和地址V的实际值是相等的。</p>
<p>&nbsp;</p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142548299-328053032.png" alt="" /></p>
<p>7.线程1进行<strong>SWAP</strong>，把地址V的值替换为B，也就是12。</p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142625753-443716413.png" alt="" /></p>
<p>从思想上来说，Synchronized属于<strong>悲观锁</strong>，悲观地认为程序中的并发情况严重，所以严防死守。CAS属于<strong>乐观锁</strong>，乐观地认为程序中的并发情况不那么严重，所以让线程不断去尝试更新。</p>
<p>&nbsp;</p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142557487-1048385838.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142559268-1039292216.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142600737-1339558436.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142602268-690462947.jpg" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;<img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142640096-1060113561.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142646284-572586103.jpg" alt="" /></p>
<p><img src="https://images2017.cnblogs.com/blog/1193919/201801/1193919-20180102142648034-1818658423.jpg" alt="" /></p>
<p><strong>CAS的缺点：</strong></p>
<p><strong>&nbsp;</strong></p>
<p><strong>1.CPU开销较大</strong></p>
<p>在并发量比较高的情况下，如果许多线程反复尝试更新某一个变量，却又一直更新不成功，循环往复，会给CPU带来很大的压力。</p>
<p><strong>&nbsp;</strong></p>
<p>&nbsp;</p>
<p><strong>2.不能保证代码块的原子性</strong></p>
<p>CAS机制所保证的只是一个变量的原子性操作，而不能保证整个代码块的原子性。比如需要保证3个变量共同进行原子性的更新，就不得不使用Synchronized了。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>3.ABA问题</strong></p>
<p>这是CAS机制最大的问题所在。</p>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2018-01-02 14:30</span>&nbsp;
<a href="https://www.cnblogs.com/myopensource/">开源最前线</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=8177074" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(8177074);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 402652, cb_blogApp = 'myopensource', cb_blogUserGuid = '7e33997f-3464-4568-07a6-08d49c352df3';
    var cb_entryId = 8177074, cb_entryCreatedDate = '2018-01-02 14:30', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 开源最前线
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>