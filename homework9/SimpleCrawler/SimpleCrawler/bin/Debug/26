<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="1. 前言 是 Spring 提供的一个调用 Restful 服务的抽象层，它简化的同 Restful 服务的通信方式，隐藏了不必要的一些细节，让我们更加优雅地在应用中调用 Restful 服务 。但" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>使用 RestTemplate 进行第三方Rest服务调用 - 码农小胖哥 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/codinglife/bundle-codinglife.min.css?v=hlpQ1CJDwwJXDxv2HNauUmW3NjyWzoMaw1uER19SLT0" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/codinglife/bundle-codinglife-mobile.min.css?v=XjHfryC9ctsatIZz1dHn7TsRIqmwz9c3aj_6SCfHSDM" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/felordcn/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/felordcn/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/felordcn/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 570528;
        var currentBlogApp = 'felordcn';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'CodingLife';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/felordcn/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/felordcn/">码农小胖哥</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/felordcn/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E7%A0%81%E5%86%9C%E5%B0%8F%E8%83%96%E5%93%A5">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/felordcn/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
149&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
0</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/felordcn/p/12719139.html">使用 RestTemplate 进行第三方Rest服务调用</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <p><img src="https://img2020.cnblogs.com/other/1739473/202004/1739473-20200417124539430-309403874.png" alt=""></p>
<h2 id="1-前言">1. 前言</h2>
<p><code>RestTemplate</code> 是 <strong>Spring</strong> 提供的一个调用 <strong>Restful</strong> 服务的抽象层，它简化的同 <strong>Restful</strong> 服务的通信方式，隐藏了不必要的一些细节，让我们更加优雅地在应用中调用 <strong>Restful</strong> 服务 。但是在 <strong>Spring 5.0</strong> 以后<code>RestTemplate</code>处于维护模式，不再进行新特性的开发，仅仅进行一些日常维护。<strong>Spring</strong> 建议我们使用同时支持同步、异步和 <strong>Stream</strong> 的另一个 <strong>API</strong> —— <strong>WebClient</strong> 。但是在 <strong>Spring MVC</strong> 下目前我们还没有更好的选择。</p>
<h2 id="2-resttemplate-的使用场景">2. RestTemplate 的使用场景</h2>
<p>我们在项目中经常要使用第三方的 <strong>Rest API</strong> 服务，比如短信、快递查询、天气预报等等。这些第三方只要提供了 <strong>Rest Api</strong> ，你都可以使用 <code>RestTemplate</code> 来调用它们。</p>
<h2 id="3-初始化-resttemplate">3. 初始化 RestTemplate</h2>
<p>只要你的项目使用了 <strong>Spring MVC</strong> 就已经集成了<code>RestTemplate</code> 。但是通常情况下该类不会自动被注入 <strong>Spring IoC</strong>容器，因为很多 <strong>Rest API</strong> 都具有特殊性，为了更加灵活的进行定制，其构建类 <code>RestTemplateBuilder</code>被自动注入了 <strong>Spring IoC</strong> 容器。 我们可以这样初始化它：</p>
<pre><code class="language-java">package cn.felord.rest.webclient;

import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

/**
 * @author felord.cn
 * @since 14:58
 **/
@Component
public class SomeWeb {

    private final RestTemplateBuilder restTemplateBuilder;

    public SomeWeb(RestTemplateBuilder restTemplateBuilder) {
        this.restTemplateBuilder = restTemplateBuilder;
    }

    public RestTemplate restTemplate() {
        // 通过 builder 定制
        return restTemplateBuilder.requestFactory(OkHttp3ClientHttpRequestFactory::new).
                build();
    }
}
</code></pre>
<blockquote>
<p>最佳实践：针对每一个第三方服务尽量定制对应的 <code>RestTemplate</code>，尽量不公用，除非这些第三方的流程完全一致。</p>
</blockquote>
<h3 id="21-resttemplate-底层">2.1 RestTemplate 底层</h3>
<p>默认情况下，<code>RestTemplate</code> 使用 <code>java.net.HttpURLConnection</code> 作为实现，一但使用它时有异常响应状态（比如 401），就会引发异常，因此我们一般不使用它。我们可以切换到 <strong>Netty</strong> 、<strong>Apache HttpComponents</strong>、<strong>okHttp</strong> 默认实现的客户端库，参考 <strong>2</strong> 中的 <code>requestFactory(ClientHttpRequestFactory factory)</code> 接入方法，也可以自行实现 <code>ClientHttpRequestFactory</code> 对接其它第三方库进行接入。这里我使用 <strong>okHttp</strong> 。你可以定制这些第三方库提供的特性丰富你的 <code>RestTemplate</code>，比如设置请求超时。</p>
<h2 id="3-常用方法场景举例">3. 常用方法场景举例</h2>
<p><code>RestTemplate</code> 支持所有 <strong>Restful</strong> 风格方法，你可以根据需要进行选择，这里我们只介绍一些常用的方法。所有方法都支持<strong>URI</strong> 模板和 <strong>URI</strong> 参数，支持下面这种写法：</p>
<pre><code># 类似 spring mvc 中的 @PathVariable
https://api.apiopen.top/{method}
</code></pre>
<h3 id="31-getpostforentity">3.1 {get|post}ForEntity</h3>
<p><strong>Get</strong> 请求后将响应映射为 <code>ResponseEntity&lt;T&gt;</code> 响应对象，一个响应体的包装对象。我们使用下列代码来随机请求 5 条漂亮小姐姐的照片，你可以打印进行查看：</p>
<pre><code class="language-java">    @Autowired
    RestTemplate restTemplate;

    void contextLoads() {
        String url = &quot;https://api.apiopen.top/getImages?page=0&amp;count=5&quot;;
        ResponseEntity&lt;String&gt; responseEntity = restTemplate
                .getForEntity(url,String.class);
        String body = responseEntity.getBody();
        System.out.println(&quot;body = &quot; + body);
    }
</code></pre>
<p>上面的方法改为按顺序的可变参数：</p>
<pre><code class="language-java">        String url = &quot;https://api.apiopen.top/getImages?page={page}&amp;count={count}&quot;;
        ResponseEntity&lt;String&gt; responseEntity = restTemplate
                .getForEntity(url,String.class,0,5);
        String body = responseEntity.getBody();
        System.out.println(&quot;body = &quot; + body);
</code></pre>
<p>或者使用 <code>Map&lt;String,Object&gt;</code>：</p>
<pre><code class="language-java">        String url = &quot;https://api.apiopen.top/getImages?page={page}&amp;count={count}&quot;;
        HashMap&lt;String, Object&gt; uriParams = new HashMap&lt;&gt;();
        uriParams.put(&quot;page&quot;, 0);
        uriParams.put(&quot;count&quot;, 5);
        ResponseEntity&lt;String&gt; responseEntity = restTemplate
                .getForEntity(url, String.class, uriParams);
        String body = responseEntity.getBody();
        System.out.println(&quot;body = &quot; + body);
</code></pre>
<p><strong>post</strong> 请求 额外会传入一个可能为 <code>null</code> 的 VO 对象，或者 <code>MultiValueMap</code> 来携带请求体参数 ，它们最终会被封装入</p>
<p><code>org.springframework.http.HttpEntity</code> 对象，该对象可包含以下两个部分：</p>
<ul>
<li>请求体对象，可使用实体 VO、<code>MultiValueMap</code></li>
<li>请求头对象， <code>org.springframework.http.HttpHeaders</code></li>
</ul>
<pre><code class="language-java"> String url = &quot;https://api.apiopen.top/getImages?page={page}&amp;count={count}&quot;;
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity&lt;UserVO&gt; httpEntity = new HttpEntity&lt;&gt;(new UserVO(&quot;userName&quot;), headers);
        HashMap&lt;String, Object&gt; uriParams = new HashMap&lt;&gt;();
        uriParams.put(&quot;page&quot;, 0);
        uriParams.put(&quot;count&quot;, 5);
        ResponseEntity&lt;String&gt; responseEntity = restTemplate.postForEntity(url, httpEntity, String.class, uriParams);
</code></pre>
<p>以上是一个调用 Post 请求并携带请求体和请求头的示例。</p>
<h3 id="32-getpostforobject">3.2 {get|post}ForObject</h3>
<p>我们还可以将响应直接映射到 <strong>POJO</strong>, 当然你需要对响应结果的结构非常了解,建议先映射到 <code>String</code> 查看一下结构。我们给出一种示例，其他示例参考 <strong>3.1</strong> :</p>
<pre><code class="language-java">        String url = &quot;https://api.apiopen.top/getImages?page={page}&amp;count={count}&quot;;
        HashMap&lt;String, Object&gt; uriParams = new HashMap&lt;&gt;();
        uriParams.put(&quot;page&quot;, 0);
        uriParams.put(&quot;count&quot;, 5);
        String forObject = restTemplate.getForObject(url, String.class, uriParams);
        System.out.println(&quot;forObject = &quot; + forObject);
</code></pre>
<h3 id="33-headforheaders">3.3 headForHeaders</h3>
<p>该方法用于获取所有的 <strong>URI</strong> 模板声明资源的 <strong>Header</strong></p>
<pre><code class="language-java">        String url = &quot;https://api.apiopen.top/getImages?page={page}&amp;count={count}&quot;;
        HashMap&lt;String, Object&gt; uriParams = new HashMap&lt;&gt;();
        uriParams.put(&quot;page&quot;, 0);
        uriParams.put(&quot;count&quot;, 5);
        HttpHeaders httpHeaders = restTemplate.headForHeaders(url, uriParams);
        System.out.println(httpHeaders);
</code></pre>
<p>结果为：</p>
<pre><code class="language-java">[Access-Control-Allow-Headers:&quot;Content-Type, x-requested-with, X-Custom-Header, Authorization&quot;, Access-Control-Allow-Methods:&quot;POST, GET, OPTIONS, DELETE&quot;, Access-Control-Allow-Origin:&quot;*&quot;, Access-Control-Max-Age:&quot;3600&quot;, Cache-Control:&quot;private&quot;, Content-Length:&quot;608&quot;, Content-Type:&quot;application/json;charset=UTF-8&quot;, Date:&quot;Tue, 14 Apr 2020 15:25:19 GMT&quot;, Expires:&quot;Thu, 01 Jan 1970 00:00:00 GMT&quot;]
</code></pre>
<h3 id="34-postforlocation">3.4 postForLocation</h3>
<p>该 <strong>Post</strong> 操作不是返回完整的资源，而是返回新创建的资源 URI 。比如上传文件返回资源的请求路径。</p>
<h3 id="35-putdelete">3.5 put/delete</h3>
<p>对应 put 请求 和 delete 请求，参考前面的 api。</p>
<h3 id="36-optionsforallow">3.6 optionsForAllow</h3>
<p>该方法获取该 <strong>URI</strong> 允许的所有请求方法比如 <strong>GET、POST、PUT、DELETE</strong> 中的一个或者几个。</p>
<h3 id="37-exchange">3.7 exchange</h3>
<p>该方法是通用的请求方式，支持 <strong>GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE</strong>，当上面的方式不能满足你可采用该方式定制，该方式提供了更加灵活的 API，比如你可以定制 <strong>GET</strong> 方法的请求头，放入 <strong>Jwt Token</strong>等操作，这是<code>getForObject</code> 无法比拟的。</p>
<h2 id="4-总结">4. 总结</h2>
<p><code>RestTemplate</code> 是一个很有用的请求协调器，屏蔽了调用服务的复杂度而又不失灵活。但是值得注意的是它正在退出历史舞台。再牛逼的程序员也有转行的那一天不是吗？</p>
<p><code>关注公众号：Felordcn  获取更多资讯</code></p>
<p><a href="https://felord.cn">个人博客：https://felord.cn</a></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-17 12:46</span>&nbsp;
<a href="https://www.cnblogs.com/felordcn/">码农小胖哥</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12719139" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12719139);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 570528, cb_blogApp = 'felordcn', cb_blogUserGuid = '460efe35-7299-4129-ef71-08d7006bad27';
    var cb_entryId = 12719139, cb_entryCreatedDate = '2020-04-17 12:46', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 码农小胖哥
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>