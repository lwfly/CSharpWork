<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="第一章：手动搭建I/O网络通信框架1：Socket和ServerSocket入门实战，实现单聊 第二章：手动搭建I/O网络通信框架2：BIO编程模型实现群聊 第四章：手动搭建I/O网络通信框架4：AI" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>手动搭建I/O网络通信框架3：NIO编程模型，升级改造聊天室 - 耶low - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/custom/bundle-custom.min.css?v=1ssrnY3Il79Ok472qeVrpxlSprSXcHhYPgZC5S3wtVM" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/lbhym/custom.css?v=/bNcoqoCmLiTu3EIkfiCTX1tFFw=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=-Yh290MhQyDeXLmvKTSses9H6-49lqbpXFh55zvS0w8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/lbhym/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/lbhym/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/lbhym/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 524632;
        var currentBlogApp = 'lbhym';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'Custom';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/lbhym/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/lbhym/">耶low的博客</a>
</h1>
<h2>
路途遥远
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/lbhym/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E8%80%B6low">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/lbhym/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
51&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
6</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lbhym/p/12698309.html">手动搭建I/O网络通信框架3：NIO编程模型，升级改造聊天室</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p><span style="font-size: 16px;">第一章：<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lbhym/p/12673470.html">手动搭建I/O网络通信框架1：Socket和ServerSocket入门实战，实现单聊</a></span></p>
<p><span style="font-size: 16px;">第二章：<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lbhym/p/12681787.html">手动搭建I/O网络通信框架2：BIO编程模型实现群聊</a></span></p>
<p><span style="font-size: 16px;">第四章：</span><span style="font-size: 16px;"><a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lbhym/p/12720944.html">手动搭建I/O网络通信框架4：AIO编程模型，聊天室终极改造</a></span></p>
<p>&nbsp;</p>
<p>　　<span style="font-size: 16px;">在第二章中用BIO编程模型，简单的实现了一个聊天室。但是其最大的问题在解释BIO时就已经说了：ServerSocket接收请求时（accept()方法）、InputStream、OutputStream（输入输出流的读和写）都是阻塞的。还有一个问题就是线程池，线程多了，服务器性能耗不起。线程少了，在聊天室这种场景下，让用户等待连接肯定不可取。今天要说到的NIO编程模型就很好的解决了这几个问题。有两个主要的替换地方：</span></p>
<p><span style="font-size: 16px;">　　1.用Channel代替Stream。2.使用Selector监控多条Channel，起到类似线程池的作用，但是它只需一条线程。</span></p>
<p><span style="font-size: 16px;">　　既然要用NIO编程模型，那就要说说它的三个主要核心：</span><span style="font-size: 16px;">Selector、Channel、Buffer。它们的关系是：一个Selector管理多个Channel，一个Channel可以往Buffer中写入和读取数据。Buffer名叫缓冲区，底层其实是一个数组，会提供一些方法往数组写入读取数据。</span></p>
<p><span style="font-size: 16px;">　　<strong><span style="font-size: 18px;">Buffer</span>:</strong></span></p>
<p><span style="font-size: 16px;">不太了解Buffer的可以看看这个：<a href="https://blog.csdn.net/czx2018/article/details/89502699">https://blog.csdn.net/czx2018/article/details/89502699</a></span></p>
<p><span style="font-size: 16px;">　　<strong>常用API：</strong></span></p>
<p><span style="font-size: 16px;">　　allocate() - 初始化一块缓冲区</span></p>
<p><span style="font-size: 16px;">　　put() - 向缓冲区写入数据</span></p>
<p><span style="font-size: 16px;">　　get() - 向缓冲区读数据</span></p>
<p><span style="font-size: 16px;">　　filp() - 将缓冲区的读写模式转换</span></p>
<p><span style="font-size: 16px;">　　clear() - 这个并不是把缓冲区里的数据清除，而是利用后来写入的数据来覆盖原来写入的数据，以达到类似清除了老的数据的效果</span></p>
<p><span style="font-size: 16px;">　　compact() - 从读数据切换到写模式，数据不会被清空，会将所有未读的数据copy到缓冲区头部，后续写数据不会覆盖，而是在这些数据之后写数据</span></p>
<p><span style="font-size: 16px;">　　mark() - 对position做出标记，配合reset使用</span></p>
<p><span style="font-size: 16px;">　　reset() - 将position置为标记值</span></p>
<p><span style="font-size: 16px;">　　<em>简单地说</em>：Buffer实质上是个数组，有两个关键的指针，一个position代表当前数据写入到哪了、一个limit代表限制。初始化时设置了数组长度，这limit就是数组的长度。如：设置intBuffer.allocate(10)，最大存储10个int数据，写入5五个数据后，需要读取数据了。用filp()转换读写模式后，limit=position，position=0。也就是说从0开始读，只能读到第五个。读完后这个缓冲区就需要clear()了，实际上并没有真的去清空数据，而是position和limit两个指针又回到了初始化的位置，接着又可以写入数据了，反正数组下标相同重新写入数据会覆盖，就没必要真的去清空了。</span></p>
<p><span style="font-size: 16px;">　　<strong><span style="font-size: 18px;">Channel:</span></strong></span></p>
<p>&nbsp;</p>
<p><span style="font-size: 16px;">　　Channel(通道)主要用于传输数据，然后从Buffer中写入或读取。它们两个结合起来虽然和流有些相似，但主要有以下几点区别：</span><br /><span style="font-size: 16px;">　　1.流是单向的，可以发现Stream的输入流和输出流是独立的，它们只能输入或输出。而通道既可以读也可以写。</span><br /><span style="font-size: 16px;">　　2.通道本身不能存放数据，只能借助Buffer。</span><br /><span style="font-size: 16px;">　　3.Channel支持异步。</span><br /><span style="font-size: 16px;">　　Channel有如下三个常用的类：FileChannel、SocketChannel、ServerSocketChannel。从名字也可以看出区别，第一个是对文件数据的读写，后面两个则是针对Socket和ServerSocket，这里我们只是用后面两个。更详细的用法可以看：https://www.cnblogs.com/snailclimb/p/9086335.html，下面的代码中也会用到，会有详细的注释。</span></p>
<p><span style="font-size: 16px;">　　<span style="font-size: 18px;"><strong>Selector</strong></span></span></p>
<p><span style="font-size: 16px;"><span style="font-size: 18px;"><strong><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200414150122707-1475260423.png" alt="" width="516" height="256" /></strong></span></span></p>
<p><span style="font-size: 16px;">　　多个Channel可以注册到Selector，就可以直接通过一个Selector管理多个通道。Channel在不同的时间或者不同的事件下有不同的状态，Selector会通过轮询来达到监视的效果，如果查到Channel的状态正好是我们注册时声明的所要监视的状态，我们就可以查出这些通道，然后做相应的处理。这些状态如下：</span><br /><span style="font-size: 16px;">　　1.客户端的SocketChannel和服务器端建立连接，SocketChannel状态就是<strong>Connect</strong>。</span><br /><span style="font-size: 16px;">　　2.服务器端的ServerSocketChannel接收了客户端的请求，ServerSocketChannel状态就是<strong>Accept</strong>。</span><br /><span style="font-size: 16px;">　　3.当SocketChannel有数据可读，那么它们的状态就是<strong>Read</strong>。</span><br /><span style="font-size: 16px;">　　4.当我们需要向Channel中写数据时，那么它们的状态就是<strong>Write</strong>。</span><br /><span style="font-size: 16px;">　　具体的使用见下面代码注释或看</span><span style="font-size: 16px;"><a href="https://www.cnblogs.com/snailclimb/p/9086334.html">https://www.cnblogs.com/snailclimb/p/9086334.html</a></span></p>
<p>　　<strong><span style="font-size: 18px;">NIO编程模型</span></strong><br /><span style="font-size: 16px;">　　NIO编程模型工作流程：</span><br /><span style="font-size: 16px;">　　1.首先会创建一个Selector，用来监视管理各个不同的Channel，也就是不同的客户端。相当于取代了原来BIO的线程池，但是它只需一个线程就可以处理多个Channel，没有了线程上下文切换带来的消耗，很好的优化了性能。</span><br /><span style="font-size: 16px;">　　2.创建一个ServerSocketChannel监听通信端口，并注册到Selector，让Seletor监视这个通道的Accept状态，也就是接收客户端请求的状态。</span><br /><span style="font-size: 16px;">　　3.此时客户端ClientA请求服务器，那么Selector就知道了有客户端请求进来。这时候我们可以得到客户端的SocketChannel，并为这个通道注册Read状态，也就是Selector会监听ClientA发来的消息。</span><br /><span style="font-size: 16px;">　　4.一旦接收到ClientA的消息，就会用其他客户端的SocketChannel的Write状态，向它们转发ClientA的消息。</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 16px;">　　上代码之前，还是先说说各个类的作用：</span></p>
<p><span style="font-size: 16px;">　　相比较BIO的代码，NIO的代码还少了一个类，那就是服务器端的工作线程类。没了线程池，自然也不需要一个单独的线程去服务客户端。客户端还是需要一个单独的线程去等待用户输入，因为用户随时都可能输入信息，这个没法预见，只能阻塞式的等待。</span></p>
<p><span style="font-size: 16px;">　　ChatServer:服务器端的唯一的类，作用就是通过Selector监听Read和Accept事件，并针对这些事件的类型，进行不同的处理，如连接、转发。</span></p>
<p><span style="font-size: 16px;">　　ChatClient:客户端，通过Selector监听Read和Connect事件。Read事件就是获取服务器转发的消息然后显示出来；Connect事件就是和服务器建立连接，建立成功后就可以发送消息。</span></p>
<p><span style="font-size: 16px;">　　UserInputHandler:专门等待用户输入的线程，和BIO没区别。</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 16px;">　　<strong>ChatServer</strong></span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ChatServer {
    </span><span style="color: #008000;">//</span><span style="color: #008000;">设置缓冲区的大小，这里设置为1024个字节</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">int</span> BUFFER = 1024<span style="color: #000000;">;

    </span><span style="color: #008000;">//</span><span style="color: #008000;">Channel都要配合缓冲区进行读写，所以这里创建一个读缓冲区和一个写缓冲区
    </span><span style="color: #008000;">//</span><span style="color: #008000;">allocate()静态方法就是设置缓存区大小的方法</span>
    <span style="color: #0000ff;">private</span> ByteBuffer read_buffer =<span style="color: #000000;"> ByteBuffer.allocate(BUFFER);
    </span><span style="color: #0000ff;">private</span> ByteBuffer write_buffer =<span style="color: #000000;"> ByteBuffer.allocate(BUFFER);

    </span><span style="color: #008000;">//</span><span style="color: #008000;">为了监听端口更灵活，再不写死了，用一个构造函数设置需要监听的端口号</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> port;

    </span><span style="color: #0000ff;">public</span> ChatServer(<span style="color: #0000ff;">int</span><span style="color: #000000;"> port) {
        </span><span style="color: #0000ff;">this</span>.port =<span style="color: #000000;"> port;
    }

    </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> start() {
        </span><span style="color: #008000;">//</span><span style="color: #008000;">创建ServerSocketChannel和Selector并打开</span>
        <span style="color: #0000ff;">try</span> (ServerSocketChannel server = ServerSocketChannel.open(); Selector selector =<span style="color: #000000;"> Selector.open()) {
            </span><span style="color: #008000;">//</span><span style="color: #008000;">【重点,实现NIO编程模型的关键】configureBlocking设置ServerSocketChannel为非阻塞式调用,Channel默认的是阻塞的调用方式</span>
            server.configureBlocking(<span style="color: #0000ff;">false</span><span style="color: #000000;">);
            </span><span style="color: #008000;">//</span><span style="color: #008000;">绑定监听端口,这里不是给ServerSocketChannel绑定，而是给ServerSocket绑定，socket()就是获取通道原生的ServerSocket或Socket</span>
            server.socket().bind(<span style="color: #0000ff;">new</span><span style="color: #000000;"> InetSocketAddress(port));

            </span><span style="color: #008000;">//</span><span style="color: #008000;">把server注册到Selector并监听Accept事件</span>
<span style="color: #000000;">            server.register(selector, SelectionKey.OP_ACCEPT);
            System.out.println(</span>"启动服务器，监听端口:" +<span style="color: #000000;"> port);


            </span><span style="color: #0000ff;">while</span> (<span style="color: #0000ff;">true</span><span style="color: #000000;">) {
                </span><span style="color: #008000;">//</span><span style="color: #008000;">select()会返回此时触发了多少个Selector监听的事件</span>
                <span style="color: #0000ff;">if</span>(selector.select()&gt;0<span style="color: #000000;">) {
                    </span><span style="color: #008000;">//</span><span style="color: #008000;">获取这些已经触发的事件,selectedKeys()返回的是触发事件的所有信息</span>
                    Set&lt;SelectionKey&gt; selectionKeys =<span style="color: #000000;"> selector.selectedKeys();
                    </span><span style="color: #008000;">//</span><span style="color: #008000;">循环处理这些事件</span>
                    <span style="color: #0000ff;">for</span><span style="color: #000000;"> (SelectionKey key : selectionKeys) {
                        handles(key, selector);
                    }
                    </span><span style="color: #008000;">//</span><span style="color: #008000;">处理完后清空selectedKeys，避免重复处理</span>
<span style="color: #000000;">                    selectionKeys.clear();
                }
            }
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
            e.printStackTrace();
        }
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;">处理事件的方法</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> handles(SelectionKey key, Selector selector) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> IOException {
        </span><span style="color: #008000;">//</span><span style="color: #008000;">当触发了Accept事件，也就是有客户端请求进来</span>
        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (key.isAcceptable()) {
            </span><span style="color: #008000;">//</span><span style="color: #008000;">获取ServerSocketChannel</span>
            ServerSocketChannel server =<span style="color: #000000;"> (ServerSocketChannel) key.channel();
            </span><span style="color: #008000;">//</span><span style="color: #008000;">然后通过accept()方法接收客户端的请求，这个方法会返回客户端的SocketChannel，这一步和原生的ServerSocket类似</span>
            SocketChannel client =<span style="color: #000000;"> server.accept();
            client.configureBlocking(</span><span style="color: #0000ff;">false</span><span style="color: #000000;">);

            </span><span style="color: #008000;">//</span><span style="color: #008000;">把客户端的SocketChannel注册到Selector，并监听Read事件</span>
<span style="color: #000000;">            client.register(selector, SelectionKey.OP_READ);
            System.out.println(</span>"客户端[" + client.socket().getPort() + "]上线啦！"<span style="color: #000000;">);
        }
        </span><span style="color: #008000;">//</span><span style="color: #008000;">当触发了Read事件，也就是客户端发来了消息</span>
        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (key.isReadable()) {
            SocketChannel client </span>=<span style="color: #000000;"> (SocketChannel) key.channel();
            </span><span style="color: #008000;">//</span><span style="color: #008000;">获取消息</span>
            String msg =<span style="color: #000000;"> receive(client);
            System.out.println(</span>"客户端[" + client.socket().getPort() + "]:" +<span style="color: #000000;"> msg);
            </span><span style="color: #008000;">//</span><span style="color: #008000;">把消息转发给其他客户端</span>
<span style="color: #000000;">            sendMessage(client, msg, selector);
            </span><span style="color: #008000;">//</span><span style="color: #008000;">判断用户是否退出</span>
            <span style="color: #0000ff;">if</span> (msg.equals("quit"<span style="color: #000000;">)) {
                </span><span style="color: #008000;">//</span><span style="color: #008000;">解除该事件的监听</span>
<span style="color: #000000;">                key.cancel();
                </span><span style="color: #008000;">//</span><span style="color: #008000;">更新Selector</span>
<span style="color: #000000;">                selector.wakeup();
                System.out.println(</span>"客户端[" + client.socket().getPort() + "]下线了！"<span style="color: #000000;">);
            }
        }
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;">编码方式设置为utf-8，下面字符和字符串互转时用得到</span>
    <span style="color: #0000ff;">private</span> Charset charset = Charset.forName("UTF-8"<span style="color: #000000;">);

    </span><span style="color: #008000;">//</span><span style="color: #008000;">接收消息的方法</span>
    <span style="color: #0000ff;">private</span> String receive(SocketChannel client) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> IOException {
        </span><span style="color: #008000;">//</span><span style="color: #008000;">用缓冲区之前先清空一下,避免之前的信息残留</span>
<span style="color: #000000;">        read_buffer.clear();
        </span><span style="color: #008000;">//</span><span style="color: #008000;">把通道里的信息读取到缓冲区，用while循环一直读取，直到读完所有消息。因为没有明确的类似\n这样的结尾，所以要一直读到没有字节为止</span>
        <span style="color: #0000ff;">while</span> (client.read(read_buffer) &gt; 0<span style="color: #000000;">) ;
        </span><span style="color: #008000;">//</span><span style="color: #008000;">把消息读取到缓冲区后，需要转换buffer的读写状态，不明白的看看前面的Buffer的讲解</span>
<span style="color: #000000;">        read_buffer.flip();
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> String.valueOf(charset.decode(read_buffer));
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;">转发消息的方法</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> sendMessage(SocketChannel client, String msg, Selector selector) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> IOException {
        msg </span>= "客户端[" + client.socket().getPort() + "]:" +<span style="color: #000000;"> msg;
        </span><span style="color: #008000;">//</span><span style="color: #008000;">获取所有客户端,keys()与前面的selectedKeys不同，这个是获取所有已经注册的信息，而selectedKeys获取的是触发了的事件的信息</span>
        <span style="color: #0000ff;">for</span><span style="color: #000000;"> (SelectionKey key : selector.keys()) {
            </span><span style="color: #008000;">//</span><span style="color: #008000;">排除服务器和本客户端并且保证key是有效的，isValid()会判断Selector监听是否正常、对应的通道是保持连接的状态等</span>
            <span style="color: #0000ff;">if</span> (!(key.channel() <span style="color: #0000ff;">instanceof</span> ServerSocketChannel) &amp;&amp; !client.equals(key.channel()) &amp;&amp;<span style="color: #000000;"> key.isValid()) {
                SocketChannel otherClient </span>=<span style="color: #000000;"> (SocketChannel) key.channel();
                write_buffer.clear();
                write_buffer.put(charset.encode(msg));
                write_buffer.flip();
                </span><span style="color: #008000;">//</span><span style="color: #008000;">把消息写入到缓冲区后，再把缓冲区的内容写到客户端对应的通道中</span>
                <span style="color: #0000ff;">while</span><span style="color: #000000;"> (write_buffer.hasRemaining()) {
                    otherClient.write(write_buffer);
                }
            }
        }
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
        </span><span style="color: #0000ff;">new</span> ChatServer(8888<span style="color: #000000;">).start();
    }
}</span></pre>
</div>
<p><strong>　　<span style="font-size: 16px;">ChatClient</span></strong></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ChatClient {
    </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">int</span> BUFFER = 1024<span style="color: #000000;">;
    </span><span style="color: #0000ff;">private</span> ByteBuffer read_buffer =<span style="color: #000000;"> ByteBuffer.allocate(BUFFER);
    </span><span style="color: #0000ff;">private</span> ByteBuffer write_buffer =<span style="color: #000000;"> ByteBuffer.allocate(BUFFER);
    </span><span style="color: #008000;">//</span><span style="color: #008000;">声明成全局变量是为了方便下面一些工具方法的调用，就不用try with resource了</span>
    <span style="color: #0000ff;">private</span><span style="color: #000000;"> SocketChannel client;
    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> Selector selector;

    </span><span style="color: #0000ff;">private</span> Charset charset = Charset.forName("UTF-8"<span style="color: #000000;">);

    </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> start() {
        </span><span style="color: #0000ff;">try</span><span style="color: #000000;">  {
            client</span>=<span style="color: #000000;">SocketChannel.open();
            selector</span>=<span style="color: #000000;">Selector.open();
            client.configureBlocking(</span><span style="color: #0000ff;">false</span><span style="color: #000000;">);
            </span><span style="color: #008000;">//</span><span style="color: #008000;">注册channel，并监听SocketChannel的Connect事件</span>
<span style="color: #000000;">            client.register(selector, SelectionKey.OP_CONNECT);
            </span><span style="color: #008000;">//</span><span style="color: #008000;">请求服务器建立连接</span>
            client.connect(<span style="color: #0000ff;">new</span> InetSocketAddress("127.0.0.1", 8888<span style="color: #000000;">));
            </span><span style="color: #008000;">//</span><span style="color: #008000;">和服务器一样，不停的获取触发事件，并做相应的处理</span>
            <span style="color: #0000ff;">while</span> (<span style="color: #0000ff;">true</span><span style="color: #000000;">) {
                selector.select();
                Set</span>&lt;SelectionKey&gt; selectionKeys =<span style="color: #000000;"> selector.selectedKeys();
                </span><span style="color: #0000ff;">for</span><span style="color: #000000;"> (SelectionKey key : selectionKeys) {
                    handle(key);
                }
                selectionKeys.clear();
            }
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
            e.printStackTrace();
        }</span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (ClosedSelectorException e){
            </span><span style="color: #008000;">//</span><span style="color: #008000;">当用户输入quit时，在send()方法中，selector会被关闭，而在上面的无限while循环中，可能会使用到已经关闭了的selector。
            </span><span style="color: #008000;">//</span><span style="color: #008000;">所以这里捕捉一下异常，做正常退出处理就行了。不会对服务器造成影响</span>
<span style="color: #000000;">        }
    }

    </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> handle(SelectionKey key) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> IOException {
        </span><span style="color: #008000;">//</span><span style="color: #008000;">当触发connect事件，也就是服务器和客户端建立连接</span>
        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (key.isConnectable()) {
            SocketChannel client </span>=<span style="color: #000000;"> (SocketChannel) key.channel();
            </span><span style="color: #008000;">//</span><span style="color: #008000;">finishConnect()返回true，说明和服务器已经建立连接。如果是false，说明还在连接中，还没完全连接完成</span>
            <span style="color: #0000ff;">if</span><span style="color: #000000;">(client.finishConnect()){
                </span><span style="color: #008000;">//</span><span style="color: #008000;">新建一个新线程去等待用户输入</span>
                <span style="color: #0000ff;">new</span> Thread(<span style="color: #0000ff;">new</span> UserInputHandler(<span style="color: #0000ff;">this</span><span style="color: #000000;">)).start();
            }
            </span><span style="color: #008000;">//</span><span style="color: #008000;">连接建立完成后，注册read事件，开始监听服务器转发的消息</span>
<span style="color: #000000;">            client.register(selector,SelectionKey.OP_READ);
        }
        </span><span style="color: #008000;">//</span><span style="color: #008000;">当触发read事件，也就是获取到服务器的转发消息</span>
        <span style="color: #0000ff;">if</span><span style="color: #000000;">(key.isReadable()){
            SocketChannel client </span>=<span style="color: #000000;"> (SocketChannel) key.channel();
            </span><span style="color: #008000;">//</span><span style="color: #008000;">获取消息</span>
            String msg =<span style="color: #000000;"> receive(client);
            System.out.println(msg);
            </span><span style="color: #008000;">//</span><span style="color: #008000;">判断用户是否退出</span>
            <span style="color: #0000ff;">if</span> (msg.equals("quit"<span style="color: #000000;">)) {
                </span><span style="color: #008000;">//</span><span style="color: #008000;">解除该事件的监听</span>
<span style="color: #000000;">                key.cancel();
                </span><span style="color: #008000;">//</span><span style="color: #008000;">更新Selector</span>
<span style="color: #000000;">                selector.wakeup();
            }
        }
    }
    </span><span style="color: #008000;">//</span><span style="color: #008000;">获取消息</span>
    <span style="color: #0000ff;">private</span> String receive(SocketChannel client) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> IOException{
        read_buffer.clear();
        </span><span style="color: #0000ff;">while</span> (client.read(read_buffer)&gt;0<span style="color: #000000;">);
        read_buffer.flip();
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> String.valueOf(charset.decode(read_buffer));
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;">发送消息</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> send(String msg) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> IOException{
        </span><span style="color: #0000ff;">if</span>(!<span style="color: #000000;">msg.isEmpty()){
            write_buffer.clear();
            write_buffer.put(charset.encode(msg));
            write_buffer.flip();
            </span><span style="color: #0000ff;">while</span><span style="color: #000000;"> (write_buffer.hasRemaining()){
                client.write(write_buffer);
            }
            </span><span style="color: #0000ff;">if</span>(msg.equals("quit"<span style="color: #000000;">)){
                selector.close();
            }
        }
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
        </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> ChatClient().start();
    }
}</span></pre>
</div>
<p>&nbsp;</p>
<p><strong><span style="font-size: 16px;">　　UserInputHandler</span></strong></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> UserInputHandler <span style="color: #0000ff;">implements</span><span style="color: #000000;"> Runnable {
    ChatClient client;
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> UserInputHandler(ChatClient chatClient) {
        </span><span style="color: #0000ff;">this</span>.client=<span style="color: #000000;">chatClient;
    }
    @Override
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run() {
        BufferedReader read</span>=<span style="color: #0000ff;">new</span><span style="color: #000000;"> BufferedReader(
                </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> InputStreamReader(System.in)
        );
        </span><span style="color: #0000ff;">while</span> (<span style="color: #0000ff;">true</span><span style="color: #000000;">){
            </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
                String input</span>=<span style="color: #000000;">read.readLine();
                client.send(input);
                </span><span style="color: #0000ff;">if</span>(input.equals("quit"<span style="color: #000000;">))
                    </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;
            } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
                e.printStackTrace();
            }
        }
    }
}</span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 16px;">　　测试运行：之前用的是win10的终端运行的，以后直接用IDEA运行，方便些。不过一个类同时运行多个，以实现多个客户端的场景，需要先做以下设置<br /></span></p>
<p><span style="font-size: 16px;"><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200414152051636-927905062.png" alt="" /></span></p>
<p><span style="font-size: 16px;"><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200414152100412-1057042302.png" alt="" width="717" height="474" /></span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 16px;"><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200414152130678-206345317.png" alt="" width="716" height="473" /></span></p>
<p>&nbsp;</p>
<p><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200414152204091-2069873206.png" alt="" width="318" height="237" /></p>
<p>　　<span style="font-size: 16px;">设置完后，就可以同时运行两个ChatClient了，上图中得Unnamed就是第二个ChatClient，选中后点击右边运行按钮就行了。效果如下：</span></p>
<p><span style="font-size: 16px;"><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200414152412715-1986061599.png" alt="" width="489" height="235" /></span></p>
<p><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200414152438453-1030565064.png" alt="" /></p>
<p><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200414152450583-1807958534.png" alt="" width="489" height="334" /></p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-14 15:27</span>&nbsp;
<a href="https://www.cnblogs.com/lbhym/">耶low</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12698309" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12698309);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 524632, cb_blogApp = 'lbhym', cb_blogUserGuid = '35e67917-dc39-41b2-3962-08d5a8229c33';
    var cb_entryId = 12698309, cb_entryCreatedDate = '2020-04-14 15:27', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 耶low
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>