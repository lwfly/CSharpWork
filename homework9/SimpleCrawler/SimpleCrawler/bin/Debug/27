<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="前言 相信使用过WebApiThrottle的童鞋对AspNetCoreRateLimit应该不陌生，AspNetCoreRateLimit是一个ASP.NET Core速率限制的解决方案，旨在控制客" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>.Net Core结合AspNetCoreRateLimit实现限流 - 山治先生 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/EminemJK/custom.css?v=OY&#x2B;wrNBNU/cUpOXJaONriIRpw28=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=-Yh290MhQyDeXLmvKTSses9H6-49lqbpXFh55zvS0w8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/EminemJK/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/EminemJK/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/EminemJK/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 223718;
        var currentBlogApp = 'EminemJK';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'Custom';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <link  type="text/css" rel="stylesheet" href="https://blog-static.cnblogs.com/files/EminemJK/feedback_eminemjk.css">

<a href="https://github.com/EminemJK" class="github-corner" aria-label="View source on GitHub"><svg width="80" height="80" viewBox="0 0 250 250" style="fill:#64CEAA; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/EminemJK/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/EminemJK/">山治先生</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/EminemJK/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%B1%B1%E6%B2%BB%E5%85%88%E7%94%9F">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/EminemJK/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
35&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
345</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/EminemJK/p/12720691.html">.Net Core结合AspNetCoreRateLimit实现限流</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <h2>前言</h2>
<p>　　相信使用过<strong>WebApiThrottle</strong>的童鞋对AspNetCoreRateLimit应该不陌生，<strong>AspNetCoreRateLimit</strong>是一个ASP.NET Core速率限制的解决方案，旨在控制客户端根据IP地址或客户端ID向Web API或MVC应用发出的请求的速率。AspNetCoreRateLimit包含一个<strong>IpRateLimitMiddleware</strong>和<strong>ClientRateLimitMiddleware</strong>，每个中间件可以根据不同的场景配置限制允许IP或客户端，自定义这些限制策略，也可以将限制策略应用在每​​个API URL或具体的HTTP Method上。</p>
<h1>实践</h1>
<p>&nbsp;　　起初是因为新做的项目中，有天查询日志发现，对外的几个公共接口经常被&ldquo;恶意&rdquo;调用，考虑到接口安全性问题，增加限流策略。</p>
<p>　　<strong>AspNetCoreRateLimit GayHub：</strong><a href="https://github.com/stefanprodan/AspNetCoreRateLimit">https://github.com/stefanprodan/AspNetCoreRateLimit</a></p>
<h2>根据IP进行限流</h2>
<p>　　通过nuget安装AspNetCoreRateLimit，当前版本是3.0.5，因为实际项目中用的都是分布式缓存，在这里不用内存存储，而是<strong>结合Redis进行使用</strong>，内存存储直接参考官方的Wiki就可以了。</p>
<div class="cnblogs_code">
<pre>Install-Package AspNetCoreRateLimit <br /><br />Install-Package Microsoft.Extensions.Caching.Redis</pre>
</div>
<p>　　在<strong>Startup.ConfigureServices</strong>中将服务和其他依赖注入</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> ConfigureServices(IServiceCollection services)
        {
            </span><span style="color: #0000ff;">#region</span> MVC<span style="color: #000000;">
            services.AddMvc(
              options </span>=&gt;<span style="color: #000000;">
              {
                  options.UseCentralRoutePrefix(</span><span style="color: #0000ff;">new</span> RouteAttribute(<span style="color: #800000;">"</span><span style="color: #800000;">api/</span><span style="color: #800000;">"</span><span style="color: #000000;">));
              }
              ).SetCompatibilityVersion(CompatibilityVersion.Version_2_2);
            </span><span style="color: #0000ff;">#endregion</span><span style="color: #000000;">

            services.AddDistributedRedisCache(options </span>=&gt;<span style="color: #000000;">
            {
                options.Configuration </span>= <span style="color: #800000;">"</span><span style="color: #800000;">127.0.0.1:6379,password=123456,connectTimeout=5000,syncTimeout=10000</span><span style="color: #800000;">"</span>; 
                options.InstanceName = <span style="color: #800000;">"</span><span style="color: #800000;">WebRatelimit</span><span style="color: #800000;">"</span><span style="color: #000000;">;
            }); 
            </span><span style="color: #008000;">//</span><span style="color: #008000;">加载配置</span>
<span style="color: #000000;">            services.AddOptions();
            </span><span style="color: #008000;">//</span><span style="color: #008000;">从appsettings.json获取相应配置</span>
            services.Configure&lt;IpRateLimitOptions&gt;(Configuration.GetSection(<span style="color: #800000;">"</span><span style="color: #800000;">IpRateLimiting</span><span style="color: #800000;">"</span><span style="color: #000000;">));
            
            </span><span style="color: #008000;">//</span><span style="color: #008000;">注入计数器和规则存储</span>
            services.AddSingleton&lt;IIpPolicyStore, DistributedCacheIpPolicyStore&gt;<span style="color: #000000;">();
            services.AddSingleton</span>&lt;IRateLimitCounterStore, DistributedCacheRateLimitCounterStore&gt;<span style="color: #000000;">();
            
            services.AddSingleton</span>&lt;IHttpContextAccessor, HttpContextAccessor&gt;<span style="color: #000000;">();
            </span><span style="color: #008000;">//</span><span style="color: #008000;">配置（计数器密钥生成器）</span>
            services.AddSingleton&lt;IRateLimitConfiguration, RateLimitConfiguration&gt;<span style="color: #000000;">();
        }</span></pre>
</div>
<p>　　在<strong>Startup.Configure</strong>启用</p>
<div class="cnblogs_code">
<pre>        <span style="color: #008000;">//</span><span style="color: #008000;"> This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            </span><span style="color: #0000ff;">else</span><span style="color: #000000;">
            {
                app.UseHsts();
            }
            </span><span style="color: #008000;">//</span><span style="color: #008000;">启用限流,需在UseMvc前面</span>
            app.UseIpRateLimiting<span style="color: #000000;">();
            app.UseMvc();
        }</span></pre>
</div>
<p>　　为了不影响appsettings.json的美观吧，可以新建一个RateLimitConfig.json，并<strong>Program</strong>中启动加载中增加</p>
<div class="cnblogs_code">
<pre>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> IWebHostBuilder CreateWebHostBuilder(<span style="color: #0000ff;">string</span>[] args) =&gt;<span style="color: #000000;">
            WebHost.CreateDefaultBuilder(args)
                .UseStartup</span>&lt;Startup&gt;().ConfigureAppConfiguration((host,config)=&gt;<span style="color: #000000;"> 
                {
                    config.AddJsonFile($</span><span style="color: #800000;">"</span><span style="color: #800000;">RateLimitConfig.json</span><span style="color: #800000;">"</span>, optional: <span style="color: #0000ff;">true</span>, reloadOnChange: <span style="color: #0000ff;">true</span><span style="color: #000000;">);
                });</span></pre>
</div>
<p>　　<strong>RateLimitConfig.json</strong> 配置如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">{
  </span><span style="color: #800000;">"</span><span style="color: #800000;">IpRateLimiting</span><span style="color: #800000;">"</span><span style="color: #000000;">: {
    </span><span style="color: #008000;">//</span><span style="color: #008000;">false则全局将应用限制，并且仅应用具有作为端点的规则* 。 true则限制将应用于每个端点，如{HTTP_Verb}{PATH}</span>
    <span style="color: #800000;">"</span><span style="color: #800000;">EnableEndpointRateLimiting</span><span style="color: #800000;">"</span>: <span style="color: #0000ff;">true</span><span style="color: #000000;">,
    </span><span style="color: #008000;">//</span><span style="color: #008000;">false则拒绝的API调用不会添加到调用次数计数器上</span>
    <span style="color: #800000;">"</span><span style="color: #800000;">StackBlockedRequests</span><span style="color: #800000;">"</span>: <span style="color: #0000ff;">false</span><span style="color: #000000;">,
    </span><span style="color: #800000;">"</span><span style="color: #800000;">RealIpHeader</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">X-Real-IP</span><span style="color: #800000;">"</span><span style="color: #000000;">,
    </span><span style="color: #800000;">"</span><span style="color: #800000;">ClientIdHeader</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">X-ClientId</span><span style="color: #800000;">"</span><span style="color: #000000;">,
    </span><span style="color: #800000;">"</span><span style="color: #800000;">HttpStatusCode</span><span style="color: #800000;">"</span>: <span style="color: #800080;">200</span><span style="color: #000000;">,
    </span><span style="color: #800000;">"</span><span style="color: #800000;">QuotaExceededResponse</span><span style="color: #800000;">"</span><span style="color: #000000;">: {
      </span><span style="color: #800000;">"</span><span style="color: #800000;">Content</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">{{\"code\":429,\"msg\":\"访问过于频繁，请稍后重试\",\"data\":null}}</span><span style="color: #800000;">"</span><span style="color: #000000;">,
      </span><span style="color: #800000;">"</span><span style="color: #800000;">ContentType</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">application/json</span><span style="color: #800000;">"</span><span style="color: #000000;">,
      </span><span style="color: #800000;">"</span><span style="color: #800000;">StatusCode</span><span style="color: #800000;">"</span>: <span style="color: #800080;">200</span><span style="color: #000000;">
    },
    </span><span style="color: #800000;">"</span><span style="color: #800000;">IpWhitelist</span><span style="color: #800000;">"</span><span style="color: #000000;">: [ ],
    </span><span style="color: #800000;">"</span><span style="color: #800000;">EndpointWhitelist</span><span style="color: #800000;">"</span><span style="color: #000000;">: [],
    </span><span style="color: #800000;">"</span><span style="color: #800000;">ClientWhitelist</span><span style="color: #800000;">"</span><span style="color: #000000;">: [],
    </span><span style="color: #800000;">"</span><span style="color: #800000;">GeneralRules</span><span style="color: #800000;">"</span><span style="color: #000000;">: [
      {
        </span><span style="color: #800000;">"</span><span style="color: #800000;">Endpoint</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">*:/api/values/test</span><span style="color: #800000;">"</span><span style="color: #000000;">,
        </span><span style="color: #800000;">"</span><span style="color: #800000;">Period</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">5s</span><span style="color: #800000;">"</span><span style="color: #000000;">,
        </span><span style="color: #800000;">"</span><span style="color: #800000;">Limit</span><span style="color: #800000;">"</span>: <span style="color: #800080;">3</span><span style="color: #000000;">
      }
    ]
  }
}</span></pre>
</div>
<p>　　重要配置说明：</p>
<p><strong>&nbsp; &nbsp; &nbsp; &nbsp;QuotaExceededResponse</strong> 是自定义返回的内容，所以必须设置<strong>HttpStatusCode</strong>和<strong>StatusCode</strong>为200。</p>
<p>　　<strong>GeneralRules</strong>是具体的策略，根据不同需求配置不同端点即可，<strong>&nbsp;Period</strong>的单位可以是<strong>s, m, h, d</strong>，<strong>Limint</strong>是单位时间内的允许访问的次数；</p>
<p>　　<strong>IpWhitelist</strong>是IP白名单，本地调试或者UAT环境，可以加入相应的IP，略过策略的限制；</p>
<p><strong>&nbsp; &nbsp; &nbsp; &nbsp;EndpointWhitelist</strong>是端点白名单，如果全局配置了访问策略，设置端点白名单相当于IP白名单一样，略过策略的限制；</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;其他配置项请参考Wiki：<a href="https://github.com/stefanprodan/AspNetCoreRateLimit/wiki/IpRateLimitMiddleware#setup">https://github.com/stefanprodan/AspNetCoreRateLimit/wiki/IpRateLimitMiddleware#setup</a></p>
<h2>Fiddler开始测试</h2>
<p>测试接口：http://127.0.0.1:5000/api/values/Test</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">        [HttpGet]
        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">object</span><span style="color: #000000;"> test()
        {
            </span><span style="color: #0000ff;">return</span> <span style="color: #800000;">"</span><span style="color: #800000;">ok</span><span style="color: #800000;">"</span><span style="color: #000000;">;
        }</span></pre>
</div>
<p>调用结果：</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="https://img2020.cnblogs.com/blog/720686/202004/720686-20200417154734909-819457522.png" alt="" width="694" height="358" /></p>
<p>&nbsp;</p>
<p>&nbsp;调用次数和剩余调用次数在Head可以看到，<em>（吃我一个链接：<a href="https://www.cnblogs.com/EminemJK/p/12720691.html">https://www.cnblogs.com/EminemJK/p/12720691.html</a>）</em></p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="https://img2020.cnblogs.com/blog/720686/202004/720686-20200417154825173-1161056187.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;如果调用超过策略后，调用失败，返回我们自定义的内容</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="https://img2020.cnblogs.com/blog/720686/202004/720686-20200417154908027-1230275924.png" alt="" width="649" height="335" /></p>
<p>&nbsp;</p>
<p>&nbsp;在Redis客户端可以看到策略的一些情况，<img style="display: block; margin-left: auto; margin-right: auto;" src="https://img2020.cnblogs.com/blog/720686/202004/720686-20200417160113422-1446801280.png" alt="" /></p>
<h2>&nbsp;其他</h2>
<p>　　通常在项目中，Authorization授权是少不了了，加入限流后，在被限流的接口调用后，限流拦截器使得跨域策略失效，故重写拦截器中间件，继承<strong>IpRateLimitMiddleware </strong>即可：</p>
<div class="cnblogs_code">
<pre>    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> IPLimitMiddleware : IpRateLimitMiddleware
    {
        </span><span style="color: #0000ff;">public</span> IPLimitMiddleware(RequestDelegate next, IOptions&lt;IpRateLimitOptions&gt; options, IRateLimitCounterStore counterStore, IIpPolicyStore policyStore, IRateLimitConfiguration config, ILogger&lt;IpRateLimitMiddleware&gt;<span style="color: #000000;"> logger)
            : </span><span style="color: #0000ff;">base</span><span style="color: #000000;">(next, options, counterStore, policyStore, config, logger)
        {
        }

        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">override</span> Task ReturnQuotaExceededResponse(HttpContext httpContext, RateLimitRule rule, <span style="color: #0000ff;">string</span><span style="color: #000000;"> retryAfter)
        {
            httpContext.Response.Headers.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">Access-Control-Allow-Origin</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">*</span><span style="color: #800000;">"</span><span style="color: #000000;">);
            </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">base</span><span style="color: #000000;">.ReturnQuotaExceededResponse(httpContext, rule, retryAfter);
        }
    }</span></pre>
</div>
<p>　　然后修改<strong>Startup.Configure</strong>，</p>
<div class="cnblogs_code">
<pre>        <span style="color: #008000;">//</span><span style="color: #008000;">启用限流,需在UseMvc前面
        </span><span style="color: #008000;">//</span><span style="color: #008000;">app.UseIpRateLimiting();</span>
        app.UseMiddleware&lt;IPLimitMiddleware&gt;<span style="color: #000000;">();
        app.UseMvc();        </span></pre>
</div>
<p>　　<strong>特别需要注意的坑是</strong>，在其他文章的教程中，他们会写成：</p>
<div class="cnblogs_code">
<pre>        app.UseMiddleware&lt;IPLimitMiddleware&gt;().UseIpRateLimiting();<span style="color: #008000;">//</span><span style="color: #008000;">错误的演示 <a href="https://www.cnblogs.com/EminemJK/p/12720691.html">https://www.cnblogs.com/EminemJK/p/12720691.html</a><br /></span></pre>
</div>
<p>　　这些写你测试的时候会发现，</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="https://img2020.cnblogs.com/blog/720686/202004/720686-20200417161006382-1615482491.png" alt="" /></p>
<p>X-Rate-Limit-Remaining 递减量会变成2，也不是递减1，举栗子，配置如下：</p>
<div class="cnblogs_code">
<pre>        <span style="color: #800000;">"</span><span style="color: #800000;">Endpoint</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">*:/api/values/test</span><span style="color: #800000;">"</span><span style="color: #000000;">,
        </span><span style="color: #800000;">"</span><span style="color: #800000;">Period</span><span style="color: #800000;">"</span>: <span style="color: #800000;">"</span><span style="color: #800000;">3s</span><span style="color: #800000;">"</span><span style="color: #000000;">,
        </span><span style="color: #800000;">"</span><span style="color: #800000;">Limit</span><span style="color: #800000;">"</span>: <span style="color: #800080;">1</span></pre>
</div>
<p>表示3秒内可以访问的次数是1一次，当发生调用的时候会直接返回被限制的提示，而不能正常访问接口。</p>
<h2>最后</h2>
<p>　　<strong>AspNetCoreRateLimit</strong>还可以根据客户端ID进行配置策略，具体可以看一下官方的Wiki吧。</p>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-17 16:37</span>&nbsp;
<a href="https://www.cnblogs.com/EminemJK/">山治先生</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12720691" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12720691);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 223718, cb_blogApp = 'EminemJK', cb_blogUserGuid = '008753a6-79ab-e411-b908-9dcfd8948a71';
    var cb_entryId = 12720691, cb_entryCreatedDate = '2020-04-17 16:37', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 山治先生
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <script type = "text/javascript" > $(function() {
        $('#blogTitle h1').addClass('bounceInLeft animated');
        $('#blogTitle h2').addClass('bounceInRight animated');
        initCommentData();
        // PageBeginHtml Block Begin
        var $digg = $('.diggit');
        var timer = setInterval(function() {
                console.log('digg timer');
                if ($digg.length > 0) 
                      $digg.before('<div class="float-action gotop"><i class="icon"></i></div>');
                if ($digg.length > 0) 
                      clearInterval(timer);
                else 
                     $digg = $('.diggit');
        },3000);

        var $gotop = $('.gotop');
        $('#post_detail').on('click', '.gotop',
        function(e) {
                e.preventDefault();
                $("body,html").stop().animate({
                        scrollTop: 0
                },
                800);
        });
        $(window).scroll(function() {
                if ($(this).scrollTop() != 0) {
                        $gotop.stop().fadeIn();
                } else {
                        $gotop.stop().fadeOut();
                }
        });

        var $blogBody = $('#cnblogs_post_body');
        var bodyWidth = $blogBody.width();
        $('img', $blogBody).each(function() {
                if ($(this).width() > bodyWidth) {
                        $(this).width(bodyWidth);
                }
        })

});

function initCommentData() {
var ss =$('#blog-comments-placeholder');
        $('.feedbackItem').each(function() {
                var text = $(this).find('.feedbackListSubtitle .layer').text();
                // 将楼层信息放到data里面
                if ($(this).find('.feedbackListSubtitle .louzhu').length > 0) $(this).addClass('myself');
                var avatar = $(this).find('.feedbackCon>span').html() ||'https://www.cnblogs.com/images/cnblogs_com/EminemJK/1410685/o_default.png';
                $(this).find('.blog_comment_body').append('<img class="user-avatar" src="' + avatar + '"/>')
        });
}

$(document).ajaxComplete(function(event, xhr, settings) {
        // 监听获取评论ajax事件
        if (settings.url.indexOf('GetComments.aspx') >= 0) {
                initCommentData();
        }
}); 
</script>
    </div>
</body>
</html>