<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="第一章：手动搭建I/O网络通信框架1：Socket和ServerSocket入门实战，实现单聊 第二章：手动搭建I/O网络通信框架2：BIO编程模型实现群聊 第三章：手动搭建I/O网络通信框架3：NI" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>手动搭建I/O网络通信框架4：AIO编程模型，聊天室终极改造 - 耶low - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/custom/bundle-custom.min.css?v=1ssrnY3Il79Ok472qeVrpxlSprSXcHhYPgZC5S3wtVM" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/lbhym/custom.css?v=/bNcoqoCmLiTu3EIkfiCTX1tFFw=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=-Yh290MhQyDeXLmvKTSses9H6-49lqbpXFh55zvS0w8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/lbhym/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/lbhym/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/lbhym/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 524632;
        var currentBlogApp = 'lbhym';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'Custom';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/lbhym/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/lbhym/">耶low的博客</a>
</h1>
<h2>
路途遥远
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/lbhym/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E8%80%B6low">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/lbhym/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
51&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
6</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lbhym/p/12720944.html">手动搭建I/O网络通信框架4：AIO编程模型，聊天室终极改造</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p><span style="font-size: 16px;">第一章：<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lbhym/p/12673470.html">手动搭建I/O网络通信框架1：Socket和ServerSocket入门实战，实现单聊</a></span></p>
<p><span style="font-size: 16px;">第二章：<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lbhym/p/12681787.html">手动搭建I/O网络通信框架2：BIO编程模型实现群聊</a></span></p>
<p><span style="font-size: 16px;">第三章：<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lbhym/p/12698309.html">手动搭建I/O网络通信框架3：NIO编程模型，升级改造聊天室</a></span></p>
<p><span style="font-size: 16px;">　　上一章讲到的NIO编程模型比较主流，非常著名的Netty就是基于NIO编程模型的。这一章说的是AIO编程模型，是<strong>异步非阻塞</strong>的。虽然同样实现的是聊天室功能，但是实现逻辑上稍微要比NIO和BIO复杂一点。不过理好整体脉络，会好理解一些。首先还是讲讲概念：</span></p>
<p><span style="font-size: 16px;">　　BIO和NIO的区别是阻塞和非阻塞，而AIO代表的是异步IO。在此之前只提到了阻塞和非阻塞，没有提到异步还是同步。可以用我在知乎上看到的一句话表示：【在处理 IO 的时候，阻塞和非阻塞都是同步 IO，只有使用了特殊的 API 才是异步 IO】。这些&ldquo;特殊的API&rdquo;下面会讲到。在说AIO之前，先总结一下阻塞非阻塞、异步同步的概念。</span></p>
<p><span style="font-size: 16px;">　　<strong>阻塞和非阻塞，描述的是结果的请求</strong>。<strong>阻塞</strong>：在得到结果之前就一直呆在那，啥也不干，此时线程挂起，就如其名，线程被阻塞了。<strong>非阻塞</strong>：如果没得到结果就返回，等一会再去请求，直到得到结果为止。<strong>异步和同步，描述的是结果的发出</strong>，当调用方的请求进来。<strong>同步</strong>：在没获取到结果前就不返回给调用方，如果调用方是阻塞的，那么调用方就会一直等着。如果调用方是非阻塞的，调用方就会先回去，等一会再来问问得到结果没。<strong>异步</strong>：调用方一来，如果是非阻塞的叫它先回去，待会有结果了再告诉你。如果是阻塞的，虽然异步会通知他，但他还是要等着，实属铁憨憨。</span></p>
<h2>　　AIO中的异步操作</h2>
<p><strong>　　<span style="font-size: 16px;">CompletionHandler</span></strong></p>
<p><span style="font-size: 16px; font-family: 'Microsoft YaHei';">　　在AIO编程模型中，常用的API，如connect、accept、read、write都是支持异步操作的。当调用这些方法时，可以携带一个<strong>CompletionHandler</strong>参数，它会提供一些回调函数。这些回调函数包括：1.当这些操作成功时你需要怎么做；2.如果这些操作失败了你要这么做。关于这个CompletionHandler参数，你只需要写一个类实现CompletionHandler口，并实现里面两个方法就行了。</span></p>
<p><span style="font-size: 16px;">　　那如何在调用connect、accept、read、write这四个方法时，传入CompletionHandler参数从而实现异步呢？下面分别举例这四个方法的使用。</span></p>
<p><span style="font-size: 16px;">　　先说说Socket和ServerSocket，在NIO中，它们变成了通道，配合缓冲区，从而实现了非阻塞。而在AIO中它们变成了异步通道。也就是AsynchronousServerSocketChannel和AsynchronousSocketChannel,下面例子中对象名分别是serverSocket和socket.</span></p>
<p><span style="font-size: 16px;">　　accept：serverSocket.accept(attachment,handler)。handler就是实现了CompletionHandler接口并实现两个回调函数的类，它具体怎么写可以看下面的实战代码。attachment为handler里面可能需要用到的辅助数据，如果没有就填null。</span></p>
<p><span style="font-size: 16px;">　　read：socket.read(buffer,attachment,handler)。buffer是缓冲区，用以存放读取到的信息。后面两个参数和accept一样。</span></p>
<p><span style="font-size: 16px;">　　write：socket.write(buffer,attachment,handler)。和read参数一样。</span></p>
<p><span style="font-size: 16px;">　　connect：socket.connect(address,attachment,handler)。address为服务器的IP和端口，后面两个参数与前几个一样。</span></p>
<p><span style="font-size: 16px;"><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200417161130725-1186191947.png" alt="" width="697" height="349" /></span></p>
<p><strong>　　<span style="font-size: 16px;">Future</span></strong></p>
<p><span style="font-size: 16px;">　　既然说到了异步操作，除了使用实现CompletionHandler接口的方式，不得不想到<strong>Future</strong>。客户端逻辑较为简单，如果使用CompletionHandler的话代码反而更复杂，所以下面的实战客户端代码就会使用Future的方式。简单来说，Future表示的是异步操作未来的结果，怎么理解未来。比如，客户端调用read方法获取服务器发来得消息：</span></p>
<div class="cnblogs_code">
<pre>Future&lt;Integer&gt; readResult=clientChannel.read(buffer)</pre>
</div>
<p><span style="font-size: 16px;">　　Integer是read()的返回类型，此时变量readResult实际上并不一定有数据，而是表示read()方法未来的结果，这时候readResult有两个方法，<strong>isDone</strong>()：返回boolean，查看程序是否完成处理，如果返回true，有结果了，这时候可以通过get()获取结果。如果你不事先判断isDone()直接调用<strong>get</strong>()也行，只不过它是阻塞的。如果你不想阻塞，想在这期间做点什么，就用isDone()。</span></p>
<p><span style="font-size: 16px;">　　</span><span style="font-size: 16px;">还有一个问题：<strong>这些handler的方法是在哪个线程执行的？</strong>serverSocket.accept这个方法肯定是在主线程里面调用的，而传入的这些回调方法其实是在其他线程执行的。在AIO中，会有一个<strong>AsynchronousChannelGroup</strong>，它和AsynchronousServerSocketChannel是绑定在一起的，<strong>它会为这些异步通道提供系统资源，线程就算其中一种系统资源</strong>，所以为了方便理解，我们暂时可以把他看作一个线程池，它会为这些handler分配线程，而不是在主线程中去执行。</span></p>
<h2>&nbsp;　　AIO编程模型</h2>
<p><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200417161442138-580814692.png" alt="" width="602" height="277" /></p>
<p>　　<span style="font-size: 16px;">上面只说了些零碎的概念，为了更好的理解，下面讲一讲大概的工作流程(主要针对服务器，客户端逻辑较为简单，代码注释也比较少，可以看前面几章)：</span></p>
<p><span style="font-size: 16px;">　　1.首先做准备工作。跟NIO一样，先要创建好通道，只不过AIO是异步通道。然后创建好AsyncChannelGroup，可以选择自定义线程池。最后把AsyncServerSocket和AsyncChannelGroup绑定在一起，这样处于同一个AsyncChannelGroup里的通道就可以共享系统资源。</span></p>
<p><span style="font-size: 16px;">　　2.最后一步准备工作，创建好handler类，并实现接口和里面两个回调方法。（如图：客户端1对应的handler,里面的回调方法会实现读取消息和转发消息的功能；serverSocket的handler里的回调方法会实现accept功能。）</span></p>
<p><span style="font-size: 16px;">　　3.准备工作完成，当客户端1连接请求进来，客户端会马上回去，ServerSocket的异步方法会在连接成功后把客户端的SocketChannel存进在线用户列表，并利用客户端1的handler开始异步监听客户端1发送的消息。</span></p>
<p><span style="font-size: 16px;">　　4.当客户端1发送消息时，如果上一步中的handler成功监听到，就会回调成功后的回调方法，这个方法里会把这个消息转发给其他客户端。转发完成后，接着利用handler监听客户端1发送的消息。</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 16px;">　　代码一共有三个类：</span></p>
<p><span style="font-size: 16px;">　　ChatServer：功能基本上和上面讲的工作流程差不多，还会有一些工具方法，都比较简单，就不多说了，如：转发消息，客户端下线后从在线列表移除客户端等。</span></p>
<p><span style="font-size: 16px;">　　ChatClient：基本和前两章的BIO、NIO没什么区别，一个线程监听用户输入信息并发送，主线程异步的读取服务器信息。</span></p>
<p><span style="font-size: 16px;">　　UserInputHandler：监听用户输入信息的线程。</span></p>
<p><span style="font-size: 16px;">　　ChatServer</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ChatServer {
    </span><span style="color: #008000;">//</span><span style="color: #008000;">设置缓冲区字节大小</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">int</span> BUFFER = 1024<span style="color: #000000;">;

    </span><span style="color: #008000;">//</span><span style="color: #008000;">声明AsynchronousServerSocketChannel和AsynchronousChannelGroup</span>
    <span style="color: #0000ff;">private</span><span style="color: #000000;"> AsynchronousServerSocketChannel serverSocketChannel;
    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> AsynchronousChannelGroup channelGroup;

    </span><span style="color: #008000;">//</span><span style="color: #008000;">在线用户列表。为了并发下的线程安全，所以使用CopyOnWriteArrayList
    </span><span style="color: #008000;">//</span><span style="color: #008000;">CopyOnWriteArrayList在写时加锁，读时不加锁，而本项目正好在转发消息时需要频繁读取.
    </span><span style="color: #008000;">//</span><span style="color: #008000;">ClientHandler包含每个客户端的通道，类型选择为ClientHandler是为了在write的时候调用每个客户端的handler</span>
    <span style="color: #0000ff;">private</span> CopyOnWriteArrayList&lt;ClientHandler&gt;<span style="color: #000000;"> clientHandlerList;
    </span><span style="color: #008000;">//</span><span style="color: #008000;">字符和字符串互转需要用到，规定编码方式，避免中文乱码</span>
    <span style="color: #0000ff;">private</span> Charset charset = Charset.forName("UTF-8"<span style="color: #000000;">);

    </span><span style="color: #008000;">//</span><span style="color: #008000;">通过构造函数设置监听端口</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> port;
    </span><span style="color: #0000ff;">public</span> ChatServer(<span style="color: #0000ff;">int</span><span style="color: #000000;"> port) {
        </span><span style="color: #0000ff;">this</span>.port =<span style="color: #000000;"> port;
        clientHandlerList</span>=<span style="color: #0000ff;">new</span> CopyOnWriteArrayList&lt;&gt;<span style="color: #000000;">();
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> start() {
        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            </span><span style="color: #008000;">/**</span><span style="color: #008000;">
             *创建一个线程池并把线程池和AsynchronousChannelGroup绑定，前面提到了AsynchronousChannelGroup包括一些系统资源，而线程就是其中一种。
             *为了方便理解我们就暂且把它当作线程池，实际上并不止包含线程池。如果你需要自己选定线程池类型和数量，就可以如下操作
             *如果不需要自定义线程池类型和数量，可以不用写下面两行代码。
             * </span><span style="color: #008000;">*/</span><span style="color: #000000;">
            ExecutorService executorService </span>= Executors.newFixedThreadPool(10<span style="color: #000000;">);
            channelGroup </span>=<span style="color: #000000;"> AsynchronousChannelGroup.withThreadPool(executorService);
            serverSocketChannel</span>=<span style="color: #000000;">AsynchronousServerSocketChannel.open(channelGroup);
            serverSocketChannel.bind(</span><span style="color: #0000ff;">new</span> InetSocketAddress("127.0.0.1"<span style="color: #000000;">,port));
            System.out.println(</span>"服务器启动：端口【"+port+"】"<span style="color: #000000;">);
            </span><span style="color: #008000;">/**</span><span style="color: #008000;">
             * AIO中accept可以异步调用，就用上面说到的CompletionHandler方式
             * 第一个参数是辅助参数，回调函数中可能会用上的，如果没有就填null;第二个参数为CompletionHandler接口的实现
             * 这里使用while和System.in.read()的原因：
             * while是为了让服务器保持运行状态，前面的NIO，BIO都有用到while无限循环来保持服务器运行，但是它们用的地方可能更好理解
             * System.in.read()是阻塞式的调用，只是单纯的避免无限循环而让accept频繁被调用，无实际业务功能。
             </span><span style="color: #008000;">*/</span>
            <span style="color: #0000ff;">while</span> (<span style="color: #0000ff;">true</span><span style="color: #000000;">) {
                serverSocketChannel.accept(</span><span style="color: #0000ff;">null</span>, <span style="color: #0000ff;">new</span><span style="color: #000000;"> AcceptHandler());
                System.in.read();
            }
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
            e.printStackTrace();
        }</span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
            </span><span style="color: #0000ff;">if</span>(serverSocketChannel!=<span style="color: #0000ff;">null</span><span style="color: #000000;">){
                </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
                    serverSocketChannel.close();
                } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;">AsynchronousSocketChannel为accept返回的类型，Object为辅助参数类型，没有就填Object</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">class</span> AcceptHandler <span style="color: #0000ff;">implements</span> CompletionHandler&lt;AsynchronousSocketChannel,Object&gt;<span style="color: #000000;">{
        </span><span style="color: #008000;">//</span><span style="color: #008000;">如果成功，执行的回调方法</span>
<span style="color: #000000;">        @Override
        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> completed(AsynchronousSocketChannel clientChannel, Object attachment) {
            </span><span style="color: #008000;">//</span><span style="color: #008000;">如果服务器没关闭，在接收完当前客户端的请求后，再次调用,以接着接收其他客户端的请求</span>
            <span style="color: #0000ff;">if</span><span style="color: #000000;">(serverSocketChannel.isOpen()){
                serverSocketChannel.accept(</span><span style="color: #0000ff;">null</span>,<span style="color: #0000ff;">this</span><span style="color: #000000;">);
            }
            </span><span style="color: #008000;">//</span><span style="color: #008000;">如果客户端的channel没有关闭</span>
            <span style="color: #0000ff;">if</span>(clientChannel!=<span style="color: #0000ff;">null</span>&amp;&amp;<span style="color: #000000;">clientChannel.isOpen()){
                </span><span style="color: #008000;">//</span><span style="color: #008000;">这个就是异步read和write要用到的handler,并传入当前客户端的channel</span>
                ClientHandler handler=<span style="color: #0000ff;">new</span><span style="color: #000000;"> ClientHandler(clientChannel);
                </span><span style="color: #008000;">//</span><span style="color: #008000;">把新用户添加到在线用户列表里</span>
<span style="color: #000000;">                clientHandlerList.add(handler);
                System.out.println(getPort(clientChannel)</span>+"上线啦！"<span style="color: #000000;">);
                ByteBuffer buffer</span>=<span style="color: #000000;">ByteBuffer.allocate(BUFFER);
                </span><span style="color: #008000;">//</span><span style="color: #008000;">异步调用read,第一个buffer是存放读到数据的容器，第二个是辅助参数。
                </span><span style="color: #008000;">//</span><span style="color: #008000;">因为真正的处理是在handler里的回调函数进行的，辅助参数会直接传进回调函数，所以为了方便使用，buffer就当作辅助参数</span>
<span style="color: #000000;">                clientChannel.read(buffer,buffer,handler);
            }
        }
        </span><span style="color: #008000;">//</span><span style="color: #008000;">如果失败，执行的回调方法</span>
<span style="color: #000000;">        @Override
        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> failed(Throwable exc, Object attachment) {
            System.out.println(</span>"连接失败"+<span style="color: #000000;">exc);
        }
    }

    </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">class</span> ClientHandler <span style="color: #0000ff;">implements</span> CompletionHandler&lt;Integer, ByteBuffer&gt;<span style="color: #000000;">{
        </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> AsynchronousSocketChannel clientChannel;
        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> ClientHandler(AsynchronousSocketChannel clientChannel) {
            </span><span style="color: #0000ff;">this</span>.clientChannel =<span style="color: #000000;"> clientChannel;
        }
        @Override
        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> completed(Integer result, ByteBuffer buffer) {
            </span><span style="color: #0000ff;">if</span>(buffer!=<span style="color: #0000ff;">null</span><span style="color: #000000;">){
                </span><span style="color: #008000;">//</span><span style="color: #008000;">如果read返回的结果小于等于0，而buffer不为空，说明客户端通道出现异常，做下线操作</span>
                <span style="color: #0000ff;">if</span>(result&lt;=0<span style="color: #000000;">){
                    removeClient(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">);
                }</span><span style="color: #0000ff;">else</span><span style="color: #000000;"> {
                    </span><span style="color: #008000;">//</span><span style="color: #008000;">转换buffer读写模式并获取消息</span>
<span style="color: #000000;">                    buffer.flip();
                    String msg</span>=<span style="color: #000000;">String.valueOf(charset.decode(buffer));
                    </span><span style="color: #008000;">//</span><span style="color: #008000;">在服务器上打印客户端发来的消息</span>
                    System.out.println(getPort(clientChannel)+<span style="color: #000000;">msg);
                    </span><span style="color: #008000;">//</span><span style="color: #008000;">把消息转发给其他客户端</span>
                    sendMessage(clientChannel,getPort(clientChannel)+<span style="color: #000000;">msg);
                    buffer</span>=<span style="color: #000000;">ByteBuffer.allocate(BUFFER);

                    </span><span style="color: #008000;">//</span><span style="color: #008000;">如果用户输入的是退出，就从在线列表里移除。否则接着监听这个用户发送消息</span>
                    <span style="color: #0000ff;">if</span>(msg.equals("quit"<span style="color: #000000;">))
                        removeClient(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">);
                    </span><span style="color: #0000ff;">else</span><span style="color: #000000;">
                        clientChannel.read(buffer, buffer, </span><span style="color: #0000ff;">this</span><span style="color: #000000;">);
                }
            }
        }

        @Override
        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> failed(Throwable exc, ByteBuffer attachment) {
            System.out.println(</span>"客户端读写异常："+<span style="color: #000000;">exc);
        }
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;">转发消息的方法</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> sendMessage(AsynchronousSocketChannel clientChannel,String msg){
        </span><span style="color: #0000ff;">for</span><span style="color: #000000;">(ClientHandler handler:clientHandlerList){
            </span><span style="color: #0000ff;">if</span>(!<span style="color: #000000;">handler.clientChannel.equals(clientChannel)){
                ByteBuffer buffer</span>=<span style="color: #000000;">charset.encode(msg);
                </span><span style="color: #008000;">//</span><span style="color: #008000;">write不需要buffer当辅助参数，因为写到客户端的通道就完事了，而读还需要回调函数转发给其他客户端。</span>
                handler.clientChannel.write(buffer,<span style="color: #0000ff;">null</span><span style="color: #000000;">,handler);
            }
        }
    }
    </span><span style="color: #008000;">//</span><span style="color: #008000;">根据客户端channel获取对应端口号的方法</span>
    <span style="color: #0000ff;">private</span><span style="color: #000000;"> String getPort(AsynchronousSocketChannel clientChannel){
        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            InetSocketAddress address</span>=<span style="color: #000000;">(InetSocketAddress)clientChannel.getRemoteAddress();
            </span><span style="color: #0000ff;">return</span> "客户端["+address.getPort()+"]:"<span style="color: #000000;">;
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
            e.printStackTrace();
            </span><span style="color: #0000ff;">return</span> "客户端[Undefined]:"<span style="color: #000000;">;
        }
    }
    </span><span style="color: #008000;">//</span><span style="color: #008000;">移除客户端</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> removeClient(ClientHandler handler){
        clientHandlerList.remove(handler);
        System.out.println(getPort(handler.clientChannel)</span>+"断开连接..."<span style="color: #000000;">);
        </span><span style="color: #0000ff;">if</span>(handler.clientChannel!=<span style="color: #0000ff;">null</span><span style="color: #000000;">){
            </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
                handler.clientChannel.close();
            } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
                e.printStackTrace();
            }
        }
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
        </span><span style="color: #0000ff;">new</span> ChatServer(8888<span style="color: #000000;">).start();
    }
}</span></pre>
</div>
<p>　　<span style="font-size: 16px;">ChatClient<br /></span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ChatClient {
    </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">int</span> BUFFER = 1024<span style="color: #000000;">;
    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> AsynchronousSocketChannel clientChannel;
    </span><span style="color: #0000ff;">private</span> Charset charset = Charset.forName("UTF-8"<span style="color: #000000;">);

    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> String host;
    </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> port;
    </span><span style="color: #008000;">//</span><span style="color: #008000;">设置服务器IP和端口</span>
    <span style="color: #0000ff;">public</span> ChatClient(String host, <span style="color: #0000ff;">int</span><span style="color: #000000;"> port) {
        </span><span style="color: #0000ff;">this</span>.host =<span style="color: #000000;"> host;
        </span><span style="color: #0000ff;">this</span>.port =<span style="color: #000000;"> port;
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> start() {
        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            clientChannel </span>=<span style="color: #000000;"> AsynchronousSocketChannel.open();
            </span><span style="color: #008000;">//</span><span style="color: #008000;">连接服务器</span>
            Future&lt;Void&gt; future = clientChannel.connect(<span style="color: #0000ff;">new</span><span style="color: #000000;"> InetSocketAddress(host, port));
            future.get();
            </span><span style="color: #008000;">//</span><span style="color: #008000;">新建一个线程去等待用户输入</span>
            <span style="color: #0000ff;">new</span> Thread(<span style="color: #0000ff;">new</span> UserInputHandler(<span style="color: #0000ff;">this</span><span style="color: #000000;">)).start();
            ByteBuffer buffer</span>=<span style="color: #000000;">ByteBuffer.allocate(BUFFER);
            </span><span style="color: #008000;">//</span><span style="color: #008000;">无限循环让客户端保持运行状态</span>
            <span style="color: #0000ff;">while</span> (<span style="color: #0000ff;">true</span><span style="color: #000000;">){
                </span><span style="color: #008000;">//</span><span style="color: #008000;">获取服务器发来的消息并存入到buffer</span>
                Future&lt;Integer&gt; read=<span style="color: #000000;">clientChannel.read(buffer);
                </span><span style="color: #0000ff;">if</span>(read.get()&gt;0<span style="color: #000000;">){
                    buffer.flip();
                    String msg</span>=<span style="color: #000000;">String.valueOf(charset.decode(buffer));
                    System.out.println(msg);
                    buffer.clear();
                }</span><span style="color: #0000ff;">else</span><span style="color: #000000;"> {
                    </span><span style="color: #008000;">//</span><span style="color: #008000;">如果read的结果小于等于0说明和服务器连接出现异常</span>
                    System.out.println("服务器断开连接"<span style="color: #000000;">);
                    </span><span style="color: #0000ff;">if</span>(clientChannel!=<span style="color: #0000ff;">null</span><span style="color: #000000;">){
                        clientChannel.close();
                    }
                    System.exit(</span>-1<span style="color: #000000;">);
                }
            }
        } </span><span style="color: #0000ff;">catch</span> (IOException | InterruptedException |<span style="color: #000000;"> ExecutionException e) {
            e.printStackTrace();
        }
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> send(String msg) {
        </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (msg.isEmpty())
            </span><span style="color: #0000ff;">return</span><span style="color: #000000;">;
        ByteBuffer buffer </span>=<span style="color: #000000;"> charset.encode(msg);
        Future</span>&lt;Integer&gt; write=<span style="color: #000000;">clientChannel.write(buffer);
        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            </span><span style="color: #008000;">//</span><span style="color: #008000;">获取发送结果，如果get方法发生异常说明发送失败</span>
<span style="color: #000000;">            write.get();
        } </span><span style="color: #0000ff;">catch</span> (ExecutionException|<span style="color: #000000;">InterruptedException e) {
            System.out.println(</span>"消息发送失败"<span style="color: #000000;">);
            e.printStackTrace();
        }
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
        </span><span style="color: #0000ff;">new</span> ChatClient("127.0.0.1",8888<span style="color: #000000;">).start();
    }
}</span></pre>
</div>
<p>　　<span style="font-size: 16px;">UserInputHandler</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> UserInputHandler <span style="color: #0000ff;">implements</span><span style="color: #000000;"> Runnable {
    ChatClient client;
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> UserInputHandler(ChatClient chatClient) {
        </span><span style="color: #0000ff;">this</span>.client=<span style="color: #000000;">chatClient;
    }
    @Override
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run() {
        BufferedReader read</span>=<span style="color: #0000ff;">new</span><span style="color: #000000;"> BufferedReader(
                </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> InputStreamReader(System.in)
        );
        </span><span style="color: #0000ff;">while</span> (<span style="color: #0000ff;">true</span><span style="color: #000000;">){
            </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
                String input</span>=<span style="color: #000000;">read.readLine();
                client.send(input);
                </span><span style="color: #0000ff;">if</span>(input.equals("quit"<span style="color: #000000;">))
                    </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;
            } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
                e.printStackTrace();
            }
        }
    }
}</span></pre>
</div>
<p>&nbsp;</p>
<p><span style="font-size: 16px;">　　运行测试:<br /></span></p>
<p><span style="font-size: 16px;"><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200417164605075-508533365.png" alt="" width="449" height="272" /></span></p>
<p>&nbsp;</p>
<p><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200417164620441-2122640649.png" alt="" width="446" height="256" /></p>
<p><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200417164642458-1627643597.png" alt="" width="443" height="250" /></p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-17 16:49</span>&nbsp;
<a href="https://www.cnblogs.com/lbhym/">耶low</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12720944" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12720944);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 524632, cb_blogApp = 'lbhym', cb_blogUserGuid = '35e67917-dc39-41b2-3962-08d5a8229c33';
    var cb_entryId = 12720944, cb_entryCreatedDate = '2020-04-17 16:49', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 耶low
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>