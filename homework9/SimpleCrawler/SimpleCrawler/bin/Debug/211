<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="Java多线程的概念，源自于操作系统的线程概念，可谓同根同源，但是具象上又是千差万别的，本文对Java多线程宏观上的概念进行了简单的介绍" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Java多线程概念简介 多线程中篇（一） - noteless - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/buildtowin/bundle-buildtowin.min.css?v=lp23bZd4RUCf9TGsihJRLSq5M_182P4N8YRMn1A2CWo" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/noteless/custom.css?v=fnk17ixpiOajP7an/OE6hUwN1aI=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/buildtowin/bundle-buildtowin-mobile.min.css?v=ADiCwO2hOTdd5yYidcx7eob7ix2VJI4o_TXjEycTHjs" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/noteless/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/noteless/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/noteless/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 268100;
        var currentBlogApp = 'noteless';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'BuildtoWin';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <link rel="stylesheet" href="https://blog-static.cnblogs.com/files/noteless/cnblogs.css" type="text/css" />

<!--
<link rel="stylesheet" href="https://blog-static.cnblogs.com/files/noteless/monokai-sublime.css">
-->

<script src="https://blog-static.cnblogs.com/files/noteless/highlight.pack.js" defer></script>






<div class="main-top">

  <a class="avatar" href="https://www.cnblogs.com/noteless">
    <img src="//files.cnblogs.com/files/noteless/cnblogspic2.gif" alt="noteless 头像">
</a>
<div class="title">
    <a class="name" href="https://www.cnblogs.com/noteless/">noteless</a>
  </div>
<div class="info">

  </div>
</div>



<a href="#"><div id="toTop" style="zoom:0;display:none"></div></a>
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/noteless/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/noteless/">noteless</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/noteless/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/noteless">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/noteless/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
212&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
89</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/noteless/p/10354673.html">Java多线程概念简介 多线程中篇（一）</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
    <div id="cnblogs_post_description" style="display: none">
        Java多线程的概念，源自于操作系统的线程概念，可谓同根同源，但是具象上又是千差万别的，本文对Java多线程宏观上的概念进行了简单的介绍
    </div>
<div id="cnblogs_post_body" class="blogpost-body ">
    <div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="color: #000000; font-size: 18pt;"><strong>Java的线程与操作系统的线程</strong></span>&nbsp;&nbsp;</span></div>
<div style="line-height: 200%;">
<div style="line-height: 200%;">
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">在线程的相关介绍中，有讲到&ldquo;线程的实现&rdquo;分为三种：内核支持，用户级以及两者混合。（这只是一种简要的分类）</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">Java线程在JDK1.2之前，是用户线程实现的</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">而在JDK1.2中，线程模型变为基于操作系统原生线程模型来实现的</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">所以说Java虚拟机中线程的映射实现，是受制于操作系统的，操作系统支持怎样的线程模型，决定了Java虚拟机中线程的样子。</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">虚拟机规范中也并未限定Java线程需要使用哪种线程模型来实现。</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">线程模型只对线程的并发规模和操作成本产生影响，对Java程序的编码和运行过程来说，这些差异都是透明的。</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">目前因为Windows和Linux系统提供的线程模型就是一对一的，所以对于Sun JDK来说，它的Windows版与Linux版都是使用一对一的线程模型实现的，一条Java线程就映射到一条轻量级进程之中</span></div>
<div style="line-height: 200%;"><span style="font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong><span style="color: #000000;">简言之，现在的JDK线程模型基于操作系统原生线程，所以模型依赖于操作系统对线程的支持，另外Windows和Linux系统提供的线程模型就是一对一的</span></strong></span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>所以可以简单认为：</strong></span></div>
<div style="line-height: 200%;"><span style="font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong><span style="color: #ff0000;">现在Java线程与操作系统线程一对一映射</span></strong></span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>现在的Java线程，就是操作系统中的线程</strong></span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>至于JVM将Java线程与操作系统的线程是如何映射的？不同的操作系统中具体的线程是如何实现的？是另外的两个很深的问题。</strong></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">之所以提到Java线程与操作系统线程，其实是想说，操作系统中将程序的运行抽象为进程和线程，有一套抽象的理论体系，其实Java线程与他们是同根同源的，核心思维逻辑是相同的，所以前面简单了解到的操作系统对于进程、线程的相关内容，并不是那么的废话.....￣□￣｜｜</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">不过尽管相似之处太多太多，虽同根同源，但是却又千差万别，每个人从生物的角度来说，骨骼多少块？肌肉多少块？几只眼睛？几只耳朵？..尽管这都是相同的，但是每个人真的一样么，脾气？秉性？能力？...&nbsp;&nbsp;</span></div>
<div style="line-height: 200%;">
<h3><span style="font-size: 18px;">一切都是Thread</span></h3>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>Thread是Java对线程的抽象描述，所以多线程编程模型必然是针对Thread</strong></span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>不管JVM与操作系统的线程到底如何映射，到底如何运行，面对Java，程序员看到的就只是Thread</strong></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">代码中操作的这个Thread类的实例，就好比是操作系统底层线程的一个指针（句柄），你想这个线程怎么样，通过操作这个Thread实例对象即可</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">抛开之前篇章中关于操作系统、进程、线程、同步、控制、死锁等底层基础知识的介绍，从Java多线程编程的视角看，我们就是在操纵不同的Thread对象实例，对这些实例进行不同的配置，并且让他们相互协作。</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">Thread是一个类，用于描述了线程这一概念，Thread有自身的属性信息比如名称，这些属性信息用于描述线程本身或者用于支撑线程可以操作的行为。</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如同我们定义一个Person类，这个类拥有一些属性和方法，然后定义了一些实例对象进行协作。&nbsp;&nbsp;&nbsp;</span></div>
<h3><span style="font-size: 18px;">多线程开发就是操纵Thread对象</span></h3>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">Java多线程程序开发中，程序员创建Thread类的实例，并且对实例进行配置，然后通过可操作的行为方法对他们进行管理调度，使程序以多线程的形式运行</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">在神话故事中，女娲娘娘抟土造人，每一个人都是&ldquo;人类&rdquo;的一个实例，每个人有姓名性别等属性信息，&ldquo;人类&rdquo;有自身的能力（行走，说话，思考，认知等），通过后天的努力学习也都有各自的能力（线程任务），整个世界由一个个不同的人，整个社会的活动由所有的人的相互的行为交互构成。</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">对于Java多线程程序开发中的程序员们来说，不就相当于神话故事中的女娲娘娘么</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">整个多线程的世界里面，都是Thread的实例对象，程序员负责创建、配置、管理调度这些对象，也就形成了支持多线程的程序了。</span></div>
<div style="line-height: 200%;">&nbsp;</div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">尽管多线程编程非常繁琐、复杂、易错，但是如果理解清楚了Thread的抽象模型，并且对多线程编程模型中的解决思路熟悉，就能够编写出来良好的多线程程序。 </span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>Thread的抽象模型往简单了说就是Thread这个类，他有属性字段，有public方法，也有封装到线程任务（Runnable），对于一个Thread的设置，他就那些可配置项目，不多不少</strong> </span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>所以只要你理解了Thread的的抽象模型，那么你就能够很清晰的对你需要的Thread进行配置。</strong> </span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>而多线程编程模型中的解决思路就如同下棋时的套路那般，可以让你更好更快更全面的写出来多线程应用程序。</strong> </span></div>
<div style="line-height: 200%;">&nbsp;</div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">所以说，什么是Java多线程编程？ </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="font-size: 16px;">只有两个步骤，</span><span style="color: #ff0000; font-size: 13.5pt;"><strong>创建Thread 对象，使用Thread对象</strong></span><span style="font-size: 16px;">，看起来似乎是超乎寻常的简单 </span></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">使用电脑也很简单，按下电源键开机，使用鼠标和键盘，说起来也是非常的简单，但是使用计算机完成工作任务，却不是一件轻松的事情。 </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">多线程不巧的是，也是如此，首先多线程编程模型的概念源于操作系统中的多线程（进程），然后有千差万别，所以对于Thread抽象模型的理解本身就具有一定的门槛 </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">另外，对于线程的操作有多种方法，既然是多线程就不止一个线程，那么多线程、多交互方法，必然产生很多种复杂的协作逻辑，如何能够正确高效的组织，也是非常考验智商的。&nbsp;&nbsp;&nbsp; </span></div>
<h3><span style="font-size: 18px;">Java线程逻辑 </span></h3>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="font-size: 16px;">操作系统中我们对进程进行了介绍，对于进程作为操作系统对于程序运行的抽象，核心为</span><span style="color: #ff0000; font-size: 13.5pt;"><strong>进程控制、进程同步、进程通信</strong></span> </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">我们前面有说到Java多线程与操作系统中的线程（进程）同根同源，其实Java的多线程编程模型核心也是这三部分 </span></div>
<div style="line-height: 200%;">
<ul style="line-height: 200%;">
<li style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>对于Thread类本身，拥有其自身的属性，比如名字、Id、优先级、状态等，这就是进程的控制信息；</strong> </span></li>
<li style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>对于Thread中封装的任务，Java提供了synchronized，volatile关键字用于控制共享资源的访问，这就是进程的同步；</strong> </span></li>
<li style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>对于Thread中的一些行为（以及从Object继承而来的），比如join、wait则相当于进程的通信；</strong> </span></li>
</ul>
</div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">简言之，Java中对操作系统中的进程的控制、同步、通信，都有抽象，当然对于Java线程来说，从编程的角度看，他的主宰不是操作系统而是我们程序员。 </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">所以说绕来绕去，即使我们说的是Java中的多线程，还是绕不开&ldquo;控制、同步、通信&rdquo;的概念。 </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><a href="https://img2018.cnblogs.com/blog/897393/201902/897393-20190207123854950-1284412903.png"><img style="display: inline; background-image: none;" title="image_5c5bb68d_2e3d" src="https://img2018.cnblogs.com/blog/897393/201902/897393-20190207123855451-2049855696.png" alt="image_5c5bb68d_2e3d" width="811" height="176" border="0" /></a> </span></div>
<h3><span style="font-size: 18px;">Java多线程编程到底是什么 </span></h3>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">所以说了这么多，到底Java多线程编程到底是什么？我们前面说只有两个步骤&ldquo;创建Thread 对象，使用Thread对象&rdquo; </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">这两个部分是对线程本身的控制与处理，但是在使用Thread对象时，还有一个最重要的部分，也就是为什么我们要使用线程？ </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">还不是为了执行任务？ </span></div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>所以说，任务的执行也是非常重要的代码，因为，多线程中的代码不再是简简单单的完成任务那么简单，因为如果涉及到共享资源的访问，所以就是涉及到进程同步的问题。</strong> </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">所以想要学习Java多线程，第一个部分，理解清楚Java对线程概念的抽象以及Thread支持的控制操作方法---也就是Thread类本身。 </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">第二个部分，理解清楚Java中同步的逻辑，也就是同步关键字的透彻理解。 </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">第三个部分，理解清楚Java对于线程通信的抽象，也就是相关方法比如wait 的逻辑 </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">以上三个部分就是Java多线程的基础，如果真的彻底理解了，我相信任何人都可以写出正确的多线程代码。 </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">但是，谁会非要从炼钢开始造汽车？电脑城中组装电脑的店铺一大把，谁会自己组装一个CPU或者风扇？ </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">发展到如今，Java也提供了更多的&ldquo;工具类&rdquo;，也不断有一些好的设计模式与理念产生，所以，想要真的成为大师，你还要学会用好各种工具，站在前人的肩膀上。 </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">所以，多线程编程的学习如上内容。 </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">在上篇中，对操作系统中关于进程线程的相关概念进行了简单介绍，以有助于下一步能够快速理解Thread抽象模型 </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">在中篇中，将会详细介绍Java的多线程编程基础。 </span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">在下篇中将会对多线程编程中的经典模式、工具类进行简单介绍。&nbsp;&nbsp;&nbsp; </span></div>
</div>
<h3><span style="font-size: 18px;">总结 </span></h3>
<div style="line-height: 200%;"><span style="font-size: 16px; font-family: 'Microsoft YaHei';">Java线程与操作系统线程的概念是同根同源的，根本逻辑是一致的，如同你跟另外一个人，生物上看都是&ldquo;人类&ldquo;，尽管从另外的很多角度你们是千差万别的。 </span></div>
<div style="line-height: 200%;"><span style="font-size: 16px; font-family: 'Microsoft YaHei';">操作系统是为了多程序（任务）的并发运行，所以有了进程抽象概念，为了程序内部更好的并发运行 ，所以有了线程的概念。 </span></div>
<div style="line-height: 200%;"><span style="font-size: 16px; font-family: 'Microsoft YaHei';">他们都是围绕着并发、提高处理机利用率等目的，他们面对的问题也都是相似的，控制、同步、通信。 </span></div>
<div style="line-height: 200%;"><span style="font-size: 16px; font-family: 'Microsoft YaHei';">所以Java线程也不例外，Java线程与操作系统关于并发程序进程的相关概念与解决思路也是相通的 </span></div>
<div style="line-height: 200%;"><span style="font-size: 16px; font-family: 'Microsoft YaHei';">所以Java线程对操作系统中的概念进行了抽象，通过Thread类提供的属性和方法，通过关键字，通过Object的通信方法，完成了对进程概念的完整描述。 </span></div>
<div style="line-height: 200%;"><span style="font-size: 16px; font-family: 'Microsoft YaHei';">所以，回头再看操作系统中关于控制、同步、通信的内容，你又会觉得非常有帮助。 </span></div>
<div style="line-height: 200%;"><span style="font-size: 16px; font-family: 'Microsoft YaHei';">多线程的学习很复杂，如果只是知识点的学习记忆，其实毫无用处，因为首先你不会如此深入底层原语（比如直接使用wait），因为有太多封装好的类，所以很快你就会忘记了，对于深度封装的类，不了解基础又无法深入，所以根本就学不会多线程。&nbsp;&nbsp; </span></div>
<div style="line-height: 200%;"><span style="font-size: 16px; font-family: 'Microsoft YaHei';">以上纯属一家之言，如果有理解错误的地方，欢迎文明指正。 </span></div>
<div style="line-height: 200%;"><span style="font-size: 16px; font-family: 'Microsoft YaHei';">原文地址:<a href="https://www.cnblogs.com/noteless/p/10354673.html" target="_blank">Java多线程概念简介 多线程中篇（一）</a></span></div>
</div>
</div>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2019-02-10 11:40</span>&nbsp;
<a href="https://www.cnblogs.com/noteless/">noteless</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10354673" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(10354673);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 268100, cb_blogApp = 'noteless', cb_blogUserGuid = '2f3ff2be-bdda-e511-9fc1-ac853d9f53cc';
    var cb_entryId = 10354673, cb_entryCreatedDate = '2019-02-10 11:40', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 noteless
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <script>
/*
$(document).ready(function() {
  $('pre').each(function(i, e) {hljs.highlightBlock(e)});
});
*/
</script>





<script>




//初始化加载函数
$(function(){
    // hideIndexArticle();
    appendNavigator();

    addOriginURL();

addSupport();
hideToTop();


})


//隐藏首页除置顶外的其他所有文章列表
function hideIndexArticle(){
    var windowURL = window.location.href;
    console.log(windowURL )
    if(windowURL && windowURL.indexOf('www.cnblogs.com/noteless')>0 && windowURL.indexOf('html')<0){
        //$('#mainContent .day:not(:first)').css('display','none');
    }
}

//增导航条上增加 目录索引按钮
function appendNavigator(){
    var _html='<li>'
        +'<a id="blog_nav_admin" class="menu" rel="nofollow" href="https://www.cnblogs.com/noteless/p/9400742.html">'
        +'目录索引'
        +'</a>'
        +'</li>';

    $('#navList').append(_html);
}

function appendMenuItem(tagName,id,content){
    console.log(tagName+" "+tagName.substring(1));
    var paddingLeft = tagName.substring(1) * 30; //添加标题缩进
    $('#menu_nav_ol').append('<li class="' + id +'" style="padding-left: '+ paddingLeft +'px;"><b>' + content + '</b></li>');
}


//添加支持一下，请求关注
function addSupport(){

var zhichiHml = '<p>'
+'<span>'
+'<img src="https://files-cdn.cnblogs.com/files/noteless/zhichiyixaa.bmp" alt="">'
+'</span>'
+'</p>';
$('#cnblogs_post_body').append(zhichiHml );

}

//每篇文章增加原文地址
function addOriginURL(){

    //文章增加原文地址
    var originURL='<div>'
        +'原文地址:'
        +'<a href="'
        +window.location.href
        +'" target="_blank">'
        +$('.postTitle a').html()
        +'</a>'
        +'</div>';
		
	originURL+='<img src="https://blog-static.cnblogs.com/files/noteless/%E4%BA%8C%E7%BB%B4%E7%A0%812.gif"></img>';
		
		
    if($("#cnblogs_post_body h3:first").length>0){
        $("#cnblogs_post_body h3:first").before(originURL);
    }else{
        $('#cnblogs_post_body').prepend(originURL);
    }


}

//如果是pc展示返回顶部
function hideToTop(){

	if(isPC()){
		$('#toTop').show();
	}
}


//判断手机还是pc
function isPC() {
   var userAgentInfo = navigator.userAgent;
   var Agents = ["Android", "iPhone",
      "SymbianOS", "Windows Phone",
      "iPad", "iPod"];
   var flag = true;
   for (var v = 0; v < Agents.length; v++) {
      if (userAgentInfo.indexOf(Agents[v]) > 0) {
         flag = false;
         break;
      }
   }
   return flag;
}



//根据标题生成左侧边栏的目录树
// 生成目录开始

$(function () {

	//如果是手机隐藏目录
	if(isPC()){

		//内容拼接
		$('body').append(
			'<div id="article-outline">'
			+'<div style="height:15px;">'
			+'<button type="button" class="close" data-dismiss="modal" aria-hidden="true">'
			+'X'
			+'</button>'
			+'</div>'
			+'</div>'
			+'<style>'
			+'#article-outline{'
			+'display:none;'
			+'min-width:140p;'
			+'max-width: 230px;'
			//+'max-height: 350px;'
			+'position:absolute;'
			+'float: left;'
			+'top:150px;'
			+'left:-999px;'
			+'border:1px solid #ccc;'
			+'box-shadow:5px 5px 2px #ccc;'
			+'padding: 5px 10px;'
			+'background-color: #fff;'
			+'overflow-y: auto;'
			+'scroll-x: auto;'
			+'}'

			+'#article-outline ul{'
			+'margin:5px 0 5px 0;'
			+'padding-left:30px;'
			+'font-size:12px;'
			+'border-left:1px dotted #ccc;'
			+'}'

			+'#article-outline ul:first-child{'
			+'padding-left:15px;'
			+'border:none;'
			+'}'

			+'#article-outline li{'
			+'list-style-type:decimal;'
			+'margin:3px 0;'
			+'}'

			+'#article-outline a{'
			+'color:#00C1E4;'
			+'}'
			+'</style>'
		)
		
		

		
		
		//取得新添加的目录元素
		var jOutline = $('#article-outline');

		//获取文章内容
		//var jContent = $('article .content');
		var jContent = $('div#topics');

		//计算高度
		var jContentHeight = jContent.height();

		//关闭按钮
		jOutline.find('.close').on('click', function () {
			jOutline.hide();
		})

		updateOutline();

		var top = jOutline.offset().top;
		scrollOutline();
		$(window).on('scroll', scrollOutline);

		function scrollOutline() {
			var scrollTop = $(document).scrollTop();
			var maxTop = jContent.offset().top + jContent.height() - jOutline.height();
			//设置行内样式
			if (scrollTop >= top && scrollTop <= maxTop) {
				jOutline.css({'position': 'fixed', 'top': 0});
			}
			else if (scrollTop < top) {
				/*
							jOutline.css({'position': 'absolute','float':'left', 'top': '150px'});
				*/
				jOutline.css({'position': 'absolute', 'top': '200px'});
			}
			else {
				/*
							jOutline.css({'position': 'absolute','float':'left', 'top': maxTop + 'px'});
				*/
				jOutline.css({'position': 'absolute', 'top': maxTop + 'px'});
			}

		}

		function updateOutline() {
			//设置哪些级别的目录
			// var arrAllHeader = jContent.find("h1,h2,h3,h4,h5,h6");
			var arrAllHeader = jContent.find("h2,h3,h4,h5,h6");
			var arrOutline = ['<ul>'];
			var header, headerText;
			var id = 0;
			var level = 0,
				lastLevel = 1;
			var levelCount = 0;
			for (var i = 0, c = arrAllHeader.length; i < c; i++) {
				header = arrAllHeader[i];
				headerText = $(header).text();

				header.setAttribute('id', id);

				level = header.tagName.match(/^h(\d)$/i)[1];
				levelCount = level - lastLevel;

				if (levelCount > 0) {
					for (var j = 0; j < levelCount; j++) {
						arrOutline.push('<ul>');
					}
				} else if (levelCount < 0) {
					levelCount *= -1;
					for (var j = 0; j < levelCount; j++) {
						arrOutline.push('</ul>');
					}
				}
				;
				arrOutline.push('<li>');
				arrOutline.push('<a href="#' + id + '">' + headerText + '</a>');
				arrOutline.push('</li>');
				lastLevel = level;
				id++;
			}
			arrOutline.push('</ul>')
			if (arrOutline.length > 2) {
				jOutline.append(arrOutline.join(''));
				jOutline.find('ul').each(function (i, n) {
					var jThis = $(this);
					if (jThis.children('li').length === 0) {
						jThis.replaceWith(jThis.children());
					}
				});
				showOutline();
			}
			else {
				hideOutline();
			}
		}

		function showOutline() {
			var offset = jContent.offset();

			//目录左侧偏移量
			/*        jOutline.css({
						left: offset.left + jContent.width() + 10 + 'px',
					}).show();*/
			jOutline.css({
				left:8 + 'px',
			}).show();
		}

		function hideOutline() {
			jOutline.hide();
		}
	
	
	}




    
});

//生成目录结束




</script>
    </div>
</body>
</html>