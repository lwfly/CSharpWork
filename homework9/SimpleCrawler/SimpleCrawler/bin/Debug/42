<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="前言 什么是TPL？全称:transmission control protocol 传输层对应于OSI七层参考模型的传输层，它提供两种端到端的通信服务。 然后思维方式回到为什么有这个TPL 数据流上" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>并发系列64章(TPL 数据流)第七章  - 时空道人 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue.min.css?v=MH15aYd6DmX-6TABpA2xkiKENy3GAhiM2dh5rOPH89I" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue-mobile.min.css?v=X7swQJ1TyCJAf6FMVjDPbYhUAiMdNFddEy1-m0_TbFQ" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/aoximin/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/aoximin/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/aoximin/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 452033;
        var currentBlogApp = 'aoximin';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleBlue';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <link href="https://files.cnblogs.com/files/aoximin/cnblog-scroller.css" type="text/css" rel="stylesheet">
<script src="https://files.cnblogs.com/files/aoximin/scrollspy.js" type="text/javascript" defer></script>
<script src="https://files.cnblogs.com/files/aoximin/stickUp.min.js" type="text/javascript" defer></script>
<script src="https://files.cnblogs.com/files/aoximin/cnblog-scroller.js" type="text/javascript" defer></script>
    </div>
    <div id="home">
    <div id="header">
        <div id="blogTitle">
            
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/aoximin/">踏踏实实做事，认认真真做人</a>
</div>
<div class="subtitle">
此生夙愿，平定中东
</div>

        </div>
        <div id="navigator">
            
<ul id="navList">
    <li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
    <li id="nav_myhome">
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/aoximin/">
首页</a>
</li>
    <li id="nav_newpost">

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
    <li id="nav_contact">
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E6%97%B6%E7%A9%BA%E9%81%93%E4%BA%BA">
联系</a></li>
    <li id="nav_rss">
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/aoximin/rss/">
订阅</a></li>
    <li id="nav_admin">
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>

            <div class="blogStats">
                
<span id="stats_post_count">随笔 - 
133&nbsp;</span>
<span id="stats_article_count">文章 - 
0&nbsp;</span>
<!-- <span id="stats-comment_count"></span> -->
<span id="stats_comment_count">评论 - 
16</span>
            </div>
        </div>
    </div>
    <div id="main">
        <div id="mainContent">
            <div class="forFlow">
                <div id="post_detail">
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/aoximin/p/12711637.html">并发系列64章(TPL 数据流)第七章 </a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h3 id="前言">前言</h3>
<p>什么是TPL？全称:transmission control protocol</p>
<p>传输层对应于OSI七层参考模型的传输层，它提供两种端到端的通信服务。</p>
<p>然后思维方式回到为什么有这个TPL 数据流上。</p>
<pre><code>TPL 数据流库向具有高吞吐量和低滞后时间的占用大量 CPU 和 I/O 操作的应用程序的并行化和消息传递提供了基础。 它还能显式控制缓存数据的方式以及在系统中移动的方式。 

为了更好地了解数据流编程模型，请考虑一个以异步方式从磁盘加载图像并创建复合图像的应用程序。 

传统编程模型通常需要使用回调和同步对象（例如锁）来协调任务和访问共享数据。 

通过使用数据流编程模型，您可以从磁盘读取时创建处理图像的数据流对象。 

在数据流模型下，您可以声明当数据可用时的处理方式，以及数据之间的所有依赖项。 由于运行时管理数据之间的依赖项，因此通常可以避免这种要求来同步访问共享数据。

此外，因为运行时计划基于数据的异步到达，所以数据流可以通过有效管理基础线程提高响应能力和吞吐量。
</code></pre>
<p>分析一下，这段话。</p>
<p>TPL 数据流库向具有高吞吐量和低滞后时间的占用大量 CPU 和 I/O 操作的应用程序的并行化和消息传递提供了基础。</p>
<p>解决一个问题就是：</p>
<p>高吞吐量和低滞后时间的占用大量 CPU 和 I/O 操作的应用程序。</p>
<p>如何解决的:</p>
<p>应用程序的并行化和消息传递提供了基础。通过并行解决的。</p>
<p>例子:</p>
<p>异步方式从磁盘加载图像并创建复合图像的应用程序</p>
<p>遇到的问题:</p>
<p>协调任务和访问共享数据 需要 回调和同步。</p>
<p>就是说共享数据的时候，需要同步。</p>
<p>总结问题：共享数据代价大。</p>
<p>如果解决的:</p>
<p>由于运行时管理数据之间的依赖项，因此通常可以避免这种要求来同步访问共享数据。</p>
<p>总结：解决了依赖，那么不需要同步了。</p>
<p>综上所述:TPL 数据流库的作用在于解决数据之间的依赖，避免同步访问共享数据。</p>
<h3 id="正文">正文</h3>
<h4 id="链接数据流块">链接数据流块</h4>
<pre><code>var multiplyBlock = new TransformBlock&lt;int, int&gt;(item=&gt;item*2);
var subtractBlock = new TransformBlock&lt;int, int&gt;(item=&gt; { Console.WriteLine(item);  return item - 2; });
multiplyBlock.LinkTo(subtractBlock);
multiplyBlock.Post(10);
Console.ReadKey();
</code></pre>
<p>打印出来就是20了。</p>
<h3 id="传递出错信息">传递出错信息</h3>
<p>需要处理数据流网格中发生的错误</p>
<h3 id="传递出错信息-2">传递出错信息</h3>
<p>如果数据流块的委托抛出异常，这个块就是故障块。一但数据流进入了故障状态，就会删除所有数据(停止接收新的数据)。</p>
<p>什么意思呢?</p>
<pre><code>static async void datalfow()
{
	var multiplyBlock = new TransformBlock&lt;int, int&gt;(item =&gt;
	{
		if (item == 1)
		{
			throw new InvalidOperationException(&quot;not good&quot;);
		}
		return item * 2;
	}
	);
	var subtractBlock = new TransformBlock&lt;int, int&gt;(item =&gt; { Console.WriteLine(item); return item - 2; });
	multiplyBlock.LinkTo(subtractBlock, new DataflowLinkOptions { PropagateCompletion = true});
	try
	{
		multiplyBlock.Post(10);
		multiplyBlock.Post(1);
		multiplyBlock.Post(20);
		await subtractBlock.Completion;
	}
	catch(AggregateException e)
	{
		Console.WriteLine(e);
	}
}
</code></pre>
<p>结果是:</p>
<p><img src="https://img2020.cnblogs.com/blog/1289794/202004/1289794-20200417162819379-947803191.png" alt=""><br>
有没有发现multiplyBlock.Post(20);，没有运行？</p>
<p>因为一但一个有错误，那么就会终止，并销毁数据。</p>
<p>这里和上面不同的是，new DataflowLinkOptions { PropagateCompletion = true}。</p>
<p>多个这个东西，那么这个有啥用呢？</p>
<p>因为我们链接块的时候，这个库不会帮助我们传递块运行的状态，如果不传递的话，下一个块是不晓得上一个块到底啥情况，这样不利于我们捕获异常。</p>
<p>而这种传递做法，我们只要在最后的处理模块，统一处理错误就可以。</p>
<h4 id="断开链接">断开链接</h4>
<p>这个我从来就没有遇到过。是这样子的，适用一种这样的场景。</p>
<p>比如说有一个数据块需要动态替换，需要断开现有的模块然后接上新的数据块。</p>
<pre><code>static async void datalfow()
{
	var multiplyBlock = new TransformBlock&lt;int, int&gt;(item =&gt;
	{
		if (item == 1)
		{
			throw new InvalidOperationException(&quot;not good&quot;);
		}
		Console.WriteLine(&quot;item:&quot; + item);
		return item * 2;
	}
	);
	var subtractBlock = new TransformBlock&lt;int, int&gt;(item =&gt; { Console.WriteLine(item-2); return item - 2; });
	var appendBlock = new TransformBlock&lt;int, int&gt;(item =&gt; { Console.WriteLine(item+2); return item + 2; });
	var link=multiplyBlock.LinkTo(subtractBlock, new DataflowLinkOptions { PropagateCompletion = true});
	try
	{
		for (int i = 0; i &lt; 20; i++)
		{
			multiplyBlock.Post(2);
			if (i==10)
			{
				await Task.Delay(1000);
				link.Dispose();
				multiplyBlock.LinkTo(appendBlock, new DataflowLinkOptions { PropagateCompletion = true });
			}
		}
		await subtractBlock.Completion;
	}
	catch(AggregateException e)
	{
		Console.WriteLine(e);
	}
}
</code></pre>
<p>结果是:</p>
<p><img src="https://img2020.cnblogs.com/blog/1289794/202004/1289794-20200417170634757-1837946137.png" alt=""></p>
<p>值得注意的是，我这里了一个:</p>
<pre><code>await Task.Delay(1000);
</code></pre>
<p>这是模拟动态运行的时候，因为当我post结束的时候，数据块链接还没开始传递。</p>
<p>注:</p>
<pre><code>除非保证链接是空闲的情况下，否则在断开数据块的链接时候会出现竞争。

竞争的是先断开还是先传递。

但是这种竞争是安全的，他会保证要不断开，要不传递带下一个数据块。
</code></pre>
<h3 id="限制流量">限制流量</h3>
<p>前面我们都是线性链接，就是一条路走到黑。但是呢，有时候出现分叉的时候，那么该如何均衡呢？</p>
<p>之所以考虑均衡，是因为比如传递到下一个数据块的时候，是会有缓存的。如果有条分叉，一条分叉无限去缓存，那另外一条可能吃不上饭了。</p>
<pre><code>static async void datalfow()
{
	var multiplyBlock = new TransformBlock&lt;int, int&gt;(item =&gt;
	{
		if (item == 1)
		{
			throw new InvalidOperationException(&quot;not good&quot;);
		}
		Console.WriteLine(&quot;item:&quot; + item);
		return item * 2;
	}
	);
	var subtractBlock = new TransformBlock&lt;int, int&gt;(item =&gt; { Console.WriteLine(item-2); return item - 2; });
	var appendBlock = new TransformBlock&lt;int, int&gt;(item =&gt; { Console.WriteLine(item+2); return item + 2; });
	multiplyBlock.LinkTo(subtractBlock, new DataflowLinkOptions { PropagateCompletion = true});
	multiplyBlock.LinkTo(appendBlock, new DataflowLinkOptions { PropagateCompletion = true });
	try
	{
		for (int i = 0; i &lt; 100; i++)
		{
			multiplyBlock.Post(2);
		}
		await subtractBlock.Completion;
	}
	catch(AggregateException e)
	{
		Console.WriteLine(e);
	}
}
</code></pre>
<p><img src="https://img2020.cnblogs.com/blog/1289794/202004/1289794-20200417171753549-1686352341.png" alt=""></p>
<p>这种就属于没吃上饭的情况。</p>
<pre><code>static async void datalfow()
{
	var multiplyBlock = new TransformBlock&lt;int, int&gt;(item =&gt;
	{
		if (item == 1)
		{
			throw new InvalidOperationException(&quot;not good&quot;);
		}
		Console.WriteLine(&quot;item:&quot; + item);
		return item * 2;
	}
	);
	var options = new DataflowBlockOptions {BoundedCapacity=1 };
	var subtractBlock = new TransformBlock&lt;int, int&gt;(item =&gt; {
		return item - 2;
	}, options);
	var appendBlock = new TransformBlock&lt;int, int&gt;(item =&gt; { Console.WriteLine(item+2); return item + 2; }, options);
	multiplyBlock.LinkTo(subtractBlock, new DataflowLinkOptions { PropagateCompletion = true});
	multiplyBlock.LinkTo(appendBlock, new DataflowLinkOptions { PropagateCompletion = true });
	try
	{
		for (int i = 0; i &lt; 100; i++)
		{
			multiplyBlock.Post(2);
		}
		await subtractBlock.Completion;
	}
	catch(AggregateException e)
	{
		Console.WriteLine(e);
	}
}
</code></pre>
<p>限制缓存为1，那么这时候我们就会相互切换。</p>
<h3 id="下一章">下一章</h3>
<p>整理:</p>
<p>1.数据流块的并行处理</p>
<p>2.创建自定义数据流块</p>
<h3 id="参考">参考</h3>
<p><a href="https://www.cnblogs.com/yswenli/p/8042594.html">https://www.cnblogs.com/yswenli/p/8042594.html</a></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-17 17:44</span>&nbsp;
<a href="https://www.cnblogs.com/aoximin/">时空道人</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12711637" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12711637);return false;">收藏</a></div>
        </div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 452033, cb_blogApp = 'aoximin', cb_blogUserGuid = '6609fa20-e319-43a3-34b5-08d52fc34315';
    var cb_entryId = 12711637, cb_entryCreatedDate = '2020-04-17 17:44', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>    </div>
</div>
            </div>
        </div>

        <div id="sideBar">
            <div id="sideBarMain">
                
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

                <div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                <script>loadBlogDefaultCalendar();</script>
                <div id="leftcontentcontainer">
                    <!-- begin:SingleColumn -->
                    <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                    <!-- end:  SingleColumn -->
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
    <div id="footer">
        <!--done-->
Copyright &copy; 2020 时空道人
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

    </div>
</div>

    
</body>
</html>