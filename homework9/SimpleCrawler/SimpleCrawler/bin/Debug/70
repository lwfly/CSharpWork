<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="[TOC] 本篇博客介绍CopyOnWriteArrayList类，读完本博客你将会了解： 什么是COW机制； CopyOnWriteArrayList的实现原理； CopyOnWriteArrayL" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>【Java基础】谈谈集合.CopyOnWriteArrayList - 程序员自由之路 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/custom/bundle-custom.min.css?v=1ssrnY3Il79Ok472qeVrpxlSprSXcHhYPgZC5S3wtVM" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/54chensongxia/custom.css?v=ibeowT7uSHbjH6bol7w7smOb4S4=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=-Yh290MhQyDeXLmvKTSses9H6-49lqbpXFh55zvS0w8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/54chensongxia/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/54chensongxia/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/54chensongxia/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 535435;
        var currentBlogApp = '54chensongxia';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'Custom';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/54chensongxia/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/54chensongxia/">程序员自由之路</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/54chensongxia/">
首页</a>
</li>
<li>


</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/54chensongxia/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
135&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
31</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/54chensongxia/p/11728837.html">【Java基础】谈谈集合.CopyOnWriteArrayList</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#实现原理">实现原理</a></li><li><a href="#遍历时不用加锁的原因">遍历时不用加锁的原因</a></li><li><a href="#copyonwritearraylis的缺点">CopyOnWriteArrayLis的缺点</a></li><li><a href="#使用场景">使用场景</a></li><li><a href="#总结">总结</a></li><li><a href="#参考">参考</a></li></ul></div></p>
<hr>
<p>本篇博客介绍CopyOnWriteArrayList类，读完本博客你将会了解：</p>
<ul>
<li>什么是COW机制；</li>
<li>CopyOnWriteArrayList的实现原理；</li>
<li>CopyOnWriteArrayList的使用场景。</li>
</ul>
<hr>
<p>经过之前的博客介绍，我们知道ArrayList是线程不安全的。要实现线程安全的List，我们可以使用<strong>Vector</strong>，或者使用Collections工具类将List包装成一个<strong>SynchronizedList</strong>。其实在Java并发包中还有一个CopyOnWriteArrayList可以实现线程安全的List。</p>
<p>在开始之前先贴一段概念</p>
<blockquote>
<p>如果有多个调用者（callers）同时请求相同资源（如内存或磁盘上的数据存储），他们会共同获取相同的指针指向相同的资源，直到某个调用者试图修改资源的内容时，系统才会真正复制一份专用副本（private copy）给该调用者，而其他调用者所见到的最初的资源仍然保持不变。优点是如果调用者没有修改该资源，就不会有副本（private copy）被建立，因此多个调用者只是读取操作时可以共享同一份资源。</p>
</blockquote>
<h2 id="实现原理">实现原理</h2>
<p>Vector这个类是一个非常古老的类了，在JDK1.0的时候便已经存在，其实现安全的手段非常<strong>简单所有的方法都加上synchronized关键字</strong>，这样保证这个实例的方法同一时刻只能有一个线程访问，所以在<strong>高并发场景下性能非常低</strong>。</p>
<p>SynchronizedList是java.util.Collections中的一个静态内部类，其实现安全的手段稍微有一点优化，就<strong>是把Vector加在方法上的synchronized关键字，移到了方法里面变成了同步块而不是同步方法从而把锁的范围缩小了</strong>，另外，SynchronizedList中的方法不全都是同步的，比如获取迭代器方法listIterator()就不是同步的。下面看下CopyOnWriteArrayList怎么实现线程安全的。</p>
<p>CopyOnWriteArrayList这个类就比较特殊了，对于写来说是基于重入锁互斥的，对于读操作来说是无锁的。还有一个特殊的地方，这个类的iterator是fail-safe的，也就是说是线程安全List里面的唯一一个不会出现ConcurrentModificationException异常的类。</p>
<p>看下CopyOnWriteArrayList的成员变量：</p>
<pre><code class="language-java">//重入锁保写操作互斥
final transient ReentrantLock lock = new ReentrantLock();
//volatile保证读可见性
private transient volatile Object[] array;
</code></pre>
<p>下面再看下添加元素的代码逻辑</p>
<pre><code class="language-java">public boolean add(E e) {
        final ReentrantLock lock = this.lock;
        lock.lock();//加锁
        try {
            Object[] elements = getArray();//读取原数组
            int len = elements.length;
            //构建一个长度为len+1的新数组，然后拷贝旧数据的数据到新数组
            Object[] newElements = Arrays.copyOf(elements, len + 1);
            //把新加的数据赋值到最后一位
            newElements[len] = e;
            // 替换旧的数组
            setArray(newElements);
            return true;
        } finally {
            lock.unlock();
        }
    }
</code></pre>
<p>先获得锁，然后拷贝元素组并将新元素加入(添加的元素可以是null)，再替换掉原来的数组。我们会发现这种实现方式非常不适合频繁修改的操作。CopyOnWriteArrayList的删除和修改的操作的原理也是类似的，这边就不贴代码了。</p>
<p>最后看下读操作</p>
<pre><code class="language-java">//直接获取index对应的元素 
public E get(int index) {return get(getArray(), index);} 
private E get(Object[] a, int index) {return (E) a[index];}
</code></pre>
<p>从以上的增删改查中我们可以发现，增删改都需要获得锁，并且锁只有一把，而读操作不需要获得锁，支持并发。为什么增删改中都需要创建一个新的数组，操作完成之后再赋给原来的引用？这是为了保证get的时候都能获取到元素，如果在增删改过程直接修改原来的数组，可能会造成执行读操作获取不到数据。</p>
<h2 id="遍历时不用加锁的原因">遍历时不用加锁的原因</h2>
<p>常用的方法实现我们已经基本了解了，但还是不知道为啥能够在容器遍历的时候对其进行修改而不抛出异常。（其实这是一种fail-safe机制）</p>
<pre><code class="language-java">    // 1. 返回的迭代器是COWIterator
    public Iterator&lt;E&gt; iterator() {
        return new COWIterator&lt;E&gt;(getArray(), 0);
    }
    // 2. 迭代器的成员属性
    private final Object[] snapshot;
    private int cursor;
    // 3. 迭代器的构造方法
    private COWIterator(Object[] elements, int initialCursor) {
        cursor = initialCursor;
        snapshot = elements;
    }
    // 4. 迭代器的方法...
    public E next() {
        if (! hasNext())
            throw new NoSuchElementException();
        return (E) snapshot[cursor++];
    }

    //.... 可以发现的是，迭代器所有的操作都基于snapshot数组，而snapshot是传递进来的array数组
</code></pre>
<p>到这里，我们应该就可以想明白了！CopyOnWriteArrayList在使用迭代器遍历的时候，操作的都是原数组！</p>
<h2 id="copyonwritearraylis的缺点">CopyOnWriteArrayLis的缺点</h2>
<ul>
<li>内存占用：如果CopyOnWriteArrayList经常要增删改里面的数据，经常要执行add()、set()、remove()的话，那是比较耗费内存的。因为我们知道每次add()、set()、remove()这些增删改操作都要复制一个数组出来。</li>
<li>数据一致性：CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。从上面的例子也可以看出来，比如线程A在迭代CopyOnWriteArrayList容器的数据。线程B在线程A迭代的间隙中将CopyOnWriteArrayList部分的数据修改了(已经调用setArray()了)。但是线程A迭代出来的是原有的数据。</li>
</ul>
<h2 id="使用场景">使用场景</h2>
<p>整体来说CopyOnWriteArrayList是另类的线程安全的实现，<strong>但并一定是高效的</strong>，<strong>适合用在读取和遍历多的场景下，并不适合写并发高的场景</strong>，因为数组的拷贝也是非常耗时的，尤其是数据量大的情况下。</p>
<h2 id="总结">总结</h2>
<p>稍微总结下：</p>
<ul>
<li>CopyOnWriteArrayList基于可重入锁机制，增删改操作需要加锁，读操作不需要加锁；</li>
<li>CopyOnWriteArrayList适合用在读取和遍历多的场景下，并不适合写并发高的场景；</li>
<li>基于fail-safe机制，不会抛出CurrentModifyException；</li>
<li>另外CopyOnWriteArrayList提供了弱一致性的迭代器，从而保证在获取迭代器后，其他线程对list的修改是不可见的，迭代器遍历的数组是一个快照。</li>
</ul>
<p>其他网友的总结：</p>
<blockquote>
<p>CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。</p>
</blockquote>
<blockquote>
<p>CopyOnWriteArrayList中add/remove等写方法是需要加锁的，目的是为了避免Copy出N个副本出来，导致并发写。</p>
</blockquote>
<blockquote>
<p>但是，CopyOnWriteArrayList中的读方法是没有加锁的。<br>
这样做的好处是我们可以对CopyOnWrite容器进行并发的读，当然，这里读到的数据可能不是最新的。因为写时复制的思想是通过延时更新的策略来实现数据的最终一致性的，并非强一致性。</p>
</blockquote>
<blockquote>
<p>所以<strong>CopyOnWrite容器是一种读写分离的思想，读和写不同的容器。而Vector在读写的时候使用同一个容器，读写互斥，同时只能做一件事儿。</strong></p>
</blockquote>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://yq.aliyun.com/articles/665359">https://yq.aliyun.com/articles/665359</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1350855">https://cloud.tencent.com/developer/article/1350855</a></li>
</ul>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2019-10-24 09:26</span>&nbsp;
<a href="https://www.cnblogs.com/54chensongxia/">程序员自由之路</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11728837" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(11728837);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 535435, cb_blogApp = '54chensongxia', cb_blogUserGuid = 'df6ea073-e28e-41d9-1178-08d726047f40';
    var cb_entryId = 11728837, cb_entryCreatedDate = '2019-10-24 09:26', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 程序员自由之路
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>