<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="功能简介DataInputStream和DataOutputStream 继承了各自的FilterInputStream以及FilterOutputStream使用装饰器模式对InputStream和" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>[十一]JavaIO之DataInputStream 和 DataOutputStream - noteless - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/buildtowin/bundle-buildtowin.min.css?v=lp23bZd4RUCf9TGsihJRLSq5M_182P4N8YRMn1A2CWo" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/noteless/custom.css?v=fnk17ixpiOajP7an/OE6hUwN1aI=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/buildtowin/bundle-buildtowin-mobile.min.css?v=ADiCwO2hOTdd5yYidcx7eob7ix2VJI4o_TXjEycTHjs" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/noteless/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/noteless/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/noteless/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 268100;
        var currentBlogApp = 'noteless';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'BuildtoWin';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <link rel="stylesheet" href="https://blog-static.cnblogs.com/files/noteless/cnblogs.css" type="text/css" />

<!--
<link rel="stylesheet" href="https://blog-static.cnblogs.com/files/noteless/monokai-sublime.css">
-->

<script src="https://blog-static.cnblogs.com/files/noteless/highlight.pack.js" defer></script>






<div class="main-top">

  <a class="avatar" href="https://www.cnblogs.com/noteless">
    <img src="//files.cnblogs.com/files/noteless/cnblogspic2.gif" alt="noteless 头像">
</a>
<div class="title">
    <a class="name" href="https://www.cnblogs.com/noteless/">noteless</a>
  </div>
<div class="info">

  </div>
</div>



<a href="#"><div id="toTop" style="zoom:0;display:none"></div></a>
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/noteless/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/noteless/">noteless</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/noteless/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/noteless">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/noteless/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
212&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
89</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/noteless/p/9632881.html">[十一]JavaIO之DataInputStream 和 DataOutputStream</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <div><br></div>
<div><span style="font-size: 18pt;"><strong>功能简介</strong></span>
</div>
<div><br></div>
<div><font size="3">DataInputStream和DataOutputStream 继承了各自的FilterInputStream以及FilterOutputStream
</font></div><font size="3">
</font><div><font size="3">使用装饰器模式对InputStream和OutputStream进行功能增强
</font></div><font size="3">
</font><div><br></div><font size="3">
</font><div><font size="3">
	</font><table style="border-width: 2px 1px; border-style: solid; border-color: gray; border-image: none; width: 90%; margin-left: 0px; border-collapse: collapse; -ms-word-break: break-all; empty-cells: show; background-color: transparent;"><font size="3">
		</font><tbody><font size="3">
			</font><tr><font size="3">
				</font><td><font size="3">FilterInputStream以及FilterOutputStream 都是Decorator 抽象的装饰器角色(并不是抽象类)<br>他们内部都包含了各自需要增强的抽象构建</font>
				</td>
			</tr>
			<tr>
				<td style="padding: 4px; border: 1px solid gray; border-image: none;"><a href="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093104896-905016488.png"><img width="483" height="278" title="image_5b986c00_4b85" style="display: inline; background-image: none;" alt="image_5b986c00_4b85" src="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093105498-1012566034.png" border="0"></a>
				</td>
			</tr>
		</tbody>
	</table>
</div>
<div><br></div>
<div><br></div>
<div><span style="line-height: normal;">
	<div style="line-height: 24px;">
		<table style="border-width: 2px 1px; border-style: solid; border-color: gray; width: 1155px; color: rgb(66, 66, 66); font-family: 微软雅黑; margin-left: 0px; border-collapse: collapse; -ms-word-break: break-all; empty-cells: show; background-color: transparent;">
			<tbody>
				<tr>
					<td style="padding: 4px; border: 1px solid gray;"><font size="3">DataInput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></td><font size="3">
					</font><td style="padding: 4px; border: 1px solid gray;"><font size="3">接口用于从二进制流中读取字节，并根据所有 Java 基本类型数据进行重构
					</font></td><font size="3">
				</font></tr><font size="3">
				</font><tr style="background-color: rgb(248, 248, 248);"><font size="3">
					</font><td style="padding: 4px; border: 1px solid gray;"><font size="3">
						</font><div style="line-height: 24px;"><font size="3">DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></div><font size="3">
					</font></td><font size="3">
					</font><td style="padding: 4px; border: 1px solid gray;"><font size="3">接口用于将数据从任意 Java 基本类型转换为一系列字节，并将这些字节写入二进制流</font>
					</td>
				</tr>
			</tbody>
		</table>
	</div>
	<div style="line-height: 24px;"><br></div></span>
</div>
<div><br></div>
<div>
	<table style="border-width: 2px 1px; border-style: solid; border-color: gray; border-image: none; width: 90%; margin-left: 0px; border-collapse: collapse; -ms-word-break: break-all; empty-cells: show; background-color: transparent;">
		<tbody>
			<tr>
				<td style="padding: 4px; border: 1px solid gray; border-image: none;"><br><a href="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093106331-2062643620.png"><img width="341" height="419" title="image_5b986c00_1b9f" style="display: inline; background-image: none;" alt="image_5b986c00_1b9f" src="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093107099-60239771.png" border="0"></a><br><br>
				</td>
			</tr>
			<tr>
				<td style="padding: 4px; border: 1px solid gray; border-image: none;"><a href="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093107306-1879861061.png"><img width="378" height="438" title="image_5b986c00_5501" style="display: inline; background-image: none;" alt="image_5b986c00_5501" src="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093108245-1478824737.png" border="0"></a>
				</td>
			</tr>
			<tr>
				<td><font size="3">DataInputStream和DataOutputStream&nbsp; 通过实现DataInput 和DataOut接口<br>并且借助于装饰器模式,对InputStream和OutputStream的read方法增强出来多个版本<br>可以读取基本数据类型</font>
				</td>
			</tr>
		</tbody>
	</table>
</div>
<div><br></div>
<div><span style="font-size: 18pt;"><strong>DataInputStream</strong></span>
</div>
<div><br></div>
<div>
	<table style="border-width: 2px 1px; border-style: solid; border-color: gray; border-image: none; width: 90%; margin-left: 0px; border-collapse: collapse; -ms-word-break: break-all; empty-cells: show; background-color: transparent;">
		<tbody>
			<tr>
				<td style="padding: 4px; border: 1px solid gray; border-image: none;">
					<div><font size="3">继承自InputStream中的read的两个版本方法
					</font></div><font size="3">
					</font><div><font size="3">都是直接使用原方法</font>
					</div>
					<div><a href="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093108880-1073715173.png"><img width="651" height="150" title="image_5b986c00_87d" style="display: inline; background-image: none;" alt="image_5b986c00_87d" src="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093109171-1676123430.png" border="0"></a>
					</div>
				</td>
			</tr>
			<tr>
				<td style="padding: 4px; border: 1px solid gray; border-image: none;"><font size="3">可以看到,去掉read和个别独有的方法外<br>其余方法都来自DataInput</font><br><a href="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093109353-1236803429.png"><img width="354" height="448" title="image_5b986c00_7912" style="display: inline; background-image: none;" alt="image_5b986c00_7912" src="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093109903-654175993.png" border="0"></a><br><br>
				</td>
			</tr>
			<tr>
				<td><font size="3">而其他的方法都是需要依赖于read的两个版本的方法<br>比如下面这几个,都是对in.read调用的基础上,进行功能的增强<br>如果说都不使用in.read方法,那还叫什么装饰器模式</font><br><a href="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093110432-1641197598.png"><img width="604" height="473" title="image_5b986c00_4864" style="display: inline; background-image: none;" alt="image_5b986c00_4864" src="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093111401-1468831472.png" border="0"></a>
				</td>
			</tr>
		</tbody>
	</table>
</div>
<div><br></div>
<div><br></div>
<div><span style="font-size: 18pt;"><strong>DataOutputStream</strong></span>
</div>
<div><br></div>
<div>
	<table style="border-width: 2px 1px; border-style: solid; border-color: gray; border-image: none; width: 90%; margin-left: 0px; border-collapse: collapse; -ms-word-break: break-all; empty-cells: show; background-color: transparent;">
		<tbody>
			<tr>
				<td style="padding: 4px; border: 1px solid gray; border-image: none;"><font size="3">write两个版本都来自OutputStream,没有功能增强<br>flush也是如此,没有增强</font><br><br><a href="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093111680-242646206.png"><img width="553" height="302" title="image_5b986c00_70ae" style="display: inline; background-image: none;" alt="image_5b986c00_70ae" src="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093111938-1709647496.png" border="0"></a><br>
					<div><font size="3">不过DataOutputStream 内部有一个计数器,用于记录已经读取的个数
					</font></div><font size="3">
					</font><div><font size="3">incCount方法用于计数</font>
					</div><a href="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093112276-484627966.png"><img width="655" height="112" title="image_5b986c00_8bd" style="display: inline; background-image: none;" alt="image_5b986c00_8bd" src="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093112492-1009945662.png" border="0"></a>
				</td>
			</tr>
			<tr>
				<td style="padding: 4px; border: 1px solid gray; border-image: none;"><font size="3">其余来自DataOutput的方法,都是借助于装饰器模式对于write方法的增强<br></font><a href="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093112674-828877092.png"><font size="3"><img width="388" height="393" title="image_5b986c00_52bc" style="display: inline; background-image: none;" alt="image_5b986c00_52bc" src="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093113040-1406750142.png" border="0"></font></a><br><font size="3">比如<br></font><a href="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093113492-110253559.png"><font size="3"><img width="523" height="261" title="image_5b986c00_2f6f" style="display: inline; background-image: none;" alt="image_5b986c00_2f6f" src="https://img2018.cnblogs.com/blog/897393/201809/897393-20180912093113813-152964477.png" border="0"></font></a>
				</td>
			</tr>
		</tbody>
	</table>
</div>
<div><br></div>
<div><br></div>
<div>
	<table style="border-width: 2px 1px; border-style: solid; border-color: gray; border-image: none; width: 90%; margin-left: 0px; border-collapse: collapse; -ms-word-break: break-all; empty-cells: show; background-color: transparent;">
		<tbody>
			<tr>
				<td style="padding: 4px; border: 1px solid gray; border-image: none;"><font size="3">一定要理解装饰器模式<br>是你还有你<br>在使用你的能力的时候,顺便在增强一下,所以内部自然会需要借助于原来的方法</font>
				</td>
			</tr>
		</tbody>
	</table>
</div>
<div><br></div>
<div><br></div>
<div><span style="font-size: 18pt;"><strong>总结:</strong></span>
</div>
<div><br></div>
<div><font size="3">DataInputStream和DataOutputStream 借助于装饰器模式,继承自他们的FilterXXXoutStream
</font></div><font size="3">
</font><div><font size="3">对InputStream进行功能增强
</font></div><font size="3">
</font><div><font size="3">所有增强出来的功能,来自于DataInput以及DataOutput
</font></div><font size="3">
</font><div><font size="3">这两个接口是用于约定 从二进制字节中读取数据 以及将基本类型数据写入到二进制字节的两个接口
</font></div><font size="3">
</font><div><font size="3">其实如果说要不是别的地方也还是需要DataInput以及DataOutput中的约定的话
</font></div><font size="3">
</font><div><font size="3">这一切完全都可以去掉这两个接口,直接提供readXXX 或者writeXXX方法即可
</font></div><font size="3">
</font><div><font size="3">所以千万不要被DataInput以及DataOutput 迷惑
</font></div><font size="3">
</font><div><br></div><font size="3">
</font><table style="border-width: 2px 1px; border-style: solid; border-color: gray; border-image: none; width: 90%; margin-left: 0px; border-collapse: collapse; -ms-word-break: break-all; empty-cells: show; background-color: transparent;"><font size="3">
	</font><tbody><font size="3">
		</font><tr><font size="3">
			</font><td style="padding: 4px; border: 1px solid gray; border-image: none;"><font size="3">两条主线:<br>装饰器模式功能增强<br>增强的功能来自DataXXXput接口</font>
			</td>
		</tr>
	</tbody>
</table>
<div><br></div>
<div><br></div>
<div><br></div>
<div>
</div>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2018-09-12 09:31</span>&nbsp;
<a href="https://www.cnblogs.com/noteless/">noteless</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=9632881" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(9632881);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 268100, cb_blogApp = 'noteless', cb_blogUserGuid = '2f3ff2be-bdda-e511-9fc1-ac853d9f53cc';
    var cb_entryId = 9632881, cb_entryCreatedDate = '2018-09-12 09:31', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 noteless
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <script>
/*
$(document).ready(function() {
  $('pre').each(function(i, e) {hljs.highlightBlock(e)});
});
*/
</script>





<script>




//初始化加载函数
$(function(){
    // hideIndexArticle();
    appendNavigator();

    addOriginURL();

addSupport();
hideToTop();


})


//隐藏首页除置顶外的其他所有文章列表
function hideIndexArticle(){
    var windowURL = window.location.href;
    console.log(windowURL )
    if(windowURL && windowURL.indexOf('www.cnblogs.com/noteless')>0 && windowURL.indexOf('html')<0){
        //$('#mainContent .day:not(:first)').css('display','none');
    }
}

//增导航条上增加 目录索引按钮
function appendNavigator(){
    var _html='<li>'
        +'<a id="blog_nav_admin" class="menu" rel="nofollow" href="https://www.cnblogs.com/noteless/p/9400742.html">'
        +'目录索引'
        +'</a>'
        +'</li>';

    $('#navList').append(_html);
}

function appendMenuItem(tagName,id,content){
    console.log(tagName+" "+tagName.substring(1));
    var paddingLeft = tagName.substring(1) * 30; //添加标题缩进
    $('#menu_nav_ol').append('<li class="' + id +'" style="padding-left: '+ paddingLeft +'px;"><b>' + content + '</b></li>');
}


//添加支持一下，请求关注
function addSupport(){

var zhichiHml = '<p>'
+'<span>'
+'<img src="https://files-cdn.cnblogs.com/files/noteless/zhichiyixaa.bmp" alt="">'
+'</span>'
+'</p>';
$('#cnblogs_post_body').append(zhichiHml );

}

//每篇文章增加原文地址
function addOriginURL(){

    //文章增加原文地址
    var originURL='<div>'
        +'原文地址:'
        +'<a href="'
        +window.location.href
        +'" target="_blank">'
        +$('.postTitle a').html()
        +'</a>'
        +'</div>';
		
	originURL+='<img src="https://blog-static.cnblogs.com/files/noteless/%E4%BA%8C%E7%BB%B4%E7%A0%812.gif"></img>';
		
		
    if($("#cnblogs_post_body h3:first").length>0){
        $("#cnblogs_post_body h3:first").before(originURL);
    }else{
        $('#cnblogs_post_body').prepend(originURL);
    }


}

//如果是pc展示返回顶部
function hideToTop(){

	if(isPC()){
		$('#toTop').show();
	}
}


//判断手机还是pc
function isPC() {
   var userAgentInfo = navigator.userAgent;
   var Agents = ["Android", "iPhone",
      "SymbianOS", "Windows Phone",
      "iPad", "iPod"];
   var flag = true;
   for (var v = 0; v < Agents.length; v++) {
      if (userAgentInfo.indexOf(Agents[v]) > 0) {
         flag = false;
         break;
      }
   }
   return flag;
}



//根据标题生成左侧边栏的目录树
// 生成目录开始

$(function () {

	//如果是手机隐藏目录
	if(isPC()){

		//内容拼接
		$('body').append(
			'<div id="article-outline">'
			+'<div style="height:15px;">'
			+'<button type="button" class="close" data-dismiss="modal" aria-hidden="true">'
			+'X'
			+'</button>'
			+'</div>'
			+'</div>'
			+'<style>'
			+'#article-outline{'
			+'display:none;'
			+'min-width:140p;'
			+'max-width: 230px;'
			//+'max-height: 350px;'
			+'position:absolute;'
			+'float: left;'
			+'top:150px;'
			+'left:-999px;'
			+'border:1px solid #ccc;'
			+'box-shadow:5px 5px 2px #ccc;'
			+'padding: 5px 10px;'
			+'background-color: #fff;'
			+'overflow-y: auto;'
			+'scroll-x: auto;'
			+'}'

			+'#article-outline ul{'
			+'margin:5px 0 5px 0;'
			+'padding-left:30px;'
			+'font-size:12px;'
			+'border-left:1px dotted #ccc;'
			+'}'

			+'#article-outline ul:first-child{'
			+'padding-left:15px;'
			+'border:none;'
			+'}'

			+'#article-outline li{'
			+'list-style-type:decimal;'
			+'margin:3px 0;'
			+'}'

			+'#article-outline a{'
			+'color:#00C1E4;'
			+'}'
			+'</style>'
		)
		
		

		
		
		//取得新添加的目录元素
		var jOutline = $('#article-outline');

		//获取文章内容
		//var jContent = $('article .content');
		var jContent = $('div#topics');

		//计算高度
		var jContentHeight = jContent.height();

		//关闭按钮
		jOutline.find('.close').on('click', function () {
			jOutline.hide();
		})

		updateOutline();

		var top = jOutline.offset().top;
		scrollOutline();
		$(window).on('scroll', scrollOutline);

		function scrollOutline() {
			var scrollTop = $(document).scrollTop();
			var maxTop = jContent.offset().top + jContent.height() - jOutline.height();
			//设置行内样式
			if (scrollTop >= top && scrollTop <= maxTop) {
				jOutline.css({'position': 'fixed', 'top': 0});
			}
			else if (scrollTop < top) {
				/*
							jOutline.css({'position': 'absolute','float':'left', 'top': '150px'});
				*/
				jOutline.css({'position': 'absolute', 'top': '200px'});
			}
			else {
				/*
							jOutline.css({'position': 'absolute','float':'left', 'top': maxTop + 'px'});
				*/
				jOutline.css({'position': 'absolute', 'top': maxTop + 'px'});
			}

		}

		function updateOutline() {
			//设置哪些级别的目录
			// var arrAllHeader = jContent.find("h1,h2,h3,h4,h5,h6");
			var arrAllHeader = jContent.find("h2,h3,h4,h5,h6");
			var arrOutline = ['<ul>'];
			var header, headerText;
			var id = 0;
			var level = 0,
				lastLevel = 1;
			var levelCount = 0;
			for (var i = 0, c = arrAllHeader.length; i < c; i++) {
				header = arrAllHeader[i];
				headerText = $(header).text();

				header.setAttribute('id', id);

				level = header.tagName.match(/^h(\d)$/i)[1];
				levelCount = level - lastLevel;

				if (levelCount > 0) {
					for (var j = 0; j < levelCount; j++) {
						arrOutline.push('<ul>');
					}
				} else if (levelCount < 0) {
					levelCount *= -1;
					for (var j = 0; j < levelCount; j++) {
						arrOutline.push('</ul>');
					}
				}
				;
				arrOutline.push('<li>');
				arrOutline.push('<a href="#' + id + '">' + headerText + '</a>');
				arrOutline.push('</li>');
				lastLevel = level;
				id++;
			}
			arrOutline.push('</ul>')
			if (arrOutline.length > 2) {
				jOutline.append(arrOutline.join(''));
				jOutline.find('ul').each(function (i, n) {
					var jThis = $(this);
					if (jThis.children('li').length === 0) {
						jThis.replaceWith(jThis.children());
					}
				});
				showOutline();
			}
			else {
				hideOutline();
			}
		}

		function showOutline() {
			var offset = jContent.offset();

			//目录左侧偏移量
			/*        jOutline.css({
						left: offset.left + jContent.width() + 10 + 'px',
					}).show();*/
			jOutline.css({
				left:8 + 'px',
			}).show();
		}

		function hideOutline() {
			jOutline.hide();
		}
	
	
	}




    
});

//生成目录结束




</script>
    </div>
</body>
</html>