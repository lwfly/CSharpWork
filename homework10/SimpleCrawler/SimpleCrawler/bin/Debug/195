<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>烟花易冷人憔悴 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=Z9Vw4btcgJmrpUEjY_SgebmTmDXJ_hPFoST7ad2aJp4" />
    <link id="MainCss" rel="stylesheet" href="/skins/simplememory/bundle-simplememory.min.css?v=OL4qeo1LNGlN1rKIhv5UctANvt0M6Nx6kLzr_ffx3Xk" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/FireworksEasyCool/custom.css?v=Ky6CidIH9BKKNCAIC11URez935A=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/SimpleMemory/bundle-SimpleMemory-mobile.min.css" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/FireworksEasyCool/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/FireworksEasyCool/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/FireworksEasyCool/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 481645;
        var currentBlogApp = 'FireworksEasyCool';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleMemory';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/FireworksEasyCool/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/FireworksEasyCool/">烟花易冷人憔悴</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/FireworksEasyCool/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
</li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/FireworksEasyCool/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
33&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
101</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
<!--done-->




		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2020/04/28.html">2020年4月28日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/12794311.html">
    gin请求数据校验
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 最近优化 &quot;gin+vue的前后端分离项目&quot; 代码时候，发现代码中对请求数据的校验比较繁琐，于是想办法简化它。最终我发现了 &quot;go playground/validator&quot; 开源库很好用。 优化前代码 代码如下： 发现每个方法都这样校验数据，很繁琐。 优化代码 这里使用 &quot;go playgr            <a href="https://www.cnblogs.com/FireworksEasyCool/p/12794311.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-28 19:27 烟花易冷人憔悴 阅读 (42) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12794311" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2020/04/26.html">2020年4月26日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/12782137.html">
    Go gRPC进阶-gRPC转换HTTP（十）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 我们通常把 用作内部通信，而使用 进行外部通信。为了避免写两套应用，我们使用 &quot;grpc gateway&quot; 把 转成 。服务接收到 请求后， 把它转成 进行处理，然后以 形式返回数据。本篇代码以上篇为基础，最终转成的 支持 验证、数据验证，并添加 文档。 gRPC转成HTTP 编写和编译pro            <a href="https://www.cnblogs.com/FireworksEasyCool/p/12782137.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-26 20:44 烟花易冷人憔悴 阅读 (67) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12782137" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2020/04/23.html">2020年4月23日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/12761033.html">
    Go gRPC进阶-proto数据验证（九）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 上篇介绍了 &quot;go grpc middleware&quot; 的 、`grpc_auth grpc_recovery grpc_validator`，它可以对gRPC数据的输入和输出进行验证。 创建proto文件，添加验证规则 这里使用第三方插件 &quot;go proto validators&quot; 自动生成验            <a href="https://www.cnblogs.com/FireworksEasyCool/p/12761033.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-23 15:23 烟花易冷人憔悴 阅读 (165) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12761033" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2020/04/22.html">2020年4月22日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/12750339.html">
    Go gRPC进阶-go-grpc-middleware使用（八）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 上篇介绍了gRPC中TLS认证和自定义方法认证，最后还简单介绍了gRPC拦截器的使用。gRPC自身只能设置一个拦截器，所有逻辑都写一起会比较乱。本篇简单介绍 &quot;go grpc middleware&quot; 的使用，包括 、`grpc_auth grpc_recovery`。 go grpc midd            <a href="https://www.cnblogs.com/FireworksEasyCool/p/12750339.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-22 10:29 烟花易冷人憔悴 阅读 (390) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12750339" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2020/04/16.html">2020年4月16日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/12710325.html">
    Go gRPC进阶-TLS认证+自定义方法认证（七）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 前面篇章的gRPC都是明文传输的，容易被篡改数据。本章将介绍如何为gRPC添加安全机制，包括TLS证书认证和Token认证。 TLS证书认证 什么是TLS TLS（Transport Layer Security，安全传输层)，TLS是建立在 TCP协议之上的协议，服务于应用层，它的前身是SS            <a href="https://www.cnblogs.com/FireworksEasyCool/p/12710325.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-16 08:52 烟花易冷人憔悴 阅读 (237) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12710325" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2020/04/15.html">2020年4月15日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/12702959.html">
    Go gRPC进阶-超时设置（六）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 gRPC默认的请求的超时时间是很长的，当你没有设置请求超时时间时，所有在运行的请求都占用大量资源且可能运行很长的时间，导致服务资源损耗过高，使得后来的请求响应过慢，甚至会引起整个进程崩溃。 为了避免这种情况，我们的服务应该设置超时时间。前面的 &quot;入门教程&quot; 提到，当客户端发起请求时候，需要传入            <a href="https://www.cnblogs.com/FireworksEasyCool/p/12702959.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-15 08:45 烟花易冷人憔悴 阅读 (115) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12702959" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2020/04/14.html">2020年4月14日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/12698194.html">
    Go gRPC教程-双向流式RPC（五）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 上一篇介绍了 ，客户端发送请求到服务器，拿到一个流去读取返回的消息序列。 客户端读取返回的流的数据。本篇将介绍 。 ：客户端和服务端双方使用读写流去发送一个消息序列，两个流独立操作，双方可以同时发送和同时接收。 情景模拟：双方对话（可以一问一答、一问多答、多问一答，形式灵活）。 新建proto            <a href="https://www.cnblogs.com/FireworksEasyCool/p/12698194.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-14 15:13 烟花易冷人憔悴 阅读 (96) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12698194" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
            <div class="postSeparator"></div>
        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/12696733.html">
    Go gRPC教程-客户端流式RPC（四）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 上一篇介绍了 ，客户端发送请求到服务器，拿到一个流去读取返回的消息序列。 客户端读取返回的流的数据。本篇将介绍 。 ：与 相反，客户端不断的向服务端发送数据流，而在发送结束后，由服务端返回一个响应。 情景模拟：客户端大量数据上传到服务端。 新建proto文件 新建client_stream.p            <a href="https://www.cnblogs.com/FireworksEasyCool/p/12696733.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-14 11:20 烟花易冷人憔悴 阅读 (192) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12696733" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2020/04/13.html">2020年4月13日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/12693749.html">
    Go gRPC教程-服务端流式RPC（三）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 上一篇介绍了 ，当数据量大或者需要不断传输数据时候，我们应该使用流式RPC，它允许我们边处理边传输数据。本篇先介绍 。 ：客户端发送请求到服务器，拿到一个流去读取返回的消息序列。 客户端读取返回的流，直到里面没有任何消息。 情景模拟：实时获取股票走势。 1.客户端要获取某原油股的实时走势，客户            <a href="https://www.cnblogs.com/FireworksEasyCool/p/12693749.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-13 20:30 烟花易冷人憔悴 阅读 (256) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12693749" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2020/04/10.html">2020年4月10日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/12674120.html">
    Go gRPC教程-简单RPC（二）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 gRPC主要有4种请求和响应模式，分别是 、`服务端流式（Server side streaming RPC） 客户端流式（Client side streaming RPC） 双向流式（Bidirectional streaming RPC）`。 ：客户端发起请求并等待服务端响应。 ：客户端            <a href="https://www.cnblogs.com/FireworksEasyCool/p/12674120.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-10 16:04 烟花易冷人憔悴 阅读 (95) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12674120" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2020/04/09.html">2020年4月9日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/12669371.html">
    Go gRPC教程-环境安装（一）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 gRPC 是一个高性能、开源和通用的 RPC 框架，面向移动和 HTTP/2 设计，带来诸如双向流、流控、头部压缩、单 TCP 连接上的多复用请求等特。这些特性使得其在移动设备上表现更好，更省电和节省空间占用。 在 gRPC 里客户端应用可以像调用本地对象一样直接调用另一台不同的机器上服务端应            <a href="https://www.cnblogs.com/FireworksEasyCool/p/12669371.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-09 20:36 烟花易冷人憔悴 阅读 (212) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12669371" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2019/11/06.html">2019年11月6日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/11805148.html">
    Gin实现依赖注入
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 依赖注入的好处和特点这里不讲述了，本篇文章主要介绍gin框架如何实现依赖注入，将项目解耦。 项目结构 ├── cmd 程序入口 ├── common 通用模块代码 ├── config 配置文件 ├── controller API控制器 ├── docs 数据库文件 ├── models 数            <a href="https://www.cnblogs.com/FireworksEasyCool/p/11805148.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2019-11-06 14:52 烟花易冷人憔悴 阅读 (321) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11805148" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2019/10/22.html">2019年10月22日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/11718636.html">
    Go Modules使用教程（3分钟学会）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 随着Go 1.13发布，GOPROXY默认值 在中国大陆不能被访问。 七牛云顺势推出 ，以利于中国开发者更好使用Go Modules。 使用教程 （1）升级到Go1.13 （2）运行 （3）运行 可以通过运行 查看（2）、（3）步骤是否设置成功 （4）在项目根目录下执行 执行成功后生成go.m            <a href="https://www.cnblogs.com/FireworksEasyCool/p/11718636.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2019-10-22 11:12 烟花易冷人憔悴 阅读 (604) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11718636" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2019/09/25.html">2019年9月25日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/11587220.html">
    Channel使用技巧
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 Go协程一般使用channel（通道）通信从而协调/同步他们的工作。合理利用Go协程和channel能帮助我们大大提高程序的性能。本文将介绍一些使用channel的场景及技巧 场景一，使用channel返回运算结果 计算斐波那契数列，在学习递归时候这是个经典问题。现在我们不用递归实现，而是用c            <a href="https://www.cnblogs.com/FireworksEasyCool/p/11587220.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2019-09-25 20:29 烟花易冷人憔悴 阅读 (169) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11587220" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2019/09/12.html">2019年9月12日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/11508806.html">
    弄懂goroutine调度原理
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：goroutine简介 golang语言作者Rob Pike说， “Goroutine是一个与其他goroutines 并发运行在同一地址空间的Go函数或方法。一个运行的程序由一个或更多个goroutine组成。它与线程、协程、进程等不同。它是一个goroutine“ 。 goroutine通过通道            <a href="https://www.cnblogs.com/FireworksEasyCool/p/11508806.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2019-09-12 19:28 烟花易冷人憔悴 阅读 (417) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11508806" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2019/09/11.html">2019年9月11日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/11508342.html">
    线程实现模型
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：线程实现模型 线程实现模型主要分为： ，`内核级线程模型 两级线程模型`。他们的区别在于线程与内核线程之间的对应关系。 以下我们将分析这三种线程实现模型的特点： 用户级线程模型 （1）多对一关系 用户级线程模型为多对一关系。即，一个进程中的所有线程对应一个内核线程； （2）处理速度快、移植性强； 线            <a href="https://www.cnblogs.com/FireworksEasyCool/p/11508342.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2019-09-11 19:53 烟花易冷人憔悴 阅读 (212) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11508342" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2019/09/03.html">2019年9月3日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/11455834.html">
    gin-jwt对API进行权限控制
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 之前文章简单介绍了如何运行 &quot;gin+vue的前后端分离开源项目&quot; ，该项目是学习了 &quot;Gin实践教程&quot; 后结合vue element admin写的，该教程讲得很详细，适合入门Gin。本篇文章将介绍gin+vue的前后端分离开源项目中如何使用gin jwt对API进行权限验证。 安装gin             <a href="https://www.cnblogs.com/FireworksEasyCool/p/11455834.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2019-09-03 21:33 烟花易冷人憔悴 阅读 (1510) 评论 (2)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11455834" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2019/08/21.html">2019年8月21日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/11385271.html">
    gin+vue的前后端分离开源项目
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：该项目是gin+vue的前后端分离项目，使用gorm访问MySQL，其中vue前端是使用vue-element-admin框架简单实现的； go后台使用jwt，对API接口进行权限控制。此外，Web页面在token过期后的半个小时内，用户再次操作会自动刷新token； 项目很小，适合gin新手学习！            <a href="https://www.cnblogs.com/FireworksEasyCool/p/11385271.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2019-08-21 09:05 烟花易冷人憔悴 阅读 (3530) 评论 (2)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11385271" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2019/07/23.html">2019年7月23日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/11231912.html">
    Winform客户端内嵌Vue页面（开放源码）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：目前很多应用都存在网页端和客户端形式，例如常用的：钉钉、微信等。按传统的开发形式，需要为客户端开发一套界面。基于当前Web应用可以利用三大前端框架和UI框架快速开发出各种酷炫的界面，于是出现了客户端嵌浏览器的方式，它不仅可以重用Web应用，而且以客户端内嵌浏览器的形式，不用担心用户用IE浏览器打开你            <a href="https://www.cnblogs.com/FireworksEasyCool/p/11231912.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2019-07-23 19:09 烟花易冷人憔悴 阅读 (3647) 评论 (31)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11231912" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/FireworksEasyCool/archive/2019/07/18.html">2019年7月18日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/11203747.html">
    使用mybatis动态where字句方法
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：上篇文章介绍了如何使用mybatis-generator生成实体类、Mapper接口代码，其中生成的Mapper接口代码是不带ByExample方法的。本篇文章将介绍如何使用mybatis-generator生成的ByExample方法动态扩展where字句。 一、Mapper接口生成ByExamp            <a href="https://www.cnblogs.com/FireworksEasyCool/p/11203747.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2019-07-18 10:04 烟花易冷人憔悴 阅读 (367) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11203747" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>



<div class="topicListFooter">
    <div id="nav_next_page">
        
    <a href="https://www.cnblogs.com/FireworksEasyCool/default.html?page=2">
        下一页
    </a>

    </div>    
</div>








	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 烟花易冷人憔悴
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>