<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="前言 最近优化 &amp;quot;gin&#x2B;vue的前后端分离项目&amp;quot; 代码时候，发现代码中对请求数据的校验比较繁琐，于是想办法简化它。最终我发现了 &amp;quot;go playground/valid" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>gin请求数据校验 - 烟花易冷人憔悴 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=Z9Vw4btcgJmrpUEjY_SgebmTmDXJ_hPFoST7ad2aJp4" />
    <link id="MainCss" rel="stylesheet" href="/skins/simplememory/bundle-simplememory.min.css?v=OL4qeo1LNGlN1rKIhv5UctANvt0M6Nx6kLzr_ffx3Xk" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/FireworksEasyCool/custom.css?v=Ky6CidIH9BKKNCAIC11URez935A=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/SimpleMemory/bundle-SimpleMemory-mobile.min.css" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/FireworksEasyCool/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/FireworksEasyCool/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/FireworksEasyCool/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 481645;
        var currentBlogApp = 'FireworksEasyCool';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleMemory';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/FireworksEasyCool/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/FireworksEasyCool/">烟花易冷人憔悴</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/FireworksEasyCool/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
</li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/FireworksEasyCool/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
33&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
101</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/FireworksEasyCool/p/12794311.html">gin请求数据校验</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h3 id="前言">前言</h3>
<p>最近优化<a href="https://github.com/Bingjian-Zhu/gin-vue-admin">gin+vue的前后端分离项目</a>代码时候，发现代码中对请求数据的校验比较繁琐，于是想办法简化它。最终我发现了<a href="https://github.com/go-playground/validator">go-playground/validator</a>开源库很好用。</p>
<h3 id="优化前代码">优化前代码</h3>
<p>代码如下：</p>
<p><img src="https://img2020.cnblogs.com/blog/1508611/202004/1508611-20200428135632947-2147280894.png" alt=""></p>
<p>发现每个方法都这样校验数据，很繁琐。</p>
<h3 id="优化代码">优化代码</h3>
<p>这里使用<a href="https://github.com/go-playground/validator">go-playground/validator</a>开源库来简化请求校验。</p>
<p>1.安装<code>go-playground/validator</code></p>
<pre><code class="language-powershell"># 使用 Go Modules
go env -w GO111MODULE=on
# 安装 go-playground/validator
go get github.com/go-playground/validator/v10
</code></pre>
<blockquote>
<p>注意：v10版本是使用Go Modules，运行 <code>go get github.com/go-playground/validator/v10</code>前需要确保<code>GO111MODULE=on</code>，不然会报：<code>cannot find package &quot;github.com/go-playground/validator/v10&quot;</code></p>
</blockquote>
<p>2.实现<code>StructValidator</code>接口的两个方法</p>
<p><code>StructValidator</code>是需要实现的最基本的接口，作为验证引擎来确保请求的正确性。</p>
<pre><code class="language-go">type StructValidator interface {

	ValidateStruct(interface{}) error
	
	Engine() interface{}
}
</code></pre>
<ul>
<li><code>ValidateStruct</code> ：如果接收到的类型是一个结构体或指向结构体的指针，则执行验证。</li>
<li><code>Engine</code>： 返回支持<code>StructValidator</code>实现的底层验证引擎。</li>
</ul>
<p>实现接口：</p>
<pre><code class="language-go">package validator

import (
	&quot;reflect&quot;
	&quot;sync&quot;

	&quot;github.com/gin-gonic/gin/binding&quot;
	&quot;github.com/go-playground/validator/v10&quot;
)

type DefaultValidator struct {
	once     sync.Once
	validate *validator.Validate
}

var _ binding.StructValidator = &amp;DefaultValidator{}

// ValidateStruct 如果接收到的类型是一个结构体或指向结构体的指针，则执行验证。
func (v *DefaultValidator) ValidateStruct(obj interface{}) error {
	if kindOfData(obj) == reflect.Struct {

		v.lazyinit()

		//如果传递不合规则的值，则返回InvalidValidationError，否则返回nil。
        ///如果返回err != nil，可通过err.(validator.ValidationErrors)来访问错误数组。
		if err := v.validate.Struct(obj); err != nil {
			return err
		}
	}
	return nil
}
// Engine 返回支持`StructValidator`实现的底层验证引擎
func (v *DefaultValidator) Engine() interface{} {
	v.lazyinit()
	return v.validate
}

func (v *DefaultValidator) lazyinit() {
	v.once.Do(func() {
		v.validate = validator.New()
		v.validate.SetTagName(&quot;validate&quot;)
		// //v8版本，v8版本使用&quot;binding&quot;
		// v.validate.SetTagName(&quot;binding&quot;)
	})
}

func kindOfData(data interface{}) reflect.Kind {
	value := reflect.ValueOf(data)
	valueType := value.Kind()

	if valueType == reflect.Ptr {
		valueType = value.Elem().Kind()
	}
	return valueType
}
</code></pre>
<p>3.使用该验证引擎</p>
<p>修改<code>model</code>，添加<code>validate</code>验证</p>
<pre><code class="language-go">type Article struct {
	ID            int       `gorm:&quot;primary_key&quot; json:&quot;id&quot;`
	State         int       `json:&quot;state&quot; validate:&quot;min=0,max=1&quot;`
	TagID         int       `json:&quot;tag_id&quot; validate:&quot;gt=0&quot;`
	Title         string    `json:&quot;title&quot; validate:&quot;required&quot;`
	Desc          string    `json:&quot;desc&quot; validate:&quot;required&quot;`
	Content       string    `json:&quot;content&quot; validate:&quot;required&quot;`
	CoverImageURL string    `json:&quot;cover_image_url&quot;`
	CreatedBy     string    `json:&quot;created_by&quot; validate:&quot;required&quot;`
	ModifiedBy    string    `json:&quot;modified_by&quot;`
}
</code></pre>
<p>最后，只需在<code>main</code>函数中添加这行代码:</p>
<pre><code class="language-go">package main

import (
    &quot;github.com/gin-gonic/gin/binding&quot;
	&quot;github.com/bingjian-zhu/gin-vue-admin/common/validator&quot;
)
func main() {

	binding.Validator = new(validator.DefaultValidator)

	// regular gin logic
}
</code></pre>
<p>以上，我们就完成了gin的数据请求校验了，接下来看下优化后的代码。</p>
<h3 id="优化后代码">优化后代码</h3>
<p><img src="https://img2020.cnblogs.com/blog/1508611/202004/1508611-20200428144843346-824677511.png" alt=""></p>
<p>只需要正常使用<code>c.Bing(model)</code>就可以对请求的数据进行校验了，代码简化了许多。</p>
<h3 id="常用校验规则介绍">常用校验规则介绍</h3>
<pre><code class="language-go">type Test struct {
	ID          int    `validate:&quot;required&quot;`             //数字确保不为0
	Name        string `validate:&quot;required,min=1,max=8&quot;` //字符串确保不为&quot;&quot;，且长度 &gt;=1 &amp;&amp; &lt;=8 （min=1,max=8等于gt=0,lt=9）
	Value       string `validate:&quot;required,gte=1,lte=8&quot;` //字符串确保不为&quot;&quot;，且长度 &gt;=1 &amp;&amp; &lt;=8
	Status      int    `validate:&quot;min=1,max=10&quot;`         //最小为0，最大为10（min=0,max=10等于gt=0,lt=11）
	PhoneNumber string `validate:&quot;required,len=11&quot;`      //不为&quot;&quot;且长度为11
	Time        string `validate:&quot;datetime=2006-01-02&quot;`  //必须如2006-01-02的datetime格式
	Color       string `validate:&quot;oneof=red green&quot;`      //是能是red或者green
	Size        int    `validate:&quot;oneof=37 39 41&quot;`       //是能是37或者39或者41
	Email       string `validate:&quot;email&quot;`                //必须邮件格式
	JSON        string `validate:&quot;json&quot;`                 //必须json格式
	URL         string `validate:&quot;url&quot;`                  //必须url格式
	UUID        string `validate:&quot;uuid&quot;`                 //必须uuid格式
}
</code></pre>
<p>更多校验规则可以阅读<a href="https://github.com/go-playground/validator/blob/master/doc.go">源码文档</a>。</p>
<h3 id="总结">总结</h3>
<p><a href="https://github.com/go-playground/validator">go-playground/validator</a>开源库把gin的请求校验简单化了，使得我们代码更简单易读。</p>
<p>以上只是对结构体做请求校验，对于非结构体的请求校验，用老办法</p>
<pre><code class="language-go">import &quot;github.com/astaxie/beego/validation&quot;

func (a *Article) GetArticle(c *gin.Context) {
	id, _ := strconv.Atoi(c.Param(&quot;id&quot;))
	valid := validation.Validation{}
	valid.Min(id, 1, &quot;id&quot;).Message(&quot;ID必须大于0&quot;)
	var data *models.Article
	code := codes.InvalidParams
	if !valid.HasErrors() {
		data = a.Service.GetArticle(id)
		code = codes.SUCCESS
	} else {
		for _, err := range valid.Errors {
			a.Log.Info(&quot;err.key: %s, err.message: %s&quot;, err.Key, err.Message)
		}
	}
	RespData(c, http.StatusOK, code, data)
}
</code></pre>
<p>源码地址：<a href="https://github.com/Bingjian-Zhu/gin-vue-admin">https://github.com/Bingjian-Zhu/gin-vue-admin</a></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-28 19:27</span>&nbsp;
<a href="https://www.cnblogs.com/FireworksEasyCool/">烟花易冷人憔悴</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12794311" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12794311);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 481645, cb_blogApp = 'FireworksEasyCool', cb_blogUserGuid = '56c23387-6e65-412b-503d-08d62f01499c';
    var cb_entryId = 12794311, cb_entryCreatedDate = '2020-04-28 19:27', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 烟花易冷人憔悴
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>