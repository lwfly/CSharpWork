<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="代码默认模板 编译性高级编程语言中，几乎每种语言，都有个静态的 main 方法作为程序启动入口，每种语言都有其编写规范。为了学习 C/C&#x2B;&#x2B;、C 、JAVA四种语言，我们要先从默认代码模板中，慢慢摸索" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>C/C++、C#、JAVA(一)：代码模板与库代码的引入 - 痴者工良 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=Z9Vw4btcgJmrpUEjY_SgebmTmDXJ_hPFoST7ad2aJp4" />
    <link id="MainCss" rel="stylesheet" href="/skins/codinglife/bundle-codinglife.min.css?v=hlpQ1CJDwwJXDxv2HNauUmW3NjyWzoMaw1uER19SLT0" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/whuanle/custom.css?v=mA&#x2B;FpFQUS/JIlY1IQJTjcdZUvw0=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/codinglife/bundle-codinglife-mobile.min.css?v=XjHfryC9ctsatIZz1dHn7TsRIqmwz9c3aj_6SCfHSDM" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/whuanle/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/whuanle/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/whuanle/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 406195;
        var currentBlogApp = 'whuanle';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'CodingLife';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/whuanle/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/whuanle/">痴者工良</a>
</h1>
<h2>
一个逗B的大学生，爱好技术交流，目前专注于.NET 全栈开发
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/whuanle/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E7%97%B4%E8%80%85%E5%B7%A5%E8%89%AF">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/whuanle/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
140&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
186</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/whuanle/p/12545895.html">C/C++、C#、JAVA(一)：代码模板与库代码的引入</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h2 id="代码默认模板">代码默认模板</h2>
<p>编译性高级编程语言中，几乎每种语言，都有个静态的 main 方法作为程序启动入口，每种语言都有其编写规范。为了学习 C/C++、C#、JAVA四种语言，我们要先从默认代码模板中，慢慢摸索学习。</p>
<p>约定：<br>
我们常常可以看到 函数、方法这两个词，很多人对此进行了混用。<br>
方法，就是 <code>void Test(){}</code> 这样的形式；<br>
函数，指具有确定命名的、并且可以通过名称调用的代码，属性、字段、方法、委托、事件等；<br>
只要能够通过确定的名称调用（使用）的代码块，就是函数；而方法就是 返回值、名称、参数等组成的代码块；</p>
<p>C/C++、Java 主要是 驼峰命名(Camel-Case)， C# 是Pascal 规则(帕斯卡命名)。<br>
文章代码和示例比较多，对于命名这方面，可能不会严格按照此语言的规范编写。(主要是笔者习惯写C#)</p>
<h3 id="代码模板">代码模板</h3>
<h4 id="c">C</h4>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int main()
{
    /* 代码 */
    return 0;
}
</code></pre>
<h4 id="c-2">C++</h4>
<pre><code class="language-c++">#include &lt;iostream&gt;
using namespace std;

int main()
{
    /* 代码 */
   return 0;
}
</code></pre>
<h3 id="c-3">C#</h3>
<pre><code class="language-C#">using System;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
           /* 代码 */
        }
    }
}
</code></pre>
<h4 id="java">JAVA</h4>
<pre><code class="language-java">package com.company;
import com.company.test.*;

public class Main {

    public static void main(String[] args) {
        Test test = new Test();
    }
}
</code></pre>
<p>C# 和 Java 的 <code>main</code> 方法都是静态入口。<br>
C# 的 <code>main</code> 方法是大写，其余语言都是小写。</p>
<h2 id="库代码的引入和解析">库代码的引入和解析</h2>
<p>每种编程语言中，例如 sdk 等都会有大量丰富的官方库代码已经自定义库代码，那么，我们应该如何引入使用呢？</p>
<h3 id="c-4">C</h3>
<p>C语言 源文件以 <code>.c</code> 或 <code>.h</code> 结尾，一般 <code>.h</code> 用来定义成员， <code>.c</code> 用来实现成员。<br>
<code>.c</code> 称为源文件，<code>.h</code> 称为头文件。</p>
<p>C语言中，使用 <code>#include &quot;{文件名称}.{.c|.h}&quot;</code> 或 <code>#include &lt;{文件名称}.{.c|.h}&gt;</code> 来使用系统或自定义的库代码。<br>
简单来说，<code>#include &lt;&gt;</code> 是使用系统自带的代码，<code>#include &quot;&quot;</code> 是使用你自己写的代码或第三方代码。<br>
请参考<br>
<a href="http://c.biancheng.net/view/443.html">http://c.biancheng.net/view/443.html</a></p>
<p>写代码和编译时，<code>.c</code> 和 <code>.h</code> 文件和里面的代码没有任何联系。</p>
<p>C语言 中没有接口(面向对象)，因此考虑到解耦，将函数的定义和实现两个部分分开，<code>.h</code> 文件定义外界可以访问使用的成员，以及如何调用成员。<code>.c</code> 实现 <code>.h</code> 中声明名的成员。</p>
<p>那么，如何使用 <code>.h</code> 和 <code>.c</code> 声明和实现函数，并且能给外部使用呢？</p>
<h4 id="实现-h-、c-以及外部调用">实现 <code>.h</code> 、<code>.c</code> 以及外部调用</h4>
<p>编写一个 <code>Test.h</code> 文件。<br>
此文件声明了一个 <code>getA</code>方法，不需要输入参数，会返回一个 int 类型的值。<br>
extern 关键字，声明了此方法能够被外部调用。</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

extern int getA(void);
</code></pre>
<p>我们在 main 方法中，使用此方法</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
#include &quot;Test.h&quot;

int main() {
	int a = getA();
	printf(&quot;%d&quot;,a);
	return 0;
}
</code></pre>
<p>然后来实现 <code>Test.c</code></p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

// 实现 getA方法
int getA(void) {
	return 666;
}
</code></pre>
<p>以上代码就是 <code>.h</code>、<code>.c</code> 文件的编写方法以及提供外部调用。</p>
<h4 id="h-和-c-文件"><code>.h</code> 和 <code>.c</code> 文件</h4>
<p>前面我说了，<code>.h</code>、和 <code>.c</code> 文件，没有必然联系。下面我来解释一下。</p>
<p>因为 <code>.h</code> 和 <code>.c</code> 不像 C#、JAVA 中的 接口和继承，没有强制规定，因此可以只写 <code>.h</code>，或只写 <code>.c</code>。<br>
<code>.h</code> 也可以实现代码，例如 <code>Test.h</code> 文件</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
extern int getA(void) {
	return 666;
}
</code></pre>
<p>C语言的编译，经历预处理/预编译、编译、汇编、链接四个步骤。<br>
预处理/预处理(Preprocessing)：条件编译、宏定义处理等<br>
编译(Compilation)： 检查语法，生成汇编<br>
汇编(Assemble)：汇编代码转换机器码<br>
链接(Linking)：与其它组件组合起来生成可执行文件<br>
资料参考<br>
<a href="http://c.biancheng.net/view/1736.html">http://c.biancheng.net/view/1736.html</a></p>
<p><a href="https://blog.51cto.com/7905648/1297255">https://blog.51cto.com/7905648/1297255</a></p>
<p><code>.h</code> 和 <code>.c</code> 文件，在最后链接阶段，才会出现真正 <code>联系</code>。<br>
请参考<br>
<a href="https://www.cnblogs.com/laojie4321/archive/2012/03/30/2425015.html">https://www.cnblogs.com/laojie4321/archive/2012/03/30/2425015.html</a></p>
<h3 id="c-5">C++</h3>
<p>据说 C++ 之父 Bjarne Stroustrup 博士，都没有搞懂 C++ 这种编程。<br>
<img src="https://img2020.cnblogs.com/blog/1315495/202003/1315495-20200322143020033-1057177884.png" alt=""></p>
<p>C++ 源文件后缀为 <code>.cpp</code> 。</p>
<p>C++ 中，我们看到了 <code>#include &lt;iostream&gt;</code> ,为啥不带 <code>.h</code> 或 <code>.c</code>？<br>
C++ 是 C语言 的超集，C++ 实现了面向对象，C++ 出现了命名空间和库的概念。<br>
在 C++ 中，<code>#include &lt;stdio.h&gt;</code> 是一般的头文件引用方式；而 <code>#include &lt;iostream&gt;</code> 是 C++ 库的引用方式。引用的是 <code>标准库</code>。</p>
<p>C++ 标准库分为两部分：</p>
<p>标准函数库： 继承C语言，由不属于类的函数组成。<br>
面向对象类库： 类及其相关函数的集合。</p>
<h4 id="命名空间">命名空间</h4>
<p>前面我们看到了 C++ 代码模板中，还有 <code>using namespace std;</code> ，这一句是引用命名空间。</p>
<p>在 c++ 中，也可以直接实现 <code>.h</code> 声明的 函数，但是这样跟不能体会到 面向对象 的优势。</p>
<p>C++ 使用面向对象，采用 命名空间-类-成员实现 的机构，来编写代码，示例如下。<br>
编写 Test.h</p>
<pre><code class="language-c++">
namespace first_space {
	int func();
}
</code></pre>
<p>编写 Test.c</p>
<pre><code class="language-c++">namespace first_space {
	int func() {
		return 666;
	}
}
</code></pre>
<p>main 函数中调用</p>
<pre><code class="language-c++">#include &lt;iostream&gt;
#include &quot;Test.h&quot;

using namespace std;
using namespace first_space;

int main()
{
	int a = func();		// first_space
	cout &lt;&lt; a &lt;&lt; endl;
	return 0;
}
</code></pre>
<p>可以看到，命名空间只是多了个范围限定。<br>
在 C++ 中，函数可以定义在类中，命名空间中，也可以直接写在 源文件中。</p>
<h3 id="c-6">C#</h3>
<p>C# 是笔者最喜欢的语言，嘿嘿嘿。<br>
C# 中类库编译后，是一个 <code>.dll</code> 文件。</p>
<p>以下是 C# 命名空间和引用命名空间的示例。</p>
<pre><code class="language-c#">namespace ConsoleApp1
{
    using Test;
    class Program
    {
        static void Main(string[] args)
        {
            T666 t = new T666();
            t.Test();
        }
    }
}
namespace Test
{
    public class T666
    {
        public void Test(){}
    }
}
</code></pre>
<p>C# 中，命名空间没有严格要求。<br>
一般，命名空间以 <code>[项目名称].[目录名称].[目录名称]...</code> 组成。<br>
以项目名称开头，后面每个子目录名称组成。<br>
例如要实现用户身份认证的功能，将这部分代码放到 <code>MyProj/Auth</code> 目录中，那么命名空间就是 <code>MyProj.Auth</code>。<br>
C# 的源文件以 <code>.cs</code> 结尾，一般来说，一个独立功能的类或接口，使用一个 <code>.cs</code> 文件。<br>
但 C# 中，并不强制要求。这些慢慢学习 C# 时会学习了解到。很大程度上跟 C++ 的命名空间相似。</p>
<p>C# 中以命名空间作为限定范围，对类进行使用。<br>
调用的最小粒度为类、结构体、枚举等。<br>
所有的字段、属性、方法等必须在类中定义和实现。<br>
C# 引入一个命名空间后，便能使用此命名空间的所有的类。</p>
<h3 id="java-2">Java</h3>
<p>Java 的规则还是比较多的。<br>
Java 的源文件，以 <code>.java</code> 结尾。<br>
每个 <code>.java</code> 文件中，只能有一个 public 类，并且类名称必须跟 <code>.java</code> 文件的名称相同。<br>
Java 中，没有命名空间，而是以包的形式来调用，包名引用严格以目录名称设置。</p>
<p>Java 中，使用 <code>import</code> 关键字来引入包，例如 <code>import java.io.*;</code> 。<br>
有两种引用形式，一种是引用具体的类名</p>
<pre><code class="language-java">import  java.io.PrintStream;
</code></pre>
<p>之后便可以使用 PrintStream 类。<br>
另一种是使用  <code>import java.io.*;</code> ，可以使用此包下所有的类。</p>
<p>Java 中，标准库以 <code>java.</code> 或 <code>javax.</code> 开头。</p>
<p>如果想将编写的类提供给外部使用，则要使用 <code>package</code> 关键字。</p>
<p>以下为一个示例.</p>
<p>程序目录结构如下</p>
<pre><code>.
│  main
│
└─com
    └─company
        │  Main.java
        │  MyFrame.java
        │
        └─test
                Test.java
                Test2.java
</code></pre>
<p>编写两个类，Test，Test2，</p>
<pre><code class="language-java"># Test
package com.company.test;

public class Test {
    public void My() {
        Test2 t = new Test2();
    }
}


# Test2
package com.company.test;

public class Test2 {
}
</code></pre>
<p>main 函数中调用调用</p>
<pre><code class="language-java">package com.company;
import com.company.test.*;

public class Main {
    public static void main(String[] args) {
        Test test = new Test();
    }
}
</code></pre>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-03-22 14:31</span>&nbsp;
<a href="https://www.cnblogs.com/whuanle/">痴者工良</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12545895" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12545895);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 406195, cb_blogApp = 'whuanle', cb_blogUserGuid = 'b8263b87-b86b-4861-1de2-08d54dbac325';
    var cb_entryId = 12545895, cb_entryCreatedDate = '2020-03-22 14:31', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 痴者工良
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>