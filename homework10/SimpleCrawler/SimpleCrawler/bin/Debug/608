<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="[TOC] 前面我们学习了很多用于线程管理的 类型，也学习了多种线程同步的使用方法，这一篇主要讲述线程等待相关的内容。 在笔者认真探究多线程前，只会 ；锁？ ；线程等待？ 。 前面已经探究了创建线程的" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>C#多线程(11)：线程等待 - 痴者工良 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=Z9Vw4btcgJmrpUEjY_SgebmTmDXJ_hPFoST7ad2aJp4" />
    <link id="MainCss" rel="stylesheet" href="/skins/codinglife/bundle-codinglife.min.css?v=hlpQ1CJDwwJXDxv2HNauUmW3NjyWzoMaw1uER19SLT0" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/whuanle/custom.css?v=mA&#x2B;FpFQUS/JIlY1IQJTjcdZUvw0=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/codinglife/bundle-codinglife-mobile.min.css?v=XjHfryC9ctsatIZz1dHn7TsRIqmwz9c3aj_6SCfHSDM" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/whuanle/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/whuanle/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/whuanle/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 406195;
        var currentBlogApp = 'whuanle';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'CodingLife';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/whuanle/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/whuanle/">痴者工良</a>
</h1>
<h2>
一个逗B的大学生，爱好技术交流，目前专注于.NET 全栈开发
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/whuanle/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E7%97%B4%E8%80%85%E5%B7%A5%E8%89%AF">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/whuanle/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
140&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
186</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/whuanle/p/12783086.html">C#多线程(11)：线程等待</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#前言">前言</a><ul><li><a href="#volatile-关键字">volatile 关键字</a></li><li><a href="#三种常用等待">三种常用等待</a></li><li><a href="#再说自旋和阻塞">再说自旋和阻塞</a></li></ul></li><li><a href="#spinwait-结构">SpinWait 结构</a><ul><li><a href="#属性和方法">属性和方法</a></li><li><a href="#自旋示例">自旋示例</a></li><li><a href="#新的实现">新的实现</a></li></ul></li><li><a href="#spinlock-结构">SpinLock 结构</a><ul><li><a href="#属性和方法">属性和方法</a></li><li><a href="#示例">示例</a></li><li><a href="#等待性能对比">等待性能对比</a></li></ul></li></ul></div><br>
前面我们学习了很多用于线程管理的 类型，也学习了多种线程同步的使用方法，这一篇主要讲述线程等待相关的内容。</p>
<p>在笔者认真探究多线程前，只会<code>new Thread</code>；锁？<code>Lock</code>；线程等待？<code>Thread.Sleep()</code>。</p>
<p>前面已经探究了创建线程的创建姿势和各种锁的使用，也学习了很多类型，也使用到了很多种等待方法，例如 <code>Thread.Sleep()</code>、<code>Thread.SpinWait();</code>、<code>{某种锁}.WaitOne()</code> 等。</p>
<p>这些等待会影响代码的算法逻辑和程序的性能，也有可能会造成死锁，在本篇我们将会慢慢探究线程中等待。</p>
<h2 id="前言">前言</h2>
<h3 id="volatile-关键字">volatile 关键字</h3>
<p><code>volatile</code> 关键字指示一个字段可以由多个同时执行的线程修改。</p>
<p>我们继续使用<a href="https://www.cnblogs.com/whuanle/p/12724371.html">《C#多线程(3)：原子操作》</a>中的示例：</p>
<pre><code class="language-csharp">        static void Main(string[] args)
        {
            for (int i = 0; i &lt; 5; i++)
            {
                new Thread(AddOne).Start();
            }
            Thread.Sleep(TimeSpan.FromSeconds(5));
            Console.WriteLine(&quot;sum = &quot; + sum);
            Console.ReadKey();
        }
        private static int sum = 0;
        public static void AddOne()
        {
            for (int i = 0; i &lt; 100_0000; i++)
            {
                sum += 1;
            }
        }
</code></pre>
<p>运行后你会发现，结果不为 500_0000，而使用 <code>Interlocked.Increment(ref sum);</code>后，可以获得准确可靠的结果。</p>
<p>你试试再运行下面的示例：</p>
<pre><code class="language-csharp">        static void Main(string[] args)
        {
            for (int i = 0; i &lt; 5; i++)
            {
                new Thread(AddOne).Start();
            }
            Thread.Sleep(TimeSpan.FromSeconds(5));
            Console.WriteLine(&quot;sum = &quot; + sum);
            Console.ReadKey();
        }
        private static volatile int sum = 0;
        public static void AddOne()
        {
            for (int i = 0; i &lt; 100_0000; i++)
            {
                sum += 1;
            }
        }
</code></pre>
<p>你以为正常了？哈哈哈，并没有。</p>
<p>volatile 的作用在于读，保证了观察的顺序和写入的顺序一致，每次读取的都是最新的一个值；不会干扰写操作。</p>
<p>详情请点击：<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/volatile">https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/volatile</a></p>
<p>其原理解释：<a href="https://theburningmonk.com/2010/03/threading-understanding-the-volatile-modifier-in-csharp/">https://theburningmonk.com/2010/03/threading-understanding-the-volatile-modifier-in-csharp/</a></p>
<p><img src="https://img2020.cnblogs.com/blog/1315495/202004/1315495-20200426225619468-27042466.png" alt=""></p>
<h3 id="三种常用等待">三种常用等待</h3>
<p>这三种等待分别是：</p>
<pre><code class="language-csharp">Thread.Sleep();
</code></pre>
<pre><code class="language-csharp">Thread.SpinWait();
</code></pre>
<pre><code class="language-csharp">Task.Delay();
</code></pre>
<p><code>Thread.Sleep();</code> 会阻塞线程，使得线程交出时间片，然后处于休眠状态，直至被重新唤醒；适合用于长时间的等待；</p>
<br />
<p><code>Thread.SpinWait();</code> 使用了自旋等待，等待过程中会进行一些的运算，线程不会休眠，用于微小的时间等待；长时间等待会影响性能；</p>
<br />
<p><code>Task.Delay();</code> 用于异步中的等待，异步的文章后面才写，这里先不理会；</p>
<br />
<p>这里我们还需要继续 SpinWait 和 SpinLock 这两个类型，最后再进行总结对照。</p>
<h3 id="再说自旋和阻塞">再说自旋和阻塞</h3>
<p>前面我们学习过自旋和阻塞的区别，这里再来撸清楚一下。</p>
<p>线程等待有内核模式(Kernel Mode)和用户模式(User Model)。</p>
<p>因为只有操作系统才能控制线程的生命周期，因此使用 <code>Thread.Sleep()</code> 等方式阻塞线程，发生上下文切换，此种等待称为内核模式。</p>
<p>用户模式使线程等待，并不需要线程切换上下文，而是让线程通过执行一些无意义的运算，实现等待。也称为自旋。</p>
<h2 id="spinwait-结构">SpinWait 结构</h2>
<p>微软文档定义：为基于自旋的等待提供支持。</p>
<p>
    <div style="color: rgb(23, 23, 23); font-family: &quot;Segoe UI&quot;, SegoeUI, &quot;Segoe WP&quot;, &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, sans-serif; background-color: rgb(255, 241, 204);border-radius: 10px;padding:20px;">
SpinWait 是结构体；Thread.SpinWait() 的原理就是 SpinWait 。<br />如果你想了解 Thread.SpinWait() 是怎么实现的，可以参考 <a href="https://www.tabsoverspaces.com/233735-how-is-thread-spinwait-actually-implemented">https://www.tabsoverspaces.com/233735-how-is-thread-spinwait-actually-implemented</a>
</div>
</p>
<p>线程阻塞是会耗费上下文切换的，对于过短的线程等待，这种切换的代价会比较昂贵的。在我们前面的示例中，大量使用了 <code>Thread.Sleep()</code> 和各种类型的等待方法，这其实是不合理的。</p>
<p>SpinWait 则提供了更好的选择。</p>
<h3 id="属性和方法">属性和方法</h3>
<p>老规矩，先来看一下 SpinWait 常用的属性和方法。</p>
<p>属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Count</td>
<td>获取已对此实例调用 SpinOnce() 的次数。</td>
</tr>
<tr>
<td>NextSpinWillYield</td>
<td>获取对 SpinOnce() 的下一次调用是否将产生处理器，同时触发强制上下文切换。</td>
</tr>
</tbody>
</table>
<p>方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Reset()</td>
<td>重置自旋计数器。</td>
</tr>
<tr>
<td>SpinOnce()</td>
<td>执行单一自旋。</td>
</tr>
<tr>
<td>SpinOnce(Int32)</td>
<td>执行单一自旋，并在达到最小旋转计数后调用 Sleep(Int32) 。</td>
</tr>
<tr>
<td>SpinUntil(Func)</td>
<td>在指定条件得到满足之前自旋。</td>
</tr>
<tr>
<td>SpinUntil(Func, Int32)</td>
<td>在指定条件得到满足或指定超时过期之前自旋。</td>
</tr>
<tr>
<td>SpinUntil(Func, TimeSpan)</td>
<td>在指定条件得到满足或指定超时过期之前自旋。</td>
</tr>
</tbody>
</table>
<h3 id="自旋示例">自旋示例</h3>
<p>下面来实现一个让当前线程等待其它线程完成任务的功能。</p>
<p>其功能是开辟一个线程对 sum 进行 <code>+1</code>，当新的线程完成运算后，主线程才能继续运行。</p>
<pre><code class="language-csharp">    class Program
    {
        static void Main(string[] args)
        {
            new Thread(DoWork).Start();

            // 等待上面的线程完成工作
            MySleep();

            Console.WriteLine(&quot;sum = &quot; + sum);
            Console.ReadKey();
        }

        private static int sum = 0;
        private static void DoWork()
        {
            for (int i = 0; i &lt; 1000_0000; i++)
            {
                sum++;
            }
            isCompleted = true;
        }

        // 自定义等待等待
        private static bool isCompleted = false;
        private static void MySleep()
        {
            int i = 0;
            while (!isCompleted)
            {
                i++;
            }
        }
    }
</code></pre>
<h3 id="新的实现">新的实现</h3>
<p>我们改进上面的示例，修改 MySleep 方法，改成：</p>
<pre><code class="language-csharp">        private static bool isCompleted = false;        
        private static void MySleep()
        {
            SpinWait wait = new SpinWait();
            while (!isCompleted)
            {
                wait.SpinOnce();
            }
        }
</code></pre>
<p>或者改成</p>
<pre><code class="language-csharp">        private static bool isCompleted = false;        
        private static void MySleep()
        {
            SpinWait.SpinUntil(() =&gt; isCompleted);
        }
</code></pre>
<h2 id="spinlock-结构">SpinLock 结构</h2>
<p>微软文档：提供一个相互排斥锁基元，在该基元中，尝试获取锁的线程将在重复检查的循环中等待，直至该锁变为可用为止。</p>
<p>SpinLock 称为自旋锁，适合用在频繁争用而且等待时间较短的场景。主要特征是避免了阻塞，不出现昂贵的上下文切换。</p>
<p>笔者水平有限，关于 SpinLock ，可以参考 <a href="https://www.c-sharpcorner.com/UploadFile/1d42da/spinlock-class-in-threading-C-Sharp/">https://www.c-sharpcorner.com/UploadFile/1d42da/spinlock-class-in-threading-C-Sharp/</a></p>
<p>另外，还记得 Monitor 嘛？SpinLock 跟 Monitor 比较像噢~<a href="https://www.cnblogs.com/whuanle/p/12722853.html#2monitor">https://www.cnblogs.com/whuanle/p/12722853.html#2monitor</a></p>
<p>在《C#多线程(10：读写锁)》中，我们介绍了 ReaderWriterLock 和 ReaderWriterLockSlim ，而 ReaderWriterLockSlim 内部依赖于 SpinLock，并且比 ReaderWriterLock 快了三倍。</p>
<h3 id="属性和方法-2">属性和方法</h3>
<p>SpinLock  常用属性和方法如下：</p>
<p>属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>IsHeld</td>
<td>获取锁当前是否已由任何线程占用。</td>
</tr>
<tr>
<td>IsHeldByCurrentThread</td>
<td>获取锁是否已由当前线程占用。</td>
</tr>
<tr>
<td>IsThreadOwnerTrackingEnabled</td>
<td>获取是否已为此实例启用了线程所有权跟踪。</td>
</tr>
</tbody>
</table>
<p>方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Enter(Boolean)</td>
<td>采用可靠的方式获取锁，这样，即使在方法调用中发生异常的情况下，都能采用可靠的方式检查 <code>lockTaken</code> 以确定是否已获取锁。</td>
</tr>
<tr>
<td>Exit()</td>
<td>释放锁。</td>
</tr>
<tr>
<td>Exit(Boolean)</td>
<td>释放锁。</td>
</tr>
<tr>
<td>TryEnter(Boolean)</td>
<td>尝试采用可靠的方式获取锁，这样，即使在方法调用中发生异常的情况下，都能采用可靠的方式检查 <code>lockTaken</code> 以确定是否已获取锁。</td>
</tr>
<tr>
<td>TryEnter(Int32, Boolean)</td>
<td>尝试采用可靠的方式获取锁，这样，即使在方法调用中发生异常的情况下，都能采用可靠的方式检查 <code>lockTaken</code> 以确定是否已获取锁。</td>
</tr>
<tr>
<td>TryEnter(TimeSpan, Boolean)</td>
<td>尝试采用可靠的方式获取锁，这样，即使在方法调用中发生异常的情况下，都能采用可靠的方式检查 <code>lockTaken</code> 以确定是否已获取锁。</td>
</tr>
</tbody>
</table>
<h3 id="示例">示例</h3>
<p>SpinLock 的模板如下：</p>
<pre><code class="language-csharp">        private static void DoWork()
        {
            SpinLock spinLock = new SpinLock();
            bool isGetLock = false;     // 是否已获得了锁
            try
            {
                spinLock.Enter(ref isGetLock);
                // 运算
            }
            finally
            {
                if (isGetLock)
                    spinLock.Exit();
            }
        }
</code></pre>
<p>这里就不写场景示例了。</p>
<p>需要注意的是， SpinLock 实例不能共享，也不能重复使用。</p>
<h3 id="等待性能对比">等待性能对比</h3>
<p>大佬的文章，.NET 中的多种锁性能测试数据：<a href="http://kejser.org/synchronisation-in-net-part-3-spinlocks-and-interlocks/">http://kejser.org/synchronisation-in-net-part-3-spinlocks-and-interlocks/</a></p>
<p>这里我们简单测试一下阻塞和自旋的性能测试对比。</p>
<p>我们经常说，<code>Thread.Sleep()</code> 会发生上下文切换，出现比较大的性能损失。具体有多大呢？我们来测试一下。（以下运算都是在 Debug 下测试）</p>
<p>测试 <code>Thread.Sleep(1)</code>：</p>
<pre><code class="language-csharp">        private static void DoWork()
        {
            Stopwatch watch = new Stopwatch();
            watch.Start();
            for (int i = 0; i &lt; 1_0000; i++)
            {
                Thread.Sleep(1);
            }
            watch.Stop();
            Console.WriteLine(watch.ElapsedMilliseconds);
        }
</code></pre>
<p>笔者机器测试，结果大约 20018。<code>Thread.Sleep(1)</code> 减去等待的时间 10000 毫秒，那么进行 10000 次上下文切换需要花费 10000 毫秒，约每次 1 毫秒。</p>
<p>上面示例改成：</p>
<pre><code class="language-csharp">            for (int i = 0; i &lt; 1_0000; i++)
            {
                Thread.Sleep(2);
            }
</code></pre>
<p>运算，发现结果为 30013，也说明了上下文切换，大约需要一毫秒。</p>
<p>改成 <code>Thread.SpinWait(1000)</code>：</p>
<pre><code class="language-csharp">            for (int i = 0; i &lt; 100_0000; i++)
            {
                Thread.SpinWait(1000);
            }
</code></pre>
<p>结果为 28876，说明自旋 1000 次，大约需要 0.03 毫秒。</p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-26 22:58</span>&nbsp;
<a href="https://www.cnblogs.com/whuanle/">痴者工良</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12783086" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12783086);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 406195, cb_blogApp = 'whuanle', cb_blogUserGuid = 'b8263b87-b86b-4861-1de2-08d54dbac325';
    var cb_entryId = 12783086, cb_entryCreatedDate = '2020-04-26 22:58', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 痴者工良
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>