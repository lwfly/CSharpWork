<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="JavaScript之浅谈内存空间 JavaScipt 内存自动回收机制 在JavaScript中，最独特的一个特点就是拥有自动的垃圾回收机制（ 周期性执行 ），这也就意味者，前端开发人员能够专注于业" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>JavaScript之浅谈内存空间 - 是浩然呀 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=Z9Vw4btcgJmrpUEjY_SgebmTmDXJ_hPFoST7ad2aJp4" />
    
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/haoranya/custom.css?v=y5O3IR4NKPZo6KZOfjY9CLFVcyk=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/SimpleMemory/bundle-SimpleMemory-mobile.min.css" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/haoranya/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/haoranya/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/haoranya/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 575739;
        var currentBlogApp = 'haoranya';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleMemory';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <script>loadPageBeginHtml();</script>
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/haoranya/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/haoranya/">是浩然呀</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/haoranya/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E6%98%AF%E6%B5%A9%E7%84%B6%E5%91%80">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/haoranya/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
1&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
1</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/haoranya/p/12791363.html">JavaScript之浅谈内存空间</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h1 id="javascript之浅谈内存空间">JavaScript之浅谈内存空间</h1>
<h2 id="javascipt-内存自动回收机制">JavaScipt 内存自动回收机制</h2>
<p>在JavaScript中，最独特的一个特点就是拥有自动的垃圾回收机制（<strong>周期性执行</strong>），这也就意味者，前端开发人员能够专注于业余，从而减少在内存的管理，提高开发的效率。</p>
<p>用户自定义的对象、函数，但这些都是我们肉眼不可见的，而是依靠在外部的媒介“内存条”中，自动垃圾回收的本质也就是找出已不再使用的变量、函数，释放其占用的内存空间</p>
<p>当不再需要某样东西时会发生什么? JavaScript 引擎是如何发现并清理它?</p>
<h3 id="可达性">可达性</h3>
<p>JavaScript 中内存管理的主要概念是可达性。</p>
<p>简单地说，“可达性” 值就是那些以某种方式可访问或可用的值，它们被保证存储在内存中。</p>
<h3 id="固有的可达值根">固有的可达值(根)</h3>
<ul>
<li>
<p>本地函数的局部变量和参数</p>
</li>
<li>
<p>当前嵌套执行上下文其他函数的变量和函数</p>
</li>
<li>
<p>全局变量</p>
</li>
</ul>
<p>如果引用或者引用链可以通过根访问到任何其他值，则认为该值是可访问的</p>
<p>实际上网页的元素就是由一个个对象构建成了一个dom树（特殊的图结构）（树结构是单向,图结构是双向的,）</p>
<center><img src="https://img2020.cnblogs.com/blog/1886277/202004/1886277-20200427221601263-1350102325.png"></center>
<p>通过JavaScipt提供的api我们可以找到页面上指定元素的对象，并对其进行操作</p>
<p>每一个DOM元素对象都可以看作是一个根，我们可以还可以访问自身元素的<strong>亲戚</strong></p>
<ul>
<li>
<p>父元素</p>
</li>
<li>
<p>兄弟元素</p>
</li>
<li>
<p>祖先元素</p>
</li>
<li>
<p>后代元素</p>
</li>
</ul>
<h4 id="单项引用">单项引用</h4>
<pre><code class="language-js">    var user = {
        name : 'EYS'，
    }
</code></pre>
<center><img src="https://image-static.segmentfault.com/289/469/2894691528-5c92e57b9339d_articlex"></center>
<p>这里的箭头表示一个对象引用，全局变量 &quot;user&quot; 引用对象{name : 'EYS'} user对象中的name属性存储了一个基本类型的数据</p>
<p>但如果user的值被覆盖，则引用丢失</p>
<pre><code class="language-js">    user = null;
</code></pre>
<center><img src="https://image-static.segmentfault.com/138/680/1386806337-5c93267a5206f_articlex"></center>
<p>现在user变成不可达的状态，没有办法访问之前的值，他们之间没有联系，就被JavaScript引擎发现他了！！！然后就把他丢到<strong>小黑屋</strong>去了，自动释放了它所占用的内存空间</p>
<center><img src=""></center>
#### 双向引用
<pre><code class="language-js">    // user具有对象的引用
    var user = {
      name: &quot;John&quot;
    };
    var admin = user; //引用传递
</code></pre>
<center><img src="https://image-static.segmentfault.com/133/655/133655656-5c9327b57caa3_articlex"></center>
<p>该对象仍然可以通过 admin 全局变量访问，所以它在内存中。如果我们也覆盖admin，那么它可以被释放。</p>
<h4 id="相互关联的对象">相互关联的对象</h4>
<pre><code class="language-js">    function marry (man, woman) {
      woman.husban = man;
      man.wife = woman;

      return {
        father: man,
        mother: woman
      }
    }
    let family = marry({
      name: &quot;John&quot;
    }, {
      name: &quot;Ann&quot;
    })
</code></pre>
<p>产生的内存结构:</p>
<center><img src="https://image-static.segmentfault.com/447/270/447270667-5c9329b9e28bb_articlex"></center>  
<p>内存中的图片变成:<br>
现在让我们删除两个引用:</p>
<pre><code class="language-js">    delete family.father;
    delete family.mother.husband;
</code></pre>
<center><img src="https://image-static.segmentfault.com/359/593/3595939355-5c932ad1e5d2d_articlex"></center>
<p>仅仅删除这两个引用中的一个是不够的，因为所有对象仍然是可访问的。</p>
<p>输出引用无关紧要。只有传入的对象才能使对象可访问，因此，John 现在是不可访问的，并将从内存中删除所有不可访问的数据。</p>
<p>垃圾回收之后：</p>
<center><img src="https://image-static.segmentfault.com/129/587/1295875551-5c932c350dd1e_articlex"></center>
但是如果我们把这两个都删除，那么我们可以看到 John 不再有传入的引用:
<h4 id="无法访问的数据块">无法访问的数据块</h4>
<pre><code class="language-js">    family = null;
</code></pre>
<p>但是如果我们把这两个都删除，那么我们可以看到 John 不再有传入的引用:</p>
<center><img src="https://image-static.segmentfault.com/420/035/420035998-5c932d8f3b867_articlex"></center>
<p>“family”对象已经从根上断开了链接，不再有对它的引用，因此下面的整个块变得不可到达，并将被删除。</p>
<h3 id="回收过程">回收过程</h3>
<h4 id="标记清除-推荐">标记清除 (推荐)</h4>
<p>分为『进入环境』和『离开环境』</p>
<p>进入环境 : 指变量进入的执行环境<br>
离开环境 : 指变量完成任务，离开了执行的环境</p>
<p><strong>垃圾收集器会在脚本运行的时候给存储在内存中的所有变量都加上标记</strong></p>
<p>它会去掉环境中的变量以及被环境中的变量引用的变量的标记</p>
<p>而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了</p>
<p>最后，垃圾收集器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间</p>
<h4 id="引用计数-（不推荐）">引用计数 （不推荐）</h4>
<p>含义 : 跟踪记录每个值被引用的次数</p>
<ul>
<li>
<p>当用户声明了一个变量并将一个引用类型值赋给该变量时,则这个值的应用次数就为1 【声明变量并赋值】</p>
</li>
<li>
<p>如果同一个值又被赋给另一个变量，则该值的引用次数加 1   【变量的值传递】</p>
</li>
<li>
<p>如果包含这个值引用的变量被覆盖了，则之前的值的应用次数减1 【覆盖变量之前的值】</p>
</li>
<li>
<p>当这个值的引用次数变成 0 时，则说明没有办法再访问这 个值了，因而就可以将其占用的内存空间回收回来。 【变量回收】</p>
</li>
</ul>
<p>这种机制其实在js中并不常用，因为这种机制会产生循环引用的问题，『循环引用』指的是对象 A 中包含一个指向对象 B 的指针，而对象 B 中也包含一个指向对象 A 的引用。对于像js类的自动回收机制的语言来说，需要额外手动的去释放内存，其实并不友好。</p>
<p>在学习内存空间之前，我们需要对三种数据结构有一个清晰的理解。他们分别是<strong>堆(heap)</strong>，<strong>栈(stack)</strong>与<strong>队列(queue)</strong>。</p>
<h2 id="三种数据结构">三种数据结构</h2>
<h3 id="一、栈stack数据结构">一、栈(Stack)数据结构</h3>
<p>JavaScript中并没有严格意义上区分栈内存与堆内存</p>
<p>如JavaScript的执行上下文（关于执行上下文我会在下一篇文章中总结）。执行上下文的执行顺序借用了栈数据结构的存取方式(也就是后面我们会经常提到的函数调用栈)。因此理解栈数据结构的原理与特点十分重要。</p>
<p>JavaScript的数据类型分为两种 : 基本类型，引用类型</p>
<p>我们可以简单粗暴的理解 基本类型数据是存储在栈，引用类型的数据是存储在堆中，等待变量建立引用关系</p>
<p>要简单理解栈的存取方式，我们可以通过类比乒乓球盒子来分析。如下图左侧。</p>
<center><img src="https://pic1.zhimg.com/80/v2-4052f85428756b05103192e1239d74fc_720w.jpg"></center>
<p><strong>基本特征为 : 先进后出，后进先出</strong></p>
<h3 id="二、堆heap数据结构">二、堆(Heap)数据结构</h3>
<p>堆数据结构是一种树状结构。它的存取数据的方式，则与书架与书非常相似。</p>
<p>书虽然也整齐的存放在书架上，但是我们只要知道书的名字，就可以很方便的取出我们想要的书，而不用像从乒乓球盒子里取乒乓一样，非得将上面的所有乒乓球拿出来才能取到中间的某一个乒乓球。好比在JSON格式的数据中，我们存储的key-value是可以无序的，因为顺序的不同并不影响我们的使用，我们只需要关心书的名字。</p>
<h3 id="三、队列">三、队列</h3>
<p>队列是一种先进先出（FIFO）的数据结构。正如排队过安检一样，排在队伍前面的人一定是最先过检的人。用以下的图示可以清楚的理解队列的原理。</p>
<center><img src="https://pic3.zhimg.com/80/v2-3f1af3a23595076a46f7807ddb9062a6_720w.jpg"></center>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-28 22:39</span>&nbsp;
<a href="https://www.cnblogs.com/haoranya/">是浩然呀</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12791363" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12791363);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 575739, cb_blogApp = 'haoranya', cb_blogUserGuid = '9d888939-4997-49b9-6397-08d7723e6cb2';
    var cb_entryId = 12791363, cb_entryCreatedDate = '2020-04-28 22:39', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 是浩然呀
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <!-- 底部加了小鱼<・)))><<~ -->
  <div id="jsi-flying-fish-container" class="container"></div>
  <script src='https://blog-static.cnblogs.com/files/elkyo/fish.js'></script>
  <style>
  @media only screen and (max-width: 767px){
  #sidebar_search_box input[type=text]{width:calc(100% - 24px)}
  }
  </style>

  <!--音乐-->
  <link rel="stylesheet" href="https://blog-static.cnblogs.com/files/elkyo/APlayer.min.css">
  <div id="player" class="aplayer aplayer-withlist aplayer-fixed" data-id="3025663508" data-server="netease" data-type="playlist" data-order="random" data-fixed="true" data-listfolded="true" data-theme="#2D8CF0"></div>
  <script src="https://blog-static.cnblogs.com/files/elkyo/APlayer.min.js"></script>
  <script src="https://blog-static.cnblogs.com/files/elkyo/Meting.min.js"></script>

  <!--看板娘 - 猫-->
  <script src="https://eqcn.ajz.miesnfu.com/wp-content/plugins/wp-3d-pony/live2dw/lib/L2Dwidget.min.js"></script>
  <script>
      L2Dwidget.init({
          "model": {
              jsonPath: "https://unpkg.com/live2d-widget-model-hijiki/assets/hijiki.model.json",<!--这里改模型，前面后面都要改-->
              "scale": 1
          },
          "display": {
              "position": "left",<!--设置看板娘的上下左右位置-->
              "width": 100,
              "height": 200,
              "hOffset": 70,
              "vOffset": 0
          },
          "mobile": {
              "show": true,
              "scale": 0.5
          },
          "react": {
              "opacityDefault": 0.7,<!--设置透明度-->
              "opacityOnHover": 0.2
          }
      });
  window.onload = function(){
       $("#live2dcanvas").attr("style","position: fixed; opacity: 0.7; left: 70px; bottom: 0px; z-index: 1; pointer-events: none;")
  }
  </script>
  <!--点击冒点-->
  <canvas width="1777" height="841" style="position: fixed; left: 0px; top: 0px; z-index: 2147483647; pointer-events: none;"></canvas><script src="https://blog-static.cnblogs.com/files/elkyo/mouse-click.js"></script>
    </div>
</body>
</html>