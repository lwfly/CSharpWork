<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="分区是数据库管理系统实现并行处理的一种重要手段。MySQL从5.1开始，开始支持分区这一神奇的功能。但是，目前，MySQL做得还不够多(相对于Oracle)，还处于开始阶段，查询优化没有充分利用分区带" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>理解MySQL——并行数据库与分区(Partition) - YY哥 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/classicblue/bundle-classicblue.min.css?v=C_xOBodTdu7qViYoEOWb5uyE0XIl-SuwRkgFEwSDOCc" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/classicblue/bundle-classicblue-mobile.min.css?v=ADiCwO2hOTdd5yYidcx7eob7ix2VJI4o_TXjEycTHjs" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/hustcat/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/hustcat/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/hustcat/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 26761;
        var currentBlogApp = 'hustcat';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'ClassicBlue';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/hustcat/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/hustcat/">YY哥的技术随笔</a>
</h1>
<h2>
——关注Linux、数据库和云计算
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/hustcat/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/YY%E5%93%A5">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/hustcat/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
124&nbsp; </span>
<span id="stats_article_count">文章 - 
114&nbsp; </span>
<span id="stats-comment_count">评论 - 
417</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/hustcat/archive/2009/12/24/1631674.html">理解MySQL——并行数据库与分区(Partition)</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
    <div id="cnblogs_post_description" style="display: none">
        分区是数据库管理系统实现并行处理的一种重要手段。MySQL从5.1开始，开始支持分区这一神奇的功能。但是，目前，MySQL做得还不够多(相对于Oracle)，还处于开始阶段，查询优化没有充分利用分区带来的并行优势；不过，它正在努力，有理由相信它能够做好。早在关系数据库出现初期，并行数据库就随之而生，以Teradata为代表的商业化产品已经得到市场的广泛认可，而且也是数据库系统发展的方向。2003年，MySQL从Ericsson公司取得NDB存储引擎，从此，开始了并行数据库之路。 分区并不等于并行数据库。但是，通过分区，能够为数据库管理系统带来某些并行特性，比如并行I/O，并行查询。也许将并行数据库与NDB Cluster一起讨论会更好。但是，分区与并行本来就有一种天然的联系。了解并行数据库的基本概念，才能真正理解分区；同样，理解分区，又会加深对并行数据库的理解。So，enjoy it。
    </div>
<div id="cnblogs_post_body" class="blogpost-body ">
    <p><span style="color: #0000ff;">1、并行数据库</span></p><p>&nbsp;</p>1.1、并行数据库的体系结构<br />并行机的出现，催生了并行数据库的出现，不对，应该是关系运算本来就是高度可并行的。对数据库系统性能的度量主要有两种方式：(1)吞吐量(Throughput)，在给定的时间段里所能完成的任务数量；(2)响应时间(Response time)，单个任务从提交到完成所需要的时间。对于处理大量小事务的系统，通过并行地处理许多事务可以提高它的吞吐量。对于处理大事务的系统，通过并行的执行事务的子任务，可以缩短系统晌应时间。<br />并行机有三种基本的体系结构，相应的，并行数据库的体系结构也可以大概分为三类：<br />&nbsp;&nbsp; &nbsp;共享内存(share memeory)：所有处理器共享一个公共的存储器；<br />&nbsp;&nbsp; &nbsp;共享磁盘(share disk)：所有处理器共享公共的磁盘；这种结构有时又叫做集群(cluster)；<br />&nbsp;&nbsp; &nbsp;无共享(share nothing)：所有处理器既不共享内存，也不共享磁盘。<br />如图所示：<br /><p><img alt="" src="https://images.cnblogs.com/cnblogs_com/hustcat/mysql/mysql04-01.JPG" width="912" height="356" /></p><p>1.1.1、&nbsp;&nbsp; &nbsp;共享内存<br />该结构包括多个处理器、一个全局共享的内存（主存储器）和多个磁盘存储，各个处理器通过高速通讯网络（Interconnection Network）与共享内存连接，并均可直接访问系统中的一个、多个或全部的磁盘存储，在系统中，所有的内存和磁盘存储均由多个处理器共享。<br />这种结构的优点在于，处理器之间的通信效率极高，访问内存的速度要比消息通信机制要快很多。这种结构的缺点在于，处理器的规模不能超过32个或者64个，因为总线或互边网络是由所有的处理器共享，它会变成瓶颈。当处理器数量到达某一个点时，再增加处理器已经没有什么好处。<br />共享内存结构通常在每个处理器上有很大的高速缓存，从而减少对内存的访问。但是，这些高速缓存必须保持一致，也就是缓存一致性(cache-coherency)的问题。<br />1.1.2、&nbsp;&nbsp; &nbsp;共享磁盘<br />该结构由多个具有独立内存（主存储器）的处理器和多个磁盘存储构成，各个处理器相互之间没有任何直接的信息和数据的交换，多个处理器和磁盘存储由高速通信网络连接，每个处理器都可以读写全部的磁盘存储。<br />共享磁盘与共享内存结构相比，有以下一些优点：(1)每个处理器都有自己的存储器，存储总线不再是瓶颈；(2)以一种较经济的方式提供了容错性(fault tolerence)，如果一个处器发生故障，其它处理器可以代替工作。<br />该结构的主要问题不是在于可扩展性问题，虽然存储总线不是瓶颈，但是，与磁盘之间的连接又成了瓶颈。<br />运行Rdb的DEC集群是共享磁盘的体系结构的早期商用化产品之一(DEC后来被Compaq公司收购，再后来，Oracle又从Compaq手中取得Rdb，发展成现在的Oracle RAC)。<br />1.1.3、&nbsp;&nbsp; &nbsp;无共享<br />该结构由多个完全独立的处理节点构成，每个处理节点具有自己独立的处理器、独立的内存（主存储器）和独立的磁盘存储，多个处理节点在处理器级由高速通信网络连接，系统中的各个处理器使用自己的内存独立地处理自己的数据。<br />这 种结构中，每一个处理节点就是一个小型的数据库系统，多个节点一起构成整个的分布式的并行数据库系统。由于每个处理器使用自己的资源处理自己的数据，不存 在内存和磁盘的争用，提高的整体性能。另外这种结构具有优良的可扩展性&#8212;&#8212;只需增加额外的处理节点，就可以以接近线性的比例增加系统的处理能力。<br />&nbsp;&nbsp;&nbsp; 这种结构中，由于数据是各个处理器私有的，因此系统中数据的分布就需要特殊的处理，以尽量保证系统中各个节点的负载基本平衡，但在目前的数据库领域，这个数据分布问题已经有比较合理的解决方案。<br />由于数据是分布在各个处理节点上的，因此，使用这种结构的并行数据库系统，在扩展时不可避免地会导致数据在整个系统范围内的重分布（Re-Distribution）问题。<br />&nbsp;&nbsp;&nbsp; Shared-Nothing结构的典型代表是Teradata(<span style="color: #0000ff;">并行数据库的先驱</span>)，<span style="color: #0000ff;">值得一提的是，MySQL NDB Cluster也使用了这种结构。</span><br /><br />&nbsp;1.2、I/O并行(I/O Parallelism)<br />I/O并行的最简单形式是通过对关系划分，放置到多个磁盘上来缩减从磁盘读取关系的时间。并行数据库中数据划分最通用的形式是水平划分(horizontal portioning)，一个关系中的元组被划分到多个磁盘。<br />1.2.1、常用划分技术<br />假定将数据划分到n个磁盘D0，D1，&#8230;，Dn中。<br />(1)&nbsp;&nbsp; &nbsp;轮转法(round-bin)。对关系顺序扫描，将第i个元组存储到标号为Di%n的磁盘上；该方式保证了元组在多个磁盘上均匀分布。<br />(2)&nbsp;&nbsp; &nbsp;散列划分(hash partion)。选定一个值域为{0, 1, &#8230;,n-1}的散列函数，对关系中的元组基于划分属性进行散列。如果散列函数返回i，则将其存储到第i个磁盘。<br />(3)&nbsp;&nbsp; &nbsp;范围划分(range partion)。<br />由于将关系存储到多个磁盘，读写时能同时进行，划分(partion)能大大提高系统的读写性能。数据的存取可以分为以下几类：<br />(1)&nbsp;&nbsp; &nbsp;扫描整个关系；<br />(2)&nbsp;&nbsp; &nbsp;点查询(point query)，如name = &#8220;hustcat&#8221;；<br />(3)&nbsp;&nbsp; &nbsp;范围查询(range query)，如 20 &lt; age &lt; 30。<br />不同的划分技术，对这些存取类型的效率是不同的：<br />&nbsp;&nbsp; &nbsp;轮转法适合顺序扫描关系，对点查询和范围查询的处理较复杂。<br />&nbsp;&nbsp; &nbsp;散列划分特别适合点查询，速度最快。<br />&nbsp;&nbsp; &nbsp;范围划分对点查询、范围查询以及顺序扫描都支持较好，所以适用性很广。但是，这种方式存在一个问题&#8212;&#8212;执行偏斜(execution skew)，也就是说某些范围的元组较多，使得大量的I/O出现在某几个磁盘。<br /><br /></p><p>1.3、查询间并行(interquery parallism)<br />查询间并行指的是不同的查询或事务间并行的执行。这种形式的并行可以提高事务的吞吐量，然而，单个事务并不能执行得更快(即响应时间不能减少)。查询间的并行主要用于扩展事务处理系统，在单位时间内能够处理更多的事务。<br />查询间并行是数据库系统最易实现的一种并行，在共享内存的并行系统(如SMP)中尤其这样。为单处理器设计的数据库系统可以不用修改，或者很少修改就能用到共享内存的体系结构。<br />在共享磁盘和无共享的体系结构中，实现查询间并行要更复杂一些。各个处理需要协调来进行封锁、日志操作等等，这就需要处理器之间的传递消息。并行数据库系统必须保证两个处理器不会同时更新同一数据。而且，处理器访问数据时，系统必须保证处理器缓存的数据是最新的数据，即缓存一致性问题。<br /><br />1.4、查询内并行(intraquery parallism)<br />查询内并行是指单个查询要在多个处理器和磁盘上同时进行。为了理解，来考虑一个对某关系进行排序的查询。假设关系已经基于某个属性进行了范围划分，存储于多个磁盘上，并且划分是基于划分属性的。则排序操作可以如下进行：对每个分区并行的排序，然后将各个已经有序的分区合并到一起。<br />单个查询的执行可以有两种并行方式：<br />(1)&nbsp;&nbsp; &nbsp;操作内并行(Intraoperation parallism)：通过并行的执行每一个运算，如排序、选择、连接等，来加快一个查询的处理速度。<br />(2)&nbsp;&nbsp; &nbsp;操作间并行(Interoperation parallism)：通过并行的执行一个查询中的多个不同的运算，来加速度一个查询的处理速度。<br />注意两者间的区别，前者可以认为多个处理器同时执行一个运算，而后者是多个处理器同时执行不同的运算。<br />这两种形式之间的并行是互相补充的，并且可以同时存在于一个查询中。通常由于一个查询中的运算数目相对于元组数目是较小的，所以当并行度增加时，第一种方式取得的效果更显著。<br /><br /><span style="color: #0000ff;">2、MySQL的分区(partion)</span><br />2.1、MySQL分区概述<br />在MySQL中，InnoDB存储引擎长期支持表空间的概念，并且MySQL服务器甚至在分区引入之前，就能配置为存储不同的数据库使用不同的物理路径。分区(partion)更进一步，它允许你通过设置各种规则将一个表的各个分区跨文件系统存储。实际上，不同位置的不同表分区是作为一个单独的表来存储的。用户所选择的、实现数据分割的规则被称为分区函数(partioning function)，这在MySQL中它可以是模数，或者是简单的匹配一个连续的数值区间或数值列表，或者是一个内部HASH函数，或一个线性HASH函数。<br />&nbsp;&nbsp; &nbsp;最常见是的水平分区(horizontal partitioning)，也就是将表的不同的元组分配到不同的物理分区上。目前，MySQL 5.1还不支持垂直分区(vertical partitioning)，即将表的不同列分配到不同的物理分区。你可以使用MySQL支持的大多数存储引擎来创建表的分区，在MySQL 5.1中，同一个表的各个分区必须使用相同的存储引擎，比如，你不能对一个分区使用MyISAM，而对另一个分区使用InnoDB。但是，你可以对同一个数据库的不同的表使用不同的存储引擎。<br />&nbsp;&nbsp; &nbsp;要为某个分区表配置一个专门的存储引擎，必须且只能使用[STORAGE] ENGINE 选项，这如同为非分区表配置存储引擎一样。但是，必须记住[STORAGE] ENGINE（和其他的表选项）必须列在用在CREATE TABLE语句中的其他任何分区选项之前。下面的例子给出了怎样创建一个通过HASH分成6个分区、使用InnoDB存储引擎的表：<br />    </p><table style="border: medium none ; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">  <tr>   <td style="border: 1pt solid windowtext; padding: 0cm 5.4pt; width: 426.1pt;" width="568" valign="top">   <p align="left"><span style="font-size: 12pt; font-family: 宋体; color: black;">CREATE TABLE ti (id   INT, amount DECIMAL(7,2), tr_date DATE)</span></p>   <p align="left"><span style="font-size: 12pt; font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; ENGINE=INNODB</span></p>   <p align="left"><span style="font-size: 12pt; font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; PARTITION BY HASH( MONTH(tr_date) )</span></p>   <p align="left"><span style="font-size: 12pt; font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; PARTITIONS 6;</span></p>   </td>  </tr> </table>  <p>注：分区必须对一个表的所有数据和索引；不能只对数据分区而不对索引分区，反之亦然，同时也不能只对表的一部分进行分区。<br />&nbsp;&nbsp; &nbsp;分区对数据库管理系统实现并行处理有着重要的影响，如果对数据进行分区，则很容易进行并行处理，但是，MySQL还没有充分利用分区的这种并行优势，而这也是它改进的方向 (<span style="color: #0000ff;">这种分治思想深深的影响着并行计算，而且在并行计算方面具有天然优势</span>)。MySQL的分区，会给系统带来以下一些优点：<br />&nbsp;&nbsp; &nbsp;与单个磁盘或文件系统分区相比，单个表可以存储更多的数据。<br />&nbsp;&nbsp; &nbsp;对于那些已经失去保存意义的数据，通常可以通过删除与那些数据有关的分区，很容易地删除那些数据。相反地，在某些情况下，添加新数据的过程又可以通过为那些新数据专门增加一个新的分区，来很方便地实现。<br />&nbsp;&nbsp; &nbsp;对于带Where的条件查询语句，可以得到更大的优化；只需要查询某些分区，而不用扫描全部分区。<br />还有其它一些优点，不过MySQL 5.1还不支持：<br />&nbsp;&nbsp; &nbsp;一些聚合函数，比如SUM() 和COUNT()，能够很容易的并行执行；<br />&nbsp;&nbsp; &nbsp;通过并行I/O，可以大大提高查询的吞吐量。<br />注：<span style="color: #0000ff;">实际上，分区不论是对I/O并行，还是查询内并行，都有着重要的影响。只不过MySQL在这方面做得还不够多(不过，正在改进)，而Oracle对于查询内并行，做了很多工作。</span><br /><br />2.2、分区类型<br />MySQL 5.1中可用的分区类型包括：<br />&nbsp;&nbsp; &nbsp;RANGE分区(portioning)：根据列值所属的范围区间，将元组分配到各个分区。<br />&nbsp;&nbsp; &nbsp;LIST分区：类似于按RANGE分区，区别在于LIST分区是基于列值匹配一个离散值集合中的某个值来进行选择。<br />&nbsp;&nbsp; &nbsp;HASH分区：根据用户定义的函数的返回值来进行选择的分区，该表达式使用将要插入到表中的这些行的列值进行计算。这个函数可以包含MySQL 中有效的、产生非负整数值的任何表达式。<br />&nbsp;&nbsp; &nbsp;KEY分区：类似于按HASH分区，区别在于KEY分区只支持计算一列或多列，且MySQL 服务器提供其自身的哈希函数。<br />2.2.1、范围分区<br />范围分区是通过计算表达式的值所属的范围区间，对元组进行分区。这些区间要求连续且不能相互重叠，使用VALUES LESS THAN操作符来进行定义。在下面的几个例子中，假定你创建了一个如下的一个表，该表保存有20家音像店的职员记录，这20家音像店的编号从1到20。<br />    </p><table style="border: medium none ; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">  <tr>   <td style="border: 1pt solid windowtext; padding: 0cm 5.4pt; width: 426.1pt;" width="568" valign="top">   <p align="left"><span style="font-family: 宋体; color: black;">CREATE TABLE   employees (</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; id INT NOT NULL,</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; fname VARCHAR(30),</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; lname VARCHAR(30),</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; hired DATE NOT NULL DEFAULT '1970-01-01',</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; separated DATE NOT NULL DEFAULT '9999-12-31',</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; job_code INT NOT NULL,</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; store_id INT NOT NULL</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">);</span></p>   </td>  </tr> </table>  <p>你可以根据需要对该表进行各种分区，比如，你可以通过store_id来进行分区：<br />    </p><table style="border: medium none ; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">  <tr>   <td style="border: 1pt solid windowtext; padding: 0cm 5.4pt; width: 426.1pt;" width="568" valign="top">   <p align="left"><span style="font-family: 宋体; color: black;">CREATE TABLE   employees (</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; id INT NOT NULL,</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; fname VARCHAR(30),</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; lname VARCHAR(30),</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; hired DATE NOT NULL DEFAULT '1970-01-01',</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; separated DATE NOT NULL DEFAULT '9999-12-31',</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; job_code INT NOT NULL,</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; store_id INT NOT NULL</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">)</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">PARTITION BY RANGE   (store_id) (</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; PARTITION p0 VALUES LESS THAN (6),</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; PARTITION p1 VALUES LESS THAN (11),</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; PARTITION p2 VALUES LESS THAN (16),</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; PARTITION p3 VALUES LESS THAN (21)</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">);</span></p>   </td>  </tr> </table>  <p>很容易确定数据(72, 'Michael', 'Widenius', '1998-06-25', NULL, 13)被插入分区p2；但是，如果一条数据的store_id = 21，会怎么样呢？由于没有规则处理大于20的情况，所以服务器会报错。你可以通过如下方式来处理这种情况：<br />    </p><table style="border: medium none ; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">  <tr>   <td style="border: 1pt solid windowtext; padding: 0cm 5.4pt; width: 426.1pt;" width="568" valign="top">   <p align="left"><span style="font-family: 宋体; color: black;">CREATE TABLE   employees (</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; id INT NOT NULL,</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; fname VARCHAR(30),</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp;lname VARCHAR(30),</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; hired DATE NOT NULL DEFAULT '1970-01-01',</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; separated DATE NOT NULL DEFAULT '9999-12-31',</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; job_code INT NOT NULL,</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; store_id INT NOT NULL</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">)</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">PARTITION BY RANGE   (store_id) (</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; PARTITION p0 VALUES LESS THAN (6),</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; PARTITION p1 VALUES LESS THAN (11),</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; PARTITION p2 VALUES LESS THAN (16),</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; <em>PARTITION p3 VALUES LESS THAN MAXVALUE</em></span></p>   <p align="left"><span style="font-family: 宋体; color: black;">);</span></p>   </td>  </tr> </table>  <p>MAXVALUE 表示最大的可能的整数值。现在，store_id 列值大于或等于16（定义了的最高值）的所有行都将保存在分区p3中。在将来的某个时候，当商店数已经增长到25, 30, 或更多 ，可以使用ALTER TABLE语句为商店21-25, 26-30,等等增加新的分区<br />RANGE分区在如下场合特别有用：<br />(1)&nbsp;&nbsp; &nbsp;当需要删除&#8220;旧的&#8221;数据时。 在上面的例子中，你只需简单地使用 &#8220;ALTER TABLE employees DROP PARTITION p0；&#8221;来删除所有在1991年前就已经停止工作的雇员相对应的所有行。对于有大量行的表，这比运行一个如&#8220;DELETE FROM employees WHERE YEAR(separated) &lt;= 1990；&#8221;这样的一个DELETE查询要有效得多。<br />(2)&nbsp;&nbsp; &nbsp;经常依赖于分区属性进行查询。例如，当执行一个如&#8220;SELECT COUNT(*) FROM employees WHERE YEAR(separated) = 2000 GROUP BY store_id；&#8221;这样的查询时，MySQL可以很迅速地确定只有分区p2需要扫描，这是因为余下的分区不可能包含有符合该WHERE子句的任何记录。注：这种优化还没有在MySQL 5.1源程序中启用，但是，有关工作正在进行中。<br />范围分区的缺点就是容易出现执行偏斜，这会影响系统性能。<br />2.2.2、HASH分区<br />HASH分区主要用来确保数据在预先确定数目的分区中平均分布。在RANGE和LIST分区中，必须明确指定一个给定的列值或列值集合应该保存在哪个分区中；而在HASH分区中，MySQL 自动完成这些工作，你所要做的只是基于将要被哈希的列值指定一个列值或表达式，以及指定被分区的表将要被分割成的分区数量。<br />你可以通过要在CREATE TABLE 语句上添加一个&#8220;PARTITION BY HASH (expr)&#8221;子句，其中&#8220;expr&#8221;是一个返回一个整数的表达式。它可以仅仅是字段类型为MySQL 整型的一列的名字。此外，你很可能需要在后面再添加一个&#8220;PARTITIONS num&#8221;子句，其中num 是一个非负的整数，它表示表将要被分割成分区的数量。比如：<br />    </p><table style="border: medium none ; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">  <tr style="height: 27.15pt;">   <td style="border: 1pt solid windowtext; padding: 0cm 5.4pt; width: 426.1pt; height: 27.15pt;" width="568" valign="top">   <p align="left"><span style="font-family: 宋体; color: black;">CREATE TABLE   employees (</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; id INT NOT NULL,</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; fname VARCHAR(30),</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; lname VARCHAR(30),</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; hired DATE NOT NULL DEFAULT '1970-01-01',</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; separated DATE NOT NULL DEFAULT '9999-12-31',</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; job_code INT,</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">&nbsp;&nbsp;&nbsp; store_id INT</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">)</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">PARTITION BY   HASH(store_id)</span></p>   <p align="left"><span style="font-family: 宋体; color: black;">PARTITIONS 4;</span></p>   </td>  </tr> </table>  <p>如果没有PARTITIONS语句，默认分区数为1。但是，PARTITIONS后面没有数字，系统会报错。<br />相对于范围分区，HASH分区更可能保证数据均衡分布。<br />2.2.3、子分区(Subpartitioning)<br />子分区，也叫做复合分区(composite partitioning)，是对分区表的每个分区的进一步分割。例如，<br />    </p><table style="border: medium none ; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">  <tr>   <td style="border: 1pt solid windowtext; padding: 0cm 5.4pt; width: 426.1pt;" width="568" valign="top">   <p>CREATE TABLE ts (id INT, purchased DATE)</p>   <p><span><span>&nbsp;&nbsp;&nbsp;   </span>PARTITION BY RANGE( YEAR(purchased) )</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;   </span>SUBPARTITION BY HASH( TO_DAYS(purchased) )</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;   </span>SUBPARTITIONS 2 (</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>PARTITION p0 VALUES LESS THAN (1990),</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>PARTITION p1 VALUES LESS THAN (2000),</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>PARTITION p2 VALUES LESS THAN MAXVALUE</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;   </span>);</span></p>   </td>  </tr> </table>  <p>表ts 有3个RANGE分区。这3个分区中的每一个分区&#8212;&#8212;p0, p1, 和 p2 &#8212;&#8212;又被进一步分成了2个子分区。实际上，整个表被分成了3 * 2 = 6个分区。但是，由于PARTITION BY RANGE子句的作用，这些分区的头2个只保存&#8220;purchased&#8221;列中值小于1990的那些记录。<br />在MySQL 5.1中，对于已经通过RANGE或LIST分区了的表再进行分区。子分区既可以使用HASH希分区，也可以使用KEY分区。<br />为了对个别的子分区指定选项，使用SUBPARTITION&nbsp; 子句来明确定义子分区也是可能的。例如，创建在前面例子中给出的同一个表的、一个更加详细的方式如下：<br />    </p><table style="border: medium none ; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">  <tr>   <td style="border: 1pt solid windowtext; padding: 0cm 5.4pt; width: 426.1pt;" width="568" valign="top">   <p>CREATE TABLE ts (id INT, purchased DATE)</p>   <p><span><span>&nbsp;&nbsp;&nbsp;   </span>PARTITION BY RANGE( YEAR(purchased) )</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;   </span>SUBPARTITION BY HASH( TO_DAYS(purchased) ) (</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>PARTITION p0 VALUES LESS THAN (1990) (</span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SUBPARTITION s0,</span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SUBPARTITION s1</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>),</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>PARTITION p1 VALUES LESS THAN (2000) (</span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SUBPARTITION s2,</span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SUBPARTITION s3</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>),</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>PARTITION p2 VALUES LESS THAN MAXVALUE (</span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SUBPARTITION s4,</span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SUBPARTITION s5</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>)</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;   </span>);</span></p>   </td>  </tr> </table>  <p>一些注意点：<br />(1)&nbsp;&nbsp; &nbsp;每个分区的子分区数必须相同；<br />(2)&nbsp;&nbsp; &nbsp;如果在一个分区表上的任何分区上使用SUBPARTITION 来明确定义任何子分区，那么就必须定义所有的子分区；<br />(3)&nbsp;&nbsp; &nbsp;每个SUBPARTITION子句必须包含一个子分区的名称；<br />(4)&nbsp;&nbsp; &nbsp;MySQL 5.1.7及之前的版本，每个分区的子分区的名称必须唯一，但是在整个表中，没有必要唯一。从MySQL 5.1.8开始，子分区的名称在整个表中都必须唯一。<br />子分区可以用于特别大的表，在多个磁盘间分配数据和索引。假设有6个磁盘，分别为/disk0， /disk1， /disk2等，对于如下例子：<br />    </p><table style="border: medium none ; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">  <tr>   <td style="border: 1pt solid windowtext; padding: 0cm 5.4pt; width: 426.1pt;" width="568" valign="top">   <p>CREATE TABLE ts (id INT, purchased DATE)</p>   <p><span><span>&nbsp;&nbsp;&nbsp;   </span>PARTITION BY RANGE( YEAR(purchased) )</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;   </span>SUBPARTITION BY HASH( TO_DAYS(purchased) ) (</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>PARTITION p0 VALUES LESS THAN (1990) (</span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SUBPARTITION s0 </span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DATA DIRECTORY =   '/disk0/data' </span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INDEX DIRECTORY =   '/disk0/idx',</span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SUBPARTITION s1 </span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DATA DIRECTORY =   '/disk1/data' </span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INDEX DIRECTORY =   '/disk1/idx'</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>),</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>PARTITION p1 VALUES LESS THAN (2000) (</span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SUBPARTITION s2 </span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DATA DIRECTORY =   '/disk2/data' </span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INDEX DIRECTORY =   '/disk2/idx',</span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SUBPARTITION s3 </span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DATA DIRECTORY =   '/disk3/data' </span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INDEX DIRECTORY =   '/disk3/idx'</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>),</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>PARTITION p2 VALUES LESS THAN MAXVALUE (</span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SUBPARTITION s4 </span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DATA DIRECTORY =   '/disk4/data' </span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INDEX DIRECTORY =   '/disk4/idx',</span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SUBPARTITION s5 </span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DATA DIRECTORY =   '/disk5/data' </span></p>   <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INDEX DIRECTORY = '/disk5/idx'</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>)</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;   </span>);</span></p>   </td>  </tr> </table>  <p><br /><span style="color: #0000ff;">3、体验分区</span><br />下面通过例子来体验分区：<br />(1)创建如下分区表：<br />    </p><table style="border: medium none ; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">  <tr>   <td style="border: 1pt solid windowtext; padding: 0cm 5.4pt; width: 426.1pt;" width="568" valign="top">   <p>CREATE TABLE part_tab</p>   <p>(&nbsp;c1 int default NULL,</p>   <p>c2 varchar(30) default NULL,</p>   <p>c3 date default NULL</p>   <p>) engine=myisam</p>   <p><span>PARTITION BY RANGE (year(c3)) (PARTITION p0   VALUES LESS THAN (1995),</span></p>   <p><span>PARTITION p1 VALUES LESS THAN (1996) ,   PARTITION p2 VALUES LESS THAN (1997) ,</span></p>   <p><span>PARTITION p3 VALUES LESS THAN (1998) ,   PARTITION p4 VALUES LESS THAN (1999) ,</span></p>   <p><span>PARTITION p5 VALUES LESS THAN (2000) ,   PARTITION p6 VALUES LESS THAN (2001) ,</span></p>   <p><span>PARTITION p7 VALUES LESS THAN (2002) ,   PARTITION p8 VALUES LESS THAN (2003) ,</span></p>   <p><span>PARTITION p9 VALUES LESS THAN (2004) ,   PARTITION p10 VALUES LESS THAN (2010),</span></p>   <p><span>PARTITION p11 VALUES LESS THAN MAXVALUE   );</span></p>   </td>  </tr> </table>  <p>    </p><p>(2)<span style="font-family: 宋体;">创建一个不分区的表：</span></p>  <table style="border: medium none ; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">  <tr>   <td style="border: 1pt solid windowtext; padding: 0cm 5.4pt; width: 426.1pt;" width="568" valign="top">   <p>create table no_part_tab</p>   <p>(c1 int(11) default NULL,</p>   <p>c2 varchar(30) default NULL,</p>   <p>c3 date default NULL</p>   <p>) engine=myisam;</p>   </td>  </tr> </table>  <p style="margin-left: 18pt; text-indent: -18pt;"><span><span>(1)<span style="font-family: &quot;Times New Roman&quot;; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;">&nbsp;&nbsp;&nbsp; </span></span></span><span style="font-family: 宋体;">创建一个生成</span>8000000<span style="font-family: 宋体;">行数据的存储过程：</span></p>  <table style="border: medium none ; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">  <tr>   <td style="border: 1pt solid windowtext; padding: 0cm 5.4pt; width: 426.1pt;" width="568" valign="top">   <p>delimiter //</p>   <p>CREATE PROCEDURE load_part_tab()</p>   <p>begin</p>   <p>declare v int default 0;</p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>while v &lt; 8000000</span></p>   <p>&nbsp;do</p>   <p>&nbsp;insert into part_tab</p>   <p><span>&nbsp;values (v,'testing partitions',adddate('1995-01-01',(rand(v)*36520)   mod 3652));</span></p>   <p>&nbsp;set v = v + 1;</p>   <p>&nbsp;end while;</p>   <p>&nbsp;end</p>   <p>&nbsp;//</p>   </td>  </tr> </table>  <p style="margin-left: 18pt; text-indent: -18pt;"><span><span>(2)<span style="font-family: &quot;Times New Roman&quot;; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;">&nbsp;&nbsp;&nbsp; </span></span></span><span style="font-family: 宋体;">调用存储过程，生成数据：</span></p>  <table style="border: medium none ; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">  <tr>   <td style="border: 1pt solid windowtext; padding: 0cm 5.4pt; width: 426.1pt;" width="568" valign="top">   <p>mysql&gt; delimiter ;</p>   <p>mysql&gt; call load_part_tab();</p>   <p><span>Query OK, 1 row affected (6 min 35.39   sec)</span></p>   </td>  </tr> </table>  <p>(5)</p>  <table style="border: medium none ; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">  <tr>   <td style="border: 1pt solid windowtext; padding: 0cm 5.4pt; width: 426.1pt;" width="568" valign="top">   <p><span>mysql&gt; insert into no_part_tab select   * from part_tab;</span></p>   <p><span>Query OK, 8000000 rows affected (40.98   sec)</span></p>   <p>Records: 8000000&nbsp;Duplicates: 0&nbsp;Warnings: 0</p>   </td>  </tr> </table>  <p>&nbsp;</p>  <p><span style="font-family: 宋体;">数据准备好了，下面开始测试：</span></p>  <p>(6)</p>  <table style="border: medium none ; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">  <tr>   <td style="border: 1pt solid windowtext; padding: 0cm 5.4pt; width: 426.1pt;" width="568" valign="top">   <p><span>mysql&gt; select count(*) from   no_part_tab where</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;   </span>-&gt; c3 &gt; date '1995-01-01' and c3 &lt;   date '1995-12-31';</span></p>   <p>+----------+</p>   <p>| count(*) |</p>   <p>+----------+</p>   <p><span>|<span>&nbsp;&nbsp;   </span>795181 |</span></p>   <p>+----------+</p>   <p><span style="color: blue;">1 row in set (4.23   sec)</span></p>   <p>&nbsp;</p>   <p><span>mysql&gt; select count(*) from part_tab   where</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;   </span>-&gt; c3 &gt; date '1995-01-01' and c3 &lt;   date '1995-12-31';</span></p>   <p>+----------+</p>   <p>| count(*) |</p>   <p>+----------+</p>   <p><span>|<span>&nbsp;&nbsp;   </span>795181 |</span></p>   <p>+----------+</p>   <p><span style="color: blue;">1 row in set (0.55   sec)</span></p>   </td>  </tr> </table>  <p><span style="font-family: 宋体;">速度差异很明显；下面看一下查询计划：</span></p>  <p>(8)</p>  <table style="border: medium none ; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0" width="729" height="681">  <tr>   <td style="border: 1pt solid windowtext; padding: 0cm 5.4pt; width: 426.1pt;" width="568" valign="top">   <p><span>mysql&gt; explain select count(*) from   no_part_tab where</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;   </span>-&gt; c3 &gt; date '1995-01-01' and c3 &lt;   date '1995-12-31'\G</span></p>   <p><span>*************************** 1. row   ***************************</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>id: 1</span></p>   <p>&nbsp;select_type: SIMPLE</p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>table: no_part_tab</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>type: ALL</span></p>   <p>possible_keys: NULL</p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>key: NULL</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>key_len: NULL</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>ref: NULL</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>rows: 8000000</span></p>   <p><span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span>Extra: Using where</span></p>   <p>1 row in set (0.00 sec)</p>   <p>&nbsp;</p>   <p><span></span></p>mysql&gt; explain partitions select count(*) from part_tab where c3 &gt; date '1995-01<br />-01' and c3 &lt; date '1995-12-31'\G<br />*************************** 1. row ***************************<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; id: 1<br />&nbsp; select_type: SIMPLE<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; table: part_tab<br />&nbsp;&nbsp; partitions: p1<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type: ALL<br />possible_keys: NULL<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; key: NULL<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; key_len: NULL<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ref: NULL<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: red;"> rows: 8000000&nbsp; #why??</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Extra: Using where<br />1 row in set (0.00 sec)<p>&nbsp;</p>   </td>  </tr> </table>  <p><br /></p><p>附SQL语句：</p><div class="cnblogs_code" onclick="cnblogs_code_show('bbe5c084-6fd9-4518-abea-ac014a374ba9')"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" class="code_img_closed" id="code_img_closed_bbe5c084-6fd9-4518-abea-ac014a374ba9" alt="" /><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" class="code_img_opened" id="code_img_opened_bbe5c084-6fd9-4518-abea-ac014a374ba9" onclick="cnblogs_code_hide('bbe5c084-6fd9-4518-abea-ac014a374ba9',event)" style="display: none;"><span class="cnblogs_code_collapse">代码</span><div id="cnblogs_code_open_bbe5c084-6fd9-4518-abea-ac014a374ba9" class="cnblogs_code_hide"><div><!--<br/ /><br/ />Code highlighting produced by Actipro CodeHighlighter (freeware)<br/ />http://www.CodeHighlighter.com/<br/ /><br/ />--><span style="color: #008080;">&nbsp;1</span>&nbsp;<span style="color: #0000ff;">CREATE</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000ff;">TABLE</span><span style="color: #000000;">&nbsp;part_tab<br /></span><span style="color: #008080;">&nbsp;2</span>&nbsp;<span style="color: #000000;">(&nbsp;&nbsp;c1&nbsp;</span><span style="color: #0000ff;">int</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000ff;">default</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000ff;">NULL</span><span style="color: #000000;">,<br /></span><span style="color: #008080;">&nbsp;3</span>&nbsp;<span style="color: #000000;">c2&nbsp;</span><span style="color: #0000ff;">varchar</span><span style="color: #000000;">(</span><span style="color: #800000; font-weight: bold;">30</span><span style="color: #000000;">)&nbsp;</span><span style="color: #0000ff;">default</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000ff;">NULL</span><span style="color: #000000;">,<br /></span><span style="color: #008080;">&nbsp;4</span>&nbsp;<span style="color: #000000;">c3&nbsp;date&nbsp;</span><span style="color: #0000ff;">default</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000ff;">NULL</span><span style="color: #000000;"><br /></span><span style="color: #008080;">&nbsp;5</span>&nbsp;<span style="color: #000000;">)&nbsp;engine</span><span style="color: #808080;">=</span><span style="color: #000000;">myisam<br /></span><span style="color: #008080;">&nbsp;6</span>&nbsp;<span style="color: #000000;">PARTITION&nbsp;</span><span style="color: #0000ff;">BY</span><span style="color: #000000;">&nbsp;RANGE&nbsp;(</span><span style="color: #ff00ff;">year</span><span style="color: #000000;">(c3))&nbsp;<br /></span><span style="color: #008080;">&nbsp;7</span>&nbsp;<span style="color: #000000;">(<br /></span><span style="color: #008080;">&nbsp;8</span>&nbsp;<span style="color: #000000;">PARTITION&nbsp;p0&nbsp;</span><span style="color: #0000ff;">VALUES</span><span style="color: #000000;">&nbsp;LESS&nbsp;THAN&nbsp;(</span><span style="color: #800000; font-weight: bold;">1995</span><span style="color: #000000;">),<br /></span><span style="color: #008080;">&nbsp;9</span>&nbsp;<span style="color: #000000;">PARTITION&nbsp;p1&nbsp;</span><span style="color: #0000ff;">VALUES</span><span style="color: #000000;">&nbsp;LESS&nbsp;THAN&nbsp;(</span><span style="color: #800000; font-weight: bold;">1996</span><span style="color: #000000;">)&nbsp;,&nbsp;<br /></span><span style="color: #008080;">10</span>&nbsp;<span style="color: #000000;">PARTITION&nbsp;p2&nbsp;</span><span style="color: #0000ff;">VALUES</span><span style="color: #000000;">&nbsp;LESS&nbsp;THAN&nbsp;(</span><span style="color: #800000; font-weight: bold;">1997</span><span style="color: #000000;">)&nbsp;,<br /></span><span style="color: #008080;">11</span>&nbsp;<span style="color: #000000;">PARTITION&nbsp;p3&nbsp;</span><span style="color: #0000ff;">VALUES</span><span style="color: #000000;">&nbsp;LESS&nbsp;THAN&nbsp;(</span><span style="color: #800000; font-weight: bold;">1998</span><span style="color: #000000;">)&nbsp;,<br /></span><span style="color: #008080;">12</span>&nbsp;<span style="color: #000000;">PARTITION&nbsp;p4&nbsp;</span><span style="color: #0000ff;">VALUES</span><span style="color: #000000;">&nbsp;LESS&nbsp;THAN&nbsp;(</span><span style="color: #800000; font-weight: bold;">1999</span><span style="color: #000000;">),<br /></span><span style="color: #008080;">13</span>&nbsp;<span style="color: #000000;">PARTITION&nbsp;p5&nbsp;</span><span style="color: #0000ff;">VALUES</span><span style="color: #000000;">&nbsp;LESS&nbsp;THAN&nbsp;(</span><span style="color: #800000; font-weight: bold;">2000</span><span style="color: #000000;">)&nbsp;,&nbsp;<br /></span><span style="color: #008080;">14</span>&nbsp;<span style="color: #000000;">PARTITION&nbsp;p6&nbsp;</span><span style="color: #0000ff;">VALUES</span><span style="color: #000000;">&nbsp;LESS&nbsp;THAN&nbsp;(</span><span style="color: #800000; font-weight: bold;">2001</span><span style="color: #000000;">)&nbsp;,<br /></span><span style="color: #008080;">15</span>&nbsp;<span style="color: #000000;">PARTITION&nbsp;p7&nbsp;</span><span style="color: #0000ff;">VALUES</span><span style="color: #000000;">&nbsp;LESS&nbsp;THAN&nbsp;(</span><span style="color: #800000; font-weight: bold;">2002</span><span style="color: #000000;">)&nbsp;,&nbsp;<br /></span><span style="color: #008080;">16</span>&nbsp;<span style="color: #000000;">PARTITION&nbsp;p8&nbsp;</span><span style="color: #0000ff;">VALUES</span><span style="color: #000000;">&nbsp;LESS&nbsp;THAN&nbsp;(</span><span style="color: #800000; font-weight: bold;">2003</span><span style="color: #000000;">)&nbsp;,<br /></span><span style="color: #008080;">17</span>&nbsp;<span style="color: #000000;">PARTITION&nbsp;p9&nbsp;</span><span style="color: #0000ff;">VALUES</span><span style="color: #000000;">&nbsp;LESS&nbsp;THAN&nbsp;(</span><span style="color: #800000; font-weight: bold;">2004</span><span style="color: #000000;">)&nbsp;,&nbsp;<br /></span><span style="color: #008080;">18</span>&nbsp;<span style="color: #000000;">PARTITION&nbsp;p10&nbsp;</span><span style="color: #0000ff;">VALUES</span><span style="color: #000000;">&nbsp;LESS&nbsp;THAN&nbsp;(</span><span style="color: #800000; font-weight: bold;">2010</span><span style="color: #000000;">),<br /></span><span style="color: #008080;">19</span>&nbsp;<span style="color: #000000;">PARTITION&nbsp;p11&nbsp;</span><span style="color: #0000ff;">VALUES</span><span style="color: #000000;">&nbsp;LESS&nbsp;THAN&nbsp;MAXVALUE&nbsp;<br /></span><span style="color: #008080;">20</span>&nbsp;<span style="color: #000000;">);<br /></span><span style="color: #008080;">21</span>&nbsp;<span style="color: #000000;"><br /></span><span style="color: #008080;">22</span>&nbsp;<span style="color: #000000;"><br /></span><span style="color: #008080;">23</span>&nbsp;<span style="color: #000000;"></span><span style="color: #0000ff;">create</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000ff;">table</span><span style="color: #000000;">&nbsp;no_part_tab<br /></span><span style="color: #008080;">24</span>&nbsp;<span style="color: #000000;">(c1&nbsp;</span><span style="color: #0000ff;">int</span><span style="color: #000000;">(</span><span style="color: #800000; font-weight: bold;">11</span><span style="color: #000000;">)&nbsp;</span><span style="color: #0000ff;">default</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000ff;">NULL</span><span style="color: #000000;">,<br /></span><span style="color: #008080;">25</span>&nbsp;<span style="color: #000000;">c2&nbsp;</span><span style="color: #0000ff;">varchar</span><span style="color: #000000;">(</span><span style="color: #800000; font-weight: bold;">30</span><span style="color: #000000;">)&nbsp;</span><span style="color: #0000ff;">default</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000ff;">NULL</span><span style="color: #000000;">,<br /></span><span style="color: #008080;">26</span>&nbsp;<span style="color: #000000;">c3&nbsp;date&nbsp;</span><span style="color: #0000ff;">default</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000ff;">NULL</span><span style="color: #000000;"><br /></span><span style="color: #008080;">27</span>&nbsp;<span style="color: #000000;">)&nbsp;engine</span><span style="color: #808080;">=</span><span style="color: #000000;">myisam;<br /></span><span style="color: #008080;">28</span>&nbsp;<span style="color: #000000;"><br /></span><span style="color: #008080;">29</span>&nbsp;<span style="color: #000000;"><br /></span><span style="color: #008080;">30</span>&nbsp;<span style="color: #000000;">delimiter&nbsp;</span><span style="color: #808080;">//</span><span style="color: #000000;"><br /></span><span style="color: #008080;">31</span>&nbsp;<span style="color: #000000;"></span><span style="color: #0000ff;">CREATE</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000ff;">PROCEDURE</span><span style="color: #000000;">&nbsp;load_part_tab()<br /></span><span style="color: #008080;">32</span>&nbsp;<span style="color: #000000;"></span><span style="color: #0000ff;">begin</span><span style="color: #000000;"><br /></span><span style="color: #008080;">33</span>&nbsp;<span style="color: #000000;"></span><span style="color: #0000ff;">declare</span><span style="color: #000000;">&nbsp;v&nbsp;</span><span style="color: #0000ff;">int</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000ff;">default</span><span style="color: #000000;">&nbsp;</span><span style="color: #800000; font-weight: bold;">0</span><span style="color: #000000;">;<br /></span><span style="color: #008080;">34</span>&nbsp;<span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff;">while</span><span style="color: #000000;">&nbsp;v&nbsp;</span><span style="color: #808080;">&lt;</span><span style="color: #000000;">&nbsp;</span><span style="color: #800000; font-weight: bold;">8000000</span><span style="color: #000000;"><br /></span><span style="color: #008080;">35</span>&nbsp;<span style="color: #000000;">&nbsp;&nbsp;do<br /></span><span style="color: #008080;">36</span>&nbsp;<span style="color: #000000;">&nbsp;&nbsp;</span><span style="color: #0000ff;">insert</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000ff;">into</span><span style="color: #000000;">&nbsp;part_tab(c1,c2,c3)<br /></span><span style="color: #008080;">37</span>&nbsp;<span style="color: #000000;">&nbsp;&nbsp;</span><span style="color: #0000ff;">values</span><span style="color: #000000;">&nbsp;(v,</span><span style="color: #ff0000;">'</span><span style="color: #ff0000;">testing&nbsp;partitions</span><span style="color: #ff0000;">'</span><span style="color: #000000;">,adddate(</span><span style="color: #ff0000;">'</span><span style="color: #ff0000;">1995-01-01</span><span style="color: #ff0000;">'</span><span style="color: #000000;">,(</span><span style="color: #ff00ff;">rand</span><span style="color: #000000;">(v)</span><span style="color: #808080;">*</span><span style="color: #800000; font-weight: bold;">36520</span><span style="color: #000000;">)&nbsp;mod&nbsp;</span><span style="color: #800000; font-weight: bold;">3652</span><span style="color: #000000;">));<br /></span><span style="color: #008080;">38</span>&nbsp;<span style="color: #000000;">&nbsp;&nbsp;</span><span style="color: #0000ff;">set</span><span style="color: #000000;">&nbsp;v&nbsp;</span><span style="color: #808080;">=</span><span style="color: #000000;">&nbsp;v&nbsp;</span><span style="color: #808080;">+</span><span style="color: #000000;">&nbsp;</span><span style="color: #800000; font-weight: bold;">1</span><span style="color: #000000;">;<br /></span><span style="color: #008080;">39</span>&nbsp;<span style="color: #000000;">&nbsp;&nbsp;</span><span style="color: #0000ff;">end</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000ff;">while</span><span style="color: #000000;">;<br /></span><span style="color: #008080;">40</span>&nbsp;<span style="color: #000000;">&nbsp;&nbsp;</span><span style="color: #0000ff;">end</span><span style="color: #000000;"><br /></span><span style="color: #008080;">41</span>&nbsp;<span style="color: #000000;"></span><span style="color: #808080;">//</span><span style="color: #000000;"><br /></span><span style="color: #008080;">42</span>&nbsp;<span style="color: #000000;"><br /></span><span style="color: #008080;">43</span>&nbsp;<span style="color: #000000;">delimiter&nbsp;;<br /></span><span style="color: #008080;">44</span>&nbsp;<span style="color: #000000;">call&nbsp;load_part_tab();<br /></span><span style="color: #008080;">45</span>&nbsp;<span style="color: #000000;">explain&nbsp;</span><span style="color: #0000ff;">select</span><span style="color: #000000;">&nbsp;</span><span style="color: #ff00ff;">count</span><span style="color: #000000;">(</span><span style="color: #808080;">*</span><span style="color: #000000;">)&nbsp;</span><span style="color: #0000ff;">from</span><span style="color: #000000;">&nbsp;no_part_tab&nbsp;</span><span style="color: #0000ff;">where</span><span style="color: #000000;"><br /></span><span style="color: #008080;">46</span>&nbsp;<span style="color: #000000;">c3&nbsp;</span><span style="color: #808080;">&gt;</span><span style="color: #000000;">&nbsp;date&nbsp;</span><span style="color: #ff0000;">'</span><span style="color: #ff0000;">1995-01-01</span><span style="color: #ff0000;">'</span><span style="color: #000000;">&nbsp;</span><span style="color: #808080;">and</span><span style="color: #000000;">&nbsp;c3&nbsp;</span><span style="color: #808080;">&lt;</span><span style="color: #000000;">&nbsp;date&nbsp;</span><span style="color: #ff0000;">'</span><span style="color: #ff0000;">1995-12-31</span><span style="color: #ff0000;">'</span><span style="color: #000000;">;<br /></span><span style="color: #008080;">47</span>&nbsp;<span style="color: #000000;"><br /></span><span style="color: #008080;">48</span>&nbsp;<span style="color: #000000;">explain&nbsp;</span><span style="color: #0000ff;">select</span><span style="color: #000000;">&nbsp;</span><span style="color: #ff00ff;">count</span><span style="color: #000000;">(</span><span style="color: #808080;">*</span><span style="color: #000000;">)&nbsp;</span><span style="color: #0000ff;">from</span><span style="color: #000000;">&nbsp;part_tab&nbsp;</span><span style="color: #0000ff;">where</span><span style="color: #000000;"><br /></span><span style="color: #008080;">49</span>&nbsp;<span style="color: #000000;">c3&nbsp;</span><span style="color: #808080;">&gt;</span><span style="color: #000000;">&nbsp;date&nbsp;</span><span style="color: #ff0000;">'</span><span style="color: #ff0000;">1995-01-01</span><span style="color: #ff0000;">'</span><span style="color: #000000;">&nbsp;</span><span style="color: #808080;">and</span><span style="color: #000000;">&nbsp;c3&nbsp;</span><span style="color: #808080;">&lt;</span><span style="color: #000000;">&nbsp;date&nbsp;</span><span style="color: #ff0000;">'</span><span style="color: #ff0000;">1995-12-31</span><span style="color: #ff0000;">'</span><span style="color: #000000;">;<br /></span><span style="color: #008080;">50</span>&nbsp;<span style="color: #000000;"><br /></span><span style="color: #008080;">51</span>&nbsp;<span style="color: #000000;"><br /></span><span style="color: #008080;">52</span>&nbsp;<span style="color: #000000;"><br /></span><span style="color: #008080;">53</span>&nbsp;<span style="color: #000000;"><br /></span><span style="color: #008080;">54</span>&nbsp;<span style="color: #000000;"></span><span style="color: #0000ff;">CREATE</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000ff;">TABLE</span><span style="color: #000000;">&nbsp;part_tab2<br /></span><span style="color: #008080;">55</span>&nbsp;<span style="color: #000000;">(&nbsp;&nbsp;<br /></span><span style="color: #008080;">56</span>&nbsp;<span style="color: #000000;">c1&nbsp;</span><span style="color: #0000ff;">int</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000ff;">default</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000ff;">NULL</span><span style="color: #000000;"><br /></span><span style="color: #008080;">57</span>&nbsp;<span style="color: #000000;">)&nbsp;engine</span><span style="color: #808080;">=</span><span style="color: #000000;">myisam<br /></span><span style="color: #008080;">58</span>&nbsp;<span style="color: #000000;">PARTITION&nbsp;</span><span style="color: #0000ff;">BY</span><span style="color: #000000;">&nbsp;RANGE&nbsp;(c1)&nbsp;<br /></span><span style="color: #008080;">59</span>&nbsp;<span style="color: #000000;">(<br /></span><span style="color: #008080;">60</span>&nbsp;<span style="color: #000000;">PARTITION&nbsp;p0&nbsp;</span><span style="color: #0000ff;">VALUES</span><span style="color: #000000;">&nbsp;LESS&nbsp;THAN&nbsp;(</span><span style="color: #800000; font-weight: bold;">5</span><span style="color: #000000;">),<br /></span><span style="color: #008080;">61</span>&nbsp;<span style="color: #000000;">PARTITION&nbsp;p1&nbsp;</span><span style="color: #0000ff;">VALUES</span><span style="color: #000000;">&nbsp;LESS&nbsp;THAN&nbsp;(</span><span style="color: #800000; font-weight: bold;">10</span><span style="color: #000000;">),<br /></span><span style="color: #008080;">62</span>&nbsp;<span style="color: #000000;">PARTITION&nbsp;p2&nbsp;</span><span style="color: #0000ff;">VALUES</span><span style="color: #000000;">&nbsp;LESS&nbsp;THAN&nbsp;MAXVALUE<br /></span><span style="color: #008080;">63</span>&nbsp;<span style="color: #000000;">);<br /></span><span style="color: #008080;">64</span>&nbsp;<span style="color: #000000;"><br /></span><span style="color: #008080;">65</span>&nbsp;<span style="color: #000000;"></span><span style="color: #0000ff;">insert</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000ff;">into</span><span style="color: #000000;">&nbsp;part_tab2&nbsp;</span><span style="color: #0000ff;">values</span><span style="color: #000000;">(</span><span style="color: #800000; font-weight: bold;">2</span><span style="color: #000000;">),(</span><span style="color: #800000; font-weight: bold;">3</span><span style="color: #000000;">);</span></div></div></div><p><br /></p><p>&nbsp;</p><p>&nbsp;</p>主要参考：《MySQL Manual》 
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2009-12-24 21:36</span>&nbsp;
<a href="https://www.cnblogs.com/hustcat/">YY哥</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=1631674" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(1631674);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 26761, cb_blogApp = 'hustcat', cb_blogUserGuid = 'a9743d0b-63cf-dd11-9e4d-001cf0cd104b';
    var cb_entryId = 1631674, cb_entryCreatedDate = '2009-12-24 21:36', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 YY哥
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>