<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="前言 曾经听到过这样一句话：不会 就不要敲代码了。细细品味确实有其中的道理，可能是当事人代码被强行覆盖后的叹息吧！ 因此，为了避免这种情况，接下来我们就一起来好好学习 的相关知识吧！不怕你不会，就怕你" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Git应用详解第一讲：Git分区，配置与日志 - AhuntSun - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/AhuntSun-blog/custom.css?v=aQxv9ugmgmxj9aI02HToOmJXaLs=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=-Yh290MhQyDeXLmvKTSses9H6-49lqbpXFh55zvS0w8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/AhuntSun-blog/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/AhuntSun-blog/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/AhuntSun-blog/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 555013;
        var currentBlogApp = 'AhuntSun-blog';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'Custom';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
         
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/AhuntSun-blog/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/AhuntSun-blog/">AhuntSun</a>
</h1>
<h2>
Talk is cheap, Show me the code.
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/AhuntSun-blog/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/AhuntSun">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/AhuntSun-blog/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
127&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
70</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/AhuntSun-blog/p/12679145.html">Git应用详解第一讲：Git分区，配置与日志</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h3 id="前言">前言</h3>
<p>曾经听到过这样一句话：不会<code>git</code>就不要敲代码了。细细品味确实有其中的道理，可能是当事人代码被强行覆盖后的叹息吧！</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/0.png" alt="image-20200411113956725"></p>
<p>因此，为了避免这种情况，接下来我们就一起来好好学习<code>git</code>的相关知识吧！不怕你不会，就怕你不看！</p>
<h3 id="一、git的三个分区">一、<code>git</code>的三个分区</h3>
<ul>
<li><strong>工作区（<code>working directory</code>）</strong></li>
<li><strong>暂存区（<code>stage</code>）</strong></li>
<li><strong>版本库</strong></li>
</ul>
<p>它们之间的关系为：</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/4/12/1716df68df92699f?w=701&amp;h=319&amp;f=png&amp;s=33002" alt="image-20200409211750551"></p>
<p>通过<code>git status</code>查看<code>git</code>状态时，<strong>红色</strong>的文件表示在<strong>工作区</strong>；<strong>绿色</strong>的文件表示在<strong>暂存区</strong>：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/2.png" alt="image-20200405154401706"></p>
<p>工作区中的文件只要通过<code>git add</code>命令添加进了<code>Git</code>仓库，就会被追踪。</p>
<blockquote>
<p>暂存区也称为<code>index</code>，不过常使用<code>stage</code>表示。</p>
</blockquote>
<h3 id="二、git常用命令">二、<code>git</code>常用命令</h3>
<table>
<thead>
<tr>
<th style="text-align:center">创建版本库</th>
<th style="text-align:center">版本控制</th>
<th style="text-align:center">远程协作</th>
<th style="text-align:center">查看信息</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>git init</code></td>
<td style="text-align:center"><code>git add</code></td>
<td style="text-align:center"><code>git pull</code></td>
<td style="text-align:center"><code>git help</code></td>
</tr>
<tr>
<td style="text-align:center"><code>git clone</code></td>
<td style="text-align:center"><code>git commit</code></td>
<td style="text-align:center"><code>git push</code></td>
<td style="text-align:center"><code>git log</code></td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center"><code>git rm</code></td>
<td style="text-align:center">*</td>
<td style="text-align:center"><code>git diff</code></td>
</tr>
</tbody>
</table>
<h3 id="三、git配置">三、<code>git</code>配置</h3>
<h4 id="1git-config">1.<code>git config</code></h4>
<p>可以通过三个地方的三个文件设置<code>git</code>配置参数，分别代表三个不同的作用域：</p>
<ul>
<li>
<p><strong><code>/etc/gitconfig</code></strong>：作用域：一台计算机（操作系统）上的所有用户，几乎不会使用，<strong>优先度低于<code>--global</code></strong>；设置方法：</p>
<pre><code class="language-java">git config --system
</code></pre>
</li>
<li>
<p><strong><code>~/.gitconfig</code></strong>：作用域：计算机中的某用户创建的所有项目，常用，<strong>优先度低于-<code>-local</code></strong>；设置方法：</p>
<pre><code>git config --global
</code></pre>
</li>
<li>
<p><strong><code>.git/config</code></strong> ：作用域：某一特定的版本库，不常用，<strong>是最具体的，优先度最高</strong>；设置方法：</p>
<pre><code>git config --local
</code></pre>
</li>
</ul>
<p>可使用<strong><code>git config</code></strong>  查看相关操作命令以及提示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/3.png" alt="image-20200309233143320"></p>
<h4 id="2username与useremail">2.<code>user.name</code>与<code>user.email</code></h4>
<h5 id="添加配置">添加配置</h5>
<p><code>user.name</code>和<code>user.email</code>指的是用户名和邮箱，这些两个配置会被添加到提交信息中，可以搭配上述命令配置到三种作用域中：</p>
<ul>
<li><strong>仓库配置</strong>：通过<code>--local</code>命令配置，作用域为当前版本库，配置写入<code>.git/config</code>文件中，优先度第一；</li>
</ul>
<pre><code>git config --local user.name &quot;张三&quot;
git config --local user.email test1@git.com
</code></pre>
<p>以上为配置特定版本库（<code>mygit</code>）的用户和邮箱：这样配置就可以通过两个版本库来进行多人操作的模拟；</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/4.png" alt="image-20200309232701432"></p>
<ul>
<li><strong>用户配置</strong>：通过<code>--global</code>命令配置，作用域为当前系统用户，配置写入<code>~/.gitconfig</code>文件，优先度第二；</li>
</ul>
<pre><code>git config --global user.name &quot;张三哥哥&quot;
git config --global user.email test2@git.com
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/5.png" alt="image-20200405164632583"></p>
<ul>
<li><strong>系统配置</strong>：通过<code>--system</code>命令配置，作用域为当前操作系统<strong>所有用户</strong>，配置写入<code>/etc/gitconfig</code>文件，优先度第三；这里需要管理员身份运行<code>git bash</code>才有修改权限：</li>
</ul>
<pre><code>git config --system user.name &quot;张三爸爸&quot;
git config --system user.email test3@git.com
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/6.png" alt="image-20200405165203785"></p>
<h5 id="查看配置">查看配置</h5>
<ul>
<li>
<p>直接查看配置文件（可通过<code>cat</code>指令查看）：</p>
<ul>
<li><strong>仓库配置</strong>：<code>.git/config</code></li>
</ul>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/7.png" alt="image-20200405165547199"></p>
<ul>
<li><strong>用户配置</strong>：<code>~/,gitconfig</code></li>
</ul>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/8.png" alt="image-20200405165649327"></p>
<ul>
<li><strong>系统配置</strong>：<code>/etc/gitconfig</code></li>
</ul>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/9.png" alt="image-20200405170052757"></p>
</li>
<li>
<p>通过<strong><code>git config --list</code>：</strong>可以批量查看配置信息：</p>
</li>
</ul>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/10.png" alt="image-20200405170219389"></p>
<ul>
<li>通过<code>git config user.name/email</code>查看：</li>
</ul>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/11.png" alt="image-20200405170326841"></p>
<p>可以看到输出的配置信息是<strong>仓库配置</strong>张三，验证了仓库配置的<strong>优先级最高</strong>；</p>
<h5 id="修改配置">修改配置</h5>
<p><strong>删除<code>config</code>配置</strong></p>
<pre><code>git config --unset &lt;参数名&gt;
</code></pre>
<p>首先设置错误参数，随后查看该配置：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/12.png" alt="image-20200407114958537"></p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/13.png" alt="image-20200407115017637"></p>
<p>删除该配置：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/14.png" alt="image-20200407115135434"></p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/15.png" alt="image-20200407115148715"></p>
<p><strong>修改<code>user.name/email</code>配置</strong></p>
<ul>
<li>可以通过添加配置的方式对原有配置进行覆盖，从而达到修改的效果：</li>
</ul>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/16.png" alt="image-20200309233745256"></p>
<ul>
<li>通过<code>--unset</code>命令<strong>删除</strong>指定的配置信息：</li>
</ul>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/17.png" alt="image-20200405170707745"></p>
<p>我们以该方式继续删除<strong>用户配置</strong><code>--global user.name</code>：<strong>张三哥哥</strong>，和<strong>仓库配置</strong><code>--local user.email</code>：<code>test1@git.com</code>：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/18.png" alt="image-20200405171112517"></p>
<p>此时再次通过<code>git config user.name/email</code>查看配置信息<code>user.name/email</code>：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/19.png" alt="image-20200405171226783"></p>
<p>可以发现<code>user.name</code>显示的是系统配置：<strong>张三爸爸</strong>，<code>user.email</code>显示的是用户配置：<code>test2@git.com</code>，验证了用户配置优先级<strong>第二</strong>和系统配置优先级<strong>第三</strong>；</p>
<h4 id="3gitignore">3.<code>.gitignore</code></h4>
<h5 id="作用">作用</h5>
<p>我们可以通过<code>git</code>提供的<code>.gitignore</code>文件配置不被<code>git</code>跟踪的文件。被添加到<code>.gitignore</code>文件中的文件名，将不会被<code>git</code>追踪。如下图中的新增文件<code>setting.properties</code>：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/20.png" alt="image-20200310140332647"></p>
<p>可见在<code>.gitignore</code>（注意文件是官方规定好了的不能随便乱改）文件中添加了文件名<code>setting.properties</code>后，<code>git</code>便不再追踪<code>setting.properties</code>这个文件了；</p>
<h5 id="应用场景">应用场景</h5>
<p>通常用来忽略本地开发中的下列文件：</p>
<ul>
<li><code>.idea</code>、<code>.settings</code>、<code>.classpath</code>等无用配置；</li>
<li>系统自动生成的文件：各种<code>IDE</code>的配置文件，项目依赖文件等；如<code>vue-cli</code>创建项目中<code>node_modules</code>目录下的各种依赖文件；</li>
<li>编译生成的中间文件，可执行文件；</li>
<li>敏感的配置文件和本地不想提交的脚本文件等；</li>
</ul>
<h5 id="实战演示">实战演示</h5>
<p><strong>只要与<code>.gitignore</code>中内容相匹配的目录或文件就会被<code>git</code>忽略；</strong>再如：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/21.png" alt="image-20200310140958531"></p>
<blockquote>
<p><strong><code>.gtiignore</code>文件非常重要，一般放在创建项目的根目录上</strong>。</p>
</blockquote>
<p>注意在<code>.gitignore</code>文件中<strong>一行写一个</strong>文件名；<code>.gitignore</code>文件也支持<strong>正则表达式</strong>比如：</p>
<ul>
<li><code>*.a</code>：忽略所有以 <code>.a</code> 结尾的文件；</li>
<li><code>!lib.a</code>：表示除了<code>lib.a</code>文件，其余都会被忽略；</li>
<li><code>/TODO</code>：仅仅忽略项目<strong>根目录</strong>下的<code>TODO</code>文件，不包括<code>subdir/TODO</code>（<code>TODO</code>为示例文件）；
<ul>
<li>可以通过<strong><code>/*/TODO</code></strong>使一层目录下的<code>TODO</code>文件被忽略；</li>
<li>通过 <code>/**/TODO</code> 使所有层目录下的<code>TODO</code>文件都被忽略；</li>
</ul>
</li>
<li><code>build/</code>  表示忽略<code>build</code>目录下的所有文件；</li>
<li><code>doc/*.txt</code>   表示忽略<code>doc</code>目录下所有的<code>.txt</code>文件，包括<code>doc/notes.txt</code> 但不包括 <code>doc/server/.arch.txt</code>；
<ul>
<li><code>doc/*/*.txt</code>  会忽略<code>doc</code>目录及其任何一个子目录下的所有<code>.txt</code>文件，比如<code>doc/bin/2.txt</code>（<code>/ *</code> 表示一层目录）；</li>
<li>而<code>doc/**/*.txt </code> 则会把<code>doc</code>任何一层目录及其子目录下的<code>.txt</code>文件忽略；即 <code>/**/</code> 两颗星表示所有层目录；</li>
</ul>
</li>
</ul>
<p>以下为某个使用<code>vue-cli3</code>创建项目下的<code>.gitignore</code>文件内容：</p>
<pre><code class="language-javascript">.DS_Store
node_modules
/dist

# local env files
.env.local
.env.*.local

# Log files
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</code></pre>
<h5 id="配置技巧">配置技巧</h5>
<p>其实我们不需要每次都手写一遍<code>.gitignore</code>文件，可以通过这个网站自动生成不同语言项目的忽略文件：<a href="http://gitignore.io/">http://gitignore.io/</a></p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/21.1.png" alt="image-20200413175031278"></p>
<p>在输入框中输入相关语言标签，就可以自动生成忽略文件列表。可以将它作为参考，选择其中需要的添加到<code>.gitignore</code>文件中：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/21.2.png" alt="image-20200413175324108"></p>
<h3 id="四、查看状态">四、查看状态</h3>
<h4 id="1git-status">1.<code>git status</code></h4>
<p>查看工作区的状态，该命令<strong>经常使用</strong>；每执行一条指令后，都应使用该命令<strong>查看</strong>工作区和暂存区的<strong>状态</strong>；<strong>红色</strong>表示对文件的更改还没提交到暂存区；<strong>绿色</strong>表示已提交到暂存区；</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/22.png" alt="image-20200309225807040"></p>
<h3 id="五、工作区--暂存区">五、工作区 <code>-&gt;</code>暂存区</h3>
<h4 id="1git-add-file">1.<code>git add &lt;file&gt;</code></h4>
<p>将<strong>工作区</strong>中的文件提交到<strong>暂存区</strong>：</p>
<ul>
<li><code>git add test.txt</code>：将工作区中的<code>test.txt</code>提交到暂存区；</li>
<li><code>git add test.txt test2.txt</code>：将工作区中的<code>test.txt</code>和<code>test2.txt</code>提交到暂存区；</li>
<li><code>git add .</code>：将当前目录及其子目录下的所有文件从工作区提交到暂存区中；</li>
</ul>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/23.png" alt="image-20200405173551441"></p>
<h3 id="六、暂存区--版本库">六、暂存区 <code>-&gt;</code>版本库</h3>
<h4 id="1git-commit--m-注释">1.<code>git commit -m '注释'</code></h4>
<p>将暂存区中的文件提交到版本库，<strong>一定要添加注释，否则不让提交</strong>：当注释很短时采用<code>-m</code>方式（<code>m</code>为<code>message</code>的意思）：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/24.png" alt="image-20200405173938192"></p>
<h4 id="2git-commit">2.<code>git commit</code></h4>
<p>当注释很长时，可以直接执行<code>git commit</code>，进入<code>vim</code>编辑器界面，在此处编写较长的注释，添加完注释后，通过<code>wq</code>保存并退出即可：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/25.png" alt="image-20200405160208232"></p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/26.png" alt="image-20200405160252663"></p>
<h4 id="3git-commit--am-注释">3.<code>git commit -am '注释'</code></h4>
<p>表示添加当前目录下所有已被<code>git</code>追踪的文件到暂存区中并提交，即相当于是<strong><code>git add .</code></strong> 与 <strong><code>git commit</code></strong>  两步操作的合成。</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/27.png" alt="image-20200311094351942"></p>
<p><strong>该方式只适用于已被<code>git</code>追踪的文件（即文件至少提交过一次）</strong>，当文件第一次提交到暂存区时（此时该文件并未被<code>git</code>追踪）不可以使用该命令，而是要分开写，否则会报错：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/28.png" alt="image-20200311105537874"></p>
<h3 id="七、工作区-暂存区">七、工作区<code>&lt;-</code>暂存区</h3>
<p>简单来说，就是将<code>git status</code>指令显示出来的文件，从<strong>绿色</strong>变为<strong>红色</strong>，大概有如下三种方法：</p>
<h4 id="1git-rm---cached-file">1.<code>git rm --cached &lt;file&gt;</code></h4>
<p>删除缓存区中的<code>&lt;file&gt;</code>文件，并将其还原到<strong>工作区</strong>。该指令需要对<strong>暂存区</strong>删除的文件进行一次提交操作，所以建议用第二种方法；</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/29.png" alt="image-20200405175500995"></p>
<h4 id="2git-restore---stage-file">2.<code>git restore --stage &lt;file&gt;</code></h4>
<p>通过该指令，将文件从<strong>缓存区</strong>中移动到<strong>工作区</strong>，这里的参数<code>--stage</code>写成<code>--staged</code>效果是一样的：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/30.png" alt="image-20200405173026361"></p>
<blockquote>
<p><strong>小贴士：可以使用<code>tab</code>键补全命令；</strong></p>
</blockquote>
<h4 id="3git-reset-head-file">3.<code>git reset HEAD &lt;file&gt;</code></h4>
<p>将文件从<strong>缓存区</strong>中移到<strong>工作区</strong>，作用与方法<code>2</code>一样：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/31.png" alt="image-20200405202356893"></p>
<h3 id="八、撤销操作">八、撤销操作</h3>
<p>这里指的是撤销工作区中对文件的操作，包括新增、修改、删除等，配合着前面第七点所讲的指令使用。大概有以下两种方法：</p>
<h4 id="1git-checkout----file">1.<code>git checkout -- &lt;file&gt;</code></h4>
<p>可以撤销<strong>工作区</strong>中对<code>flie</code>文件的改动操作（包括删除）：注意<code>--</code>后面要跟上空格：如果修改已经通过<code>git add</code>提交到<strong>暂存区</strong>，该指令无效。</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/32.png" alt="image-20200405172537981"></p>
<h4 id="2git-restore-file">2.<code>git restore &lt;file&gt;</code></h4>
<p>可以撤销<strong>工作区</strong>中对<code>file</code>文件的操作，效果与方法<code>1</code>相同；</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/33.png" alt="image-20200405222228836"></p>
<h3 id="九、日志">九、日志</h3>
<p><code>git</code>的日志记录了<code>git</code>仓库对文件的所有操作，主要分为三大类：分支的<strong>提交日志</strong>、文件的<strong>修改日志</strong>、<code>git</code>的<strong>操作日志</strong>。通过查看这些日志信息，可以很好地了解<code>git</code>仓库的历史记录，并根据需要进行版本回退。</p>
<h4 id="1查看提交日志">1.查看提交日志</h4>
<p>使用的主要命令为<code>git log</code>，通过添加不同的参数，可以显示不同形式的提交日志，下面主要介绍其中常用的几种：</p>
<h5 id="git-log"><code>git log</code></h5>
<p>查看版本库的提交（<code>commit</code>）历史：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/34.png" alt="image-20200310000630352"></p>
<ul>
<li>
<p>提交历史是倒叙的，最新的提交排在最前面；</p>
</li>
<li>
<p><code>Git</code>的提交<code>id</code>（<code>commit id</code>）是一个<strong>摘要值</strong>，这个摘要值实际上是通过<code>sha1</code>算法计算出来的<strong>不重复字符串</strong>。由此保证了每次提交<code>id</code>的唯一性；</p>
</li>
<li>
<p><code>Author</code>显示的是提交时优先级最高的配置，比如提交时有<code>--local</code>配置就显示它，没有就显示<code>--global</code>的配置；如上图中：第二次提交时使用的是修改过后的<code>config</code>李四，也就是优先级更高的<code>--local</code>配置；</p>
</li>
</ul>
<h5 id="git-log--n"><code>git log -n</code></h5>
<p>可以查看最近的<code>n</code>次的提交历史，比如通过<code>git log -3</code> 查看最近<code>3</code>次的提交历史：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/35.png" alt="image-20200310102202167"></p>
<h5 id="git-log---graph"><code>git log --graph</code></h5>
<p>以图形化的形式显示提交历史：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/36.png" alt="image-20200310202444991"></p>
<h5 id="git-log---prettyoneline"><code>git log --pretty=oneline</code></h5>
<p>以一行的形式显示提交历史：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/37.png" alt="image-20200310102422277"></p>
<h5 id="git-log---graph---abbrev-commit"><code>git log --graph --abbrev-commit </code></h5>
<p>通过<code>--abbrev-commit</code>对提交信息进行简化：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/38.png" alt="image-20200311094731124"></p>
<p>还可以结合<code>--pretty=oneline</code>进行简写：</p>
<pre><code>git log --pretty=oneline  --abbrev-commit
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/39.png" alt="image-20200311094856556"></p>
<h5 id="git-log---prettyonelineh---an-ar--s"><code>git log --pretty=oneline:&quot;%h - %an, %ar : %s&quot;</code></h5>
<p>还可以按照规定的格式显示日志内容：<code>%h</code>：表示<code>commit id</code>；<code>%an</code>：表示提交人；<code>%ar</code>：表示提交时间；<code>%s</code>：表示提交信息；</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/40.png" alt="image-20200310102703035"></p>
<h5 id="git-log---all---decorate---oneline---graph"><code>git log --all --decorate --oneline --graph</code></h5>
<p>该命令比较厉害，是<code>StackOverflow</code>上网友组装的命令，可以一次性查看所有分支及其提交记录，非常实用：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/40.1.png" alt="image-20200413170158604"></p>
<p>如上图所示，三个分支<code>dev</code>、<code>master</code>、<code>test</code>以及每个分支的提交记录都一次性显示出来了。由于该命令十分常用，但是又很长，不好记忆。所以，我们可以给该命令设置别名（<code>alias</code>），比如取该命令的首字母组成别名<code>dog</code>，在全局下进行配置：</p>
<pre><code>git config --global alias.dog 'log --all --decorate --oneline --graph'
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/40.2.png" alt="image-20200413171109680"></p>
<p>设置好别名之后，就可以通过<code>git dog</code>来执行这条指令了。有关别名的内容，之后会详细进行讲解。</p>
<h4 id="2查看修改日志">2.查看修改日志</h4>
<h5 id="git-blame-file_name"><code>git blame file_name</code></h5>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/41.png" alt="image-20200311144605370"></p>
<p>如图所示，通过该命令可以清楚查看指定的文件的每次修改。包括修改用户，修改时间等；</p>
<h4 id="3查看操作日志">3.查看操作日志</h4>
<h5 id="git-reflog"><code>git reflog</code></h5>
<p>通过该指令可以详细地查看，每次操作所在提交节点的<code>commit id</code>，以及在此提交节点上所执行的操作（指令）；并且是倒叙显示的，即最近一次操作的序号为<code>{0}</code>：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/42.png" alt="image-20200311100922744"></p>
<p><strong><code>git log</code></strong>：只能显示<strong>当前分支</strong>的提交历史，如果进行版本回退，会丢失较后版本的提交信息，如下图所示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson1/43.png" alt="image-20200406174222429"></p>
<p>可以看到通过<code>reset</code>进行版本回退，丢失了<code>4th commit</code>的提交信息，此时可通过<strong><code>git reflog</code></strong>查看操作日志的相关操作信息来回到最新的版本。</p>
<blockquote>
<p><strong>总结：</strong></p>
<ul>
<li>
<p>总体上来说，操作日志包含了修改日志和提交日志，是最全的<code>git</code>日志；</p>
</li>
<li>
<p><strong>注意：</strong>不是通过<code>git</code>命令，而是手动修改文件，这些修改记录不会被<code>git</code>日志记录。所以，推荐使用<code>git</code>指令进行操作；</p>
</li>
</ul>
</blockquote>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-11 13:23</span>&nbsp;
<a href="https://www.cnblogs.com/AhuntSun-blog/">AhuntSun</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12679145" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12679145);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 555013, cb_blogApp = 'AhuntSun-blog', cb_blogUserGuid = 'bad5555f-0923-4a98-9bae-08d753a8c051';
    var cb_entryId = 12679145, cb_entryCreatedDate = '2020-04-11 13:23', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 AhuntSun
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <!--代码复制-->
<script src="https://cdn.bootcss.com/clipboard.js/2.0.4/clipboard.min.js"></script>

<!--主题-->
<script src="https://blog-static.cnblogs.com/files/AhuntSun-blog/bilibili2.js" ></script>
<!--scrollTo-->
<script src="https://cdn.bootcss.com/jquery-scrollTo/2.1.2/jquery.scrollTo.js"></script>
<!--owo表情-->
<script src="https://blog-static.cnblogs.com/files/gshang/gshang.owo.2020.01.05.1.js"></script>
<link rel="stylesheet" href="https://blog-static.cnblogs.com/files/elkyo/OwO.min.css" />

<!-- import Vue.js -->
<script src="https://cdn.staticfile.org/vue/2.2.2/vue.min.js"></script>

<!-- 额外小特效 -->
 <!--鼠标特效-->
 <script src="https://blog-static.cnblogs.com/files/zouwangblog/mouse-click.js"></script>
 <canvas width="1777" height="841" style="position: fixed; left: 0px; top: 0px; z-index: 2147483647; pointer-events: none;"></canvas>
 <!--鼠标特效 end-->

<!--图片放大器-->
<script type="text/javascript" src="https://cdn.bootcss.com/fancybox/3.5.7/jquery.fancybox.js"></script>
<link rel="stylesheet" href="https://cdn.bootcss.com/fancybox/3.5.7/jquery.fancybox.css">
<script>

<!--指定fancybox作用的区域-->
$(".forFlow img").each(function () {
    var element = document.createElement("a");
    $(element).attr("data-fancybox", "gallery");
    $(element).attr("href", $(this).attr("src"));
    $(this).wrap(element);
});
</script>

    </div>
</body>
</html>