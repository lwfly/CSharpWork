<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="一、ThreadLocal简介 多线程访问同一个共享变量的时候容易出现并发问题，特别是多个线程对一个变量进行写入的时候，为了保证线程安全，一般使用者在访问共享变量的时候需要进行额外的同步措施才能保证线" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Java中的ThreadLocal详解 - 风沙迷了眼 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=Z9Vw4btcgJmrpUEjY_SgebmTmDXJ_hPFoST7ad2aJp4" />
    <link id="MainCss" rel="stylesheet" href="/skins/mountainink/bundle-mountainink.min.css?v=oG79jFR4NfReV3u2dBQmP3fWN_7_R-qh8UbgFGHtkis" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/fsmly/custom.css?v=qj6TLrjo0UPBUdTBAB3ZyMUIUVU=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/mountainink/bundle-mountainink-mobile.min.css?v=ADiCwO2hOTdd5yYidcx7eob7ix2VJI4o_TXjEycTHjs" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/fsmly/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/fsmly/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/fsmly/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 425851;
        var currentBlogApp = 'fsmly';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'MountainInk';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/fsmly/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/fsmly/">风沙迷了眼</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/fsmly/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E9%A3%8E%E6%B2%99%E8%BF%B7%E4%BA%86%E7%9C%BC">
联系</a></li>
<li>

<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
64&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
15</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/fsmly/p/11020641.html">Java中的ThreadLocal详解</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <h1>一、ThreadLocal简介</h1>
<p>　　多线程访问同一个共享变量的时候容易出现并发问题，特别是多个线程对一个变量进行写入的时候，为了保证线程安全，一般使用者在访问共享变量的时候需要进行额外的同步措施才能保证线程安全性。ThreadLocal是除了加锁这种同步方式之外的一种保证一种规避多线程访问出现线程不安全的方法，当我们在创建一个变量后，如果每个线程对其进行访问的时候访问的都是线程自己的变量这样就不会存在线程不安全问题。</p>
<p>　　ThreadLocal是JDK包提供的，它提供线程本地变量，如果创建一乐ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的一个副本，在实际多线程操作的时候，操作的是自己本地内存中的变量，从而规避了线程安全问题，如下图所示</p>
<p><img src="https://img2018.cnblogs.com/blog/1368768/201906/1368768-20190613220434628-1803630402.png" alt="" width="374" height="171" /></p>
<h1>二、ThreadLocal简单使用</h1>
<p>　　下面的例子中，开启两个线程，在每个线程内部设置了本地变量的值，然后调用print方法打印当前本地变量的值。如果在打印之后调用本地变量的remove方法会删除本地内存中的变量，代码如下所示</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> test;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ThreadLocalTest {
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">static</span> ThreadLocal&lt;String&gt; localVar = <span style="color: #0000ff;">new</span> ThreadLocal&lt;&gt;<span style="color: #000000;">();
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> print(String str) {
</span><span style="color: #008080;"> 8</span>         <span style="color: #008000;">//</span><span style="color: #008000;">打印当前线程中本地内存中本地变量的值</span>
<span style="color: #008080;"> 9</span>         System.out.println(str + " :" +<span style="color: #000000;"> localVar.get());
</span><span style="color: #008080;">10</span>         <span style="color: #008000;">//</span><span style="color: #008000;">清除本地内存中的本地变量</span>
<span style="color: #008080;">11</span> <span style="color: #000000;">        localVar.remove();
</span><span style="color: #008080;">12</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">13</span> 
<span style="color: #008080;">14</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
</span><span style="color: #008080;">15</span>         Thread t1  = <span style="color: #0000ff;">new</span> Thread(<span style="color: #0000ff;">new</span><span style="color: #000000;"> Runnable() {
</span><span style="color: #008080;">16</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;">17</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run() {
</span><span style="color: #008080;">18</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">设置线程1中本地变量的值</span>
<span style="color: #008080;">19</span>                 localVar.set("localVar1"<span style="color: #000000;">);
</span><span style="color: #008080;">20</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">调用打印方法</span>
<span style="color: #008080;">21</span>                 print("thread1"<span style="color: #000000;">);
</span><span style="color: #008080;">22</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">打印本地变量</span>
<span style="color: #008080;">23</span>                 System.out.println("after remove : " +<span style="color: #000000;"> localVar.get());
</span><span style="color: #008080;">24</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">25</span> <span style="color: #000000;">        });
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span>         Thread t2  = <span style="color: #0000ff;">new</span> Thread(<span style="color: #0000ff;">new</span><span style="color: #000000;"> Runnable() {
</span><span style="color: #008080;">28</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;">29</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run() {
</span><span style="color: #008080;">30</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">设置线程1中本地变量的值</span>
<span style="color: #008080;">31</span>                 localVar.set("localVar2"<span style="color: #000000;">);
</span><span style="color: #008080;">32</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">调用打印方法</span>
<span style="color: #008080;">33</span>                 print("thread2"<span style="color: #000000;">);
</span><span style="color: #008080;">34</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">打印本地变量</span>
<span style="color: #008080;">35</span>                 System.out.println("after remove : " +<span style="color: #000000;"> localVar.get());
</span><span style="color: #008080;">36</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">37</span> <span style="color: #000000;">        });
</span><span style="color: #008080;">38</span> 
<span style="color: #008080;">39</span> <span style="color: #000000;">        t1.start();
</span><span style="color: #008080;">40</span> <span style="color: #000000;">        t2.start();
</span><span style="color: #008080;">41</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">42</span> }</pre>
</div>
<p>&nbsp;下面是运行后的结果：</p>
<p><img src="https://img2018.cnblogs.com/blog/1368768/201906/1368768-20190613224945385-1072836449.png" alt="" width="345" height="132" /></p>
<h1>三、ThreadLocal的实现原理</h1>
<p>　　下面是ThreadLocal的类图结构，从图中可知：Thread类中有两个变量threadLocals和inheritableThreadLocals，二者都是ThreadLocal内部类ThreadLocalMap类型的变量，我们通过查看内部内ThreadLocalMap可以发现实际上它类似于一个HashMap。在默认情况下，每个线程中的这两个变量都为null<img src="https://img2018.cnblogs.com/blog/1368768/201906/1368768-20190614002358591-1764103391.png" alt="" width="284" height="20" /><img src="https://img2018.cnblogs.com/blog/1368768/201906/1368768-20190614002426565-1963789099.png" alt="" width="356" height="21" />，只有当线程第一次调用ThreadLocal的set或者get方法的时候才会创建他们（后面我们会查看这两个方法的源码）。除此之外，和我所想的不同的是，每个线程的本地变量不是存放在ThreadLocal实例中，而是放在调用线程的ThreadLocals变量里面（前面也说过，该变量是Thread类的变量）。也就是说，ThreadLocal类型的本地变量是存放在具体的线程空间上，其本身相当于一个装载本地变量的工具壳，通过set方法将value添加到调用线程的threadLocals中，当调用线程调用get方法时候能够从它的threadLocals中取出变量。如果调用线程一直不终止，那么这个本地变量将会一直存放在他的threadLocals中，所以不使用本地变量的时候需要调用remove方法将threadLocals中删除不用的本地变量。下面我们通过查看ThreadLocal的set、get以及remove方法来查看ThreadLocal具体实怎样工作的</p>
<p><img src="https://img2018.cnblogs.com/blog/1368768/201906/1368768-20190614000329689-872917045.png" alt="" width="489" height="277" /></p>
<p>　　1、set方法源码</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> set(T value) {
</span><span style="color: #008080;"> 2</span>     <span style="color: #008000;">//(1)</span><span style="color: #008000;">获取当前线程（调用者线程）</span>
<span style="color: #008080;"> 3</span>     Thread t =<span style="color: #000000;"> Thread.currentThread();
</span><span style="color: #008080;"> 4</span>     <span style="color: #008000;">//(2)</span><span style="color: #008000;">以当前线程作为key值，去查找对应的线程变量，找到对应的map</span>
<span style="color: #008080;"> 5</span>     ThreadLocalMap map =<span style="color: #000000;"> getMap(t);
</span><span style="color: #008080;"> 6</span>     <span style="color: #008000;">//(3)</span><span style="color: #008000;">如果map不为null，就直接添加本地变量，key为当前线程，值为添加的本地变量值</span>
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">if</span> (map != <span style="color: #0000ff;">null</span><span style="color: #000000;">)
</span><span style="color: #008080;"> 8</span>         map.set(<span style="color: #0000ff;">this</span><span style="color: #000000;">, value);
</span><span style="color: #008080;"> 9</span>     <span style="color: #008000;">//(4)</span><span style="color: #008000;">如果map为null，说明首次添加，需要首先创建出对应的map</span>
<span style="color: #008080;">10</span>     <span style="color: #0000ff;">else</span>
<span style="color: #008080;">11</span> <span style="color: #000000;">        createMap(t, value);
</span><span style="color: #008080;">12</span> }</pre>
</div>
<p>　　在上面的代码中，(2)处调用getMap方法获得当前线程对应的threadLocals(参照上面的图示和文字说明)，该方法代码如下</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">ThreadLocalMap getMap(Thread t) {
    </span><span style="color: #0000ff;">return</span> t.threadLocals; <span style="color: #008000;">//</span><span style="color: #008000;">获取线程自己的变量threadLocals，并绑定到当前调用线程的成员变量threadLocals上</span>
}</pre>
</div>
<p>　　如果调用getMap方法返回值不为null，就直接将value值设置到threadLocals中（key为当前线程引用，值为本地变量）；如果getMap方法返回null说明是第一次调用set方法（前面说到过，threadLocals默认值为null，只有调用set方法的时候才会创建map），这个时候就需要调用createMap方法创建threadLocals，该方法如下所示</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> createMap(Thread t, T firstValue) {
</span><span style="color: #008080;">2</span>     t.threadLocals = <span style="color: #0000ff;">new</span> ThreadLocalMap(<span style="color: #0000ff;">this</span><span style="color: #000000;">, firstValue);
</span><span style="color: #008080;">3</span> }</pre>
</div>
<p>　　createMap方法不仅创建了threadLocals，同时也将要添加的本地变量值添加到了threadLocals中。</p>
<p>　　2、get方法源码</p>
<p>　　在get方法的实现中，首先获取当前调用者线程，如果当前线程的threadLocals不为null，就直接返回当前线程绑定的本地变量值，否则执行setInitialValue方法初始化threadLocals变量。在setInitialValue方法中，类似于set方法的实现，都是判断当前线程的threadLocals变量是否为null，是则添加本地变量（这个时候由于是初始化，所以添加的值为null），否则创建threadLocals变量，同样添加的值为null。</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span><span style="color: #000000;"> T get() {
</span><span style="color: #008080;"> 2</span>     <span style="color: #008000;">//</span><span style="color: #008000;">(1)获取当前线程</span>
<span style="color: #008080;"> 3</span>     Thread t =<span style="color: #000000;"> Thread.currentThread();
</span><span style="color: #008080;"> 4</span>     <span style="color: #008000;">//</span><span style="color: #008000;">(2)获取当前线程的threadLocals变量</span>
<span style="color: #008080;"> 5</span>     ThreadLocalMap map =<span style="color: #000000;"> getMap(t);
</span><span style="color: #008080;"> 6</span>     <span style="color: #008000;">//</span><span style="color: #008000;">(3)如果threadLocals变量不为null，就可以在map中查找到本地变量的值</span>
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">if</span> (map != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;"> 8</span>         ThreadLocalMap.Entry e = map.getEntry(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">if</span> (e != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">10</span>             @SuppressWarnings("unchecked"<span style="color: #000000;">)
</span><span style="color: #008080;">11</span>             T result =<span style="color: #000000;"> (T)e.value;
</span><span style="color: #008080;">12</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
</span><span style="color: #008080;">13</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">14</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">15</span>     <span style="color: #008000;">//</span><span style="color: #008000;">(4)执行到此处，threadLocals为null，调用该更改初始化当前线程的threadLocals变量</span>
<span style="color: #008080;">16</span>     <span style="color: #0000ff;">return</span><span style="color: #000000;"> setInitialValue();
</span><span style="color: #008080;">17</span> <span style="color: #000000;">}
</span><span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span> <span style="color: #0000ff;">private</span><span style="color: #000000;"> T setInitialValue() {
</span><span style="color: #008080;">20</span>     <span style="color: #008000;">//</span><span style="color: #008000;">protected T initialValue() {return null;}</span>
<span style="color: #008080;">21</span>     T value =<span style="color: #000000;"> initialValue();
</span><span style="color: #008080;">22</span>     <span style="color: #008000;">//</span><span style="color: #008000;">获取当前线程</span>
<span style="color: #008080;">23</span>     Thread t =<span style="color: #000000;"> Thread.currentThread();
</span><span style="color: #008080;">24</span>     <span style="color: #008000;">//</span><span style="color: #008000;">以当前线程作为key值，去查找对应的线程变量，找到对应的map</span>
<span style="color: #008080;">25</span>     ThreadLocalMap map =<span style="color: #000000;"> getMap(t);
</span><span style="color: #008080;">26</span>     <span style="color: #008000;">//</span><span style="color: #008000;">如果map不为null，就直接添加本地变量，key为当前线程，值为添加的本地变量值</span>
<span style="color: #008080;">27</span>     <span style="color: #0000ff;">if</span> (map != <span style="color: #0000ff;">null</span><span style="color: #000000;">)
</span><span style="color: #008080;">28</span>         map.set(<span style="color: #0000ff;">this</span><span style="color: #000000;">, value);
</span><span style="color: #008080;">29</span>     <span style="color: #008000;">//</span><span style="color: #008000;">如果map为null，说明首次添加，需要首先创建出对应的map</span>
<span style="color: #008080;">30</span>     <span style="color: #0000ff;">else</span>
<span style="color: #008080;">31</span> <span style="color: #000000;">        createMap(t, value);
</span><span style="color: #008080;">32</span>     <span style="color: #0000ff;">return</span><span style="color: #000000;"> value;
</span><span style="color: #008080;">33</span> }</pre>
</div>
<p>　　3、remove方法的实现</p>
<p>　　remove方法判断该当前线程对应的threadLocals变量是否为null，不为null就直接删除当前线程中指定的threadLocals变量</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span>  <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> remove() {
</span><span style="color: #008080;">2</span>     <span style="color: #008000;">//</span><span style="color: #008000;">获取当前线程绑定的threadLocals</span>
<span style="color: #008080;">3</span>      ThreadLocalMap m =<span style="color: #000000;"> getMap(Thread.currentThread());
</span><span style="color: #008080;">4</span>      <span style="color: #008000;">//</span><span style="color: #008000;">如果map不为null，就移除当前线程中指定ThreadLocal实例的本地变量</span>
<span style="color: #008080;">5</span>      <span style="color: #0000ff;">if</span> (m != <span style="color: #0000ff;">null</span><span style="color: #000000;">)
</span><span style="color: #008080;">6</span>          m.remove(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;">7</span>  }</pre>
</div>
<p>　　4、如下图所示：每个线程内部有一个名为threadLocals的成员变量，该变量的类型为ThreadLocal.ThreadLocalMap类型（类似于一个HashMap），其中的key为当前定义的ThreadLocal变量的this引用，value为我们使用set方法设置的值。每个线程的本地变量存放在自己的本地内存变量threadLocals中，如果当前线程一直不消亡，那么这些本地变量就会一直存在（所以可能会导致内存溢出），因此使用完毕需要将其remove掉。</p>
<p><img src="https://img2018.cnblogs.com/blog/1368768/201906/1368768-20190614011044060-2111473950.png" alt="" width="525" height="256" /></p>
<h1>四、ThreadLocal不支持继承性</h1>
<p>　　同一个ThreadLocal变量在父线程中被设置值后，在子线程中是获取不到的。（threadLocals中为当前调用线程对应的本地变量，所以二者自然是不能共享的）</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> test;
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ThreadLocalTest2 {
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>     <span style="color: #008000;">//</span><span style="color: #008000;">(1)创建ThreadLocal变量</span>
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> ThreadLocal&lt;String&gt; threadLocal = <span style="color: #0000ff;">new</span> ThreadLocal&lt;&gt;<span style="color: #000000;">();
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
</span><span style="color: #008080;"> 9</span>         <span style="color: #008000;">//</span><span style="color: #008000;">在main线程中添加main线程的本地变量</span>
<span style="color: #008080;">10</span>         threadLocal.set("mainVal"<span style="color: #000000;">);
</span><span style="color: #008080;">11</span>         <span style="color: #008000;">//</span><span style="color: #008000;">新创建一个子线程</span>
<span style="color: #008080;">12</span>         Thread thread = <span style="color: #0000ff;">new</span> Thread(<span style="color: #0000ff;">new</span><span style="color: #000000;"> Runnable() {
</span><span style="color: #008080;">13</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;">14</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run() {
</span><span style="color: #008080;">15</span>                 System.out.println("子线程中的本地变量值:"+<span style="color: #000000;">threadLocal.get());
</span><span style="color: #008080;">16</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">17</span> <span style="color: #000000;">        });
</span><span style="color: #008080;">18</span> <span style="color: #000000;">        thread.start();
</span><span style="color: #008080;">19</span>         <span style="color: #008000;">//</span><span style="color: #008000;">输出main线程中的本地变量值</span>
<span style="color: #008080;">20</span>         System.out.println("mainx线程中的本地变量值:"+<span style="color: #000000;">threadLocal.get());
</span><span style="color: #008080;">21</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">22</span> }</pre>
</div>
<h1>五、InheritableThreadLocal类</h1>
<p>　　在上面说到的ThreadLocal类是不能提供子线程访问父线程的本地变量的，而InheritableThreadLocal类则可以做到这个功能，下面是该类的源码</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> InheritableThreadLocal&lt;T&gt; <span style="color: #0000ff;">extends</span> ThreadLocal&lt;T&gt;<span style="color: #000000;"> {
</span><span style="color: #008080;"> 2</span>     
<span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">protected</span><span style="color: #000000;"> T childValue(T parentValue) {
</span><span style="color: #008080;"> 4</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> parentValue;
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> <span style="color: #000000;">    ThreadLocalMap getMap(Thread t) {
</span><span style="color: #008080;"> 8</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> t.inheritableThreadLocals;
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>     <span style="color: #0000ff;">void</span><span style="color: #000000;"> createMap(Thread t, T firstValue) {
</span><span style="color: #008080;">12</span>         t.inheritableThreadLocals = <span style="color: #0000ff;">new</span> ThreadLocalMap(<span style="color: #0000ff;">this</span><span style="color: #000000;">, firstValue);
</span><span style="color: #008080;">13</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">14</span> }</pre>
</div>
<p>　　从上面代码可以看出，InheritableThreadLocal类继承了ThreadLocal类，并重写了childValue、getMap、createMap三个方法。其中createMap方法在被调用（当前线程调用set方法时得到的map为null的时候需要调用该方法）的时候，创建的是inheritableThreadLocal而不是threadLocals。同理，getMap方法在当前调用者线程调用get方法的时候返回的也不是threadLocals而是inheritableThreadLocal。</p>
<p>　　下面我们看看重写的childValue方法在什么时候执行，怎样让子线程访问父线程的本地变量值。我们首先从Thread类开始说起</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> init(ThreadGroup g, Runnable target, String name,
</span><span style="color: #008080;"> 2</span>                   <span style="color: #0000ff;">long</span><span style="color: #000000;"> stackSize) {
</span><span style="color: #008080;"> 3</span>     init(g, target, name, stackSize, <span style="color: #0000ff;">null</span>, <span style="color: #0000ff;">true</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">}
</span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> init(ThreadGroup g, Runnable target, String name,
</span><span style="color: #008080;"> 6</span>                   <span style="color: #0000ff;">long</span><span style="color: #000000;"> stackSize, AccessControlContext acc,
</span><span style="color: #008080;"> 7</span>                   <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> inheritThreadLocals) {
</span><span style="color: #008080;"> 8</span>     <span style="color: #008000;">//</span><span style="color: #008000;">判断名字的合法性</span>
<span style="color: #008080;"> 9</span>     <span style="color: #0000ff;">if</span> (name == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">10</span>         <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> NullPointerException("name cannot be null"<span style="color: #000000;">);
</span><span style="color: #008080;">11</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span>     <span style="color: #0000ff;">this</span>.name =<span style="color: #000000;"> name;
</span><span style="color: #008080;">14</span>     <span style="color: #008000;">//</span><span style="color: #008000;">(1)获取当前线程(父线程)</span>
<span style="color: #008080;">15</span>     Thread parent =<span style="color: #000000;"> currentThread();
</span><span style="color: #008080;">16</span>     <span style="color: #008000;">//</span><span style="color: #008000;">安全校验</span>
<span style="color: #008080;">17</span>     SecurityManager security =<span style="color: #000000;"> System.getSecurityManager();
</span><span style="color: #008080;">18</span>     <span style="color: #0000ff;">if</span> (g == <span style="color: #0000ff;">null</span>) { <span style="color: #008000;">//</span><span style="color: #008000;">g:当前线程组</span>
<span style="color: #008080;">19</span>         <span style="color: #0000ff;">if</span> (security != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">20</span>             g =<span style="color: #000000;"> security.getThreadGroup();
</span><span style="color: #008080;">21</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">22</span>         <span style="color: #0000ff;">if</span> (g == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">23</span>             g =<span style="color: #000000;"> parent.getThreadGroup();
</span><span style="color: #008080;">24</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">25</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">26</span> <span style="color: #000000;">    g.checkAccess();
</span><span style="color: #008080;">27</span>     <span style="color: #0000ff;">if</span> (security != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">28</span>         <span style="color: #0000ff;">if</span><span style="color: #000000;"> (isCCLOverridden(getClass())) {
</span><span style="color: #008080;">29</span> <span style="color: #000000;">            security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);
</span><span style="color: #008080;">30</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">31</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">32</span> 
<span style="color: #008080;">33</span> <span style="color: #000000;">    g.addUnstarted();
</span><span style="color: #008080;">34</span> 
<span style="color: #008080;">35</span>     <span style="color: #0000ff;">this</span>.group = g; <span style="color: #008000;">//</span><span style="color: #008000;">设置为当前线程组</span>
<span style="color: #008080;">36</span>     <span style="color: #0000ff;">this</span>.daemon = parent.isDaemon();<span style="color: #008000;">//</span><span style="color: #008000;">守护线程与否(同父线程)</span>
<span style="color: #008080;">37</span>     <span style="color: #0000ff;">this</span>.priority = parent.getPriority();<span style="color: #008000;">//</span><span style="color: #008000;">优先级同父线程</span>
<span style="color: #008080;">38</span>     <span style="color: #0000ff;">if</span> (security == <span style="color: #0000ff;">null</span> ||<span style="color: #000000;"> isCCLOverridden(parent.getClass()))
</span><span style="color: #008080;">39</span>         <span style="color: #0000ff;">this</span>.contextClassLoader =<span style="color: #000000;"> parent.getContextClassLoader();
</span><span style="color: #008080;">40</span>     <span style="color: #0000ff;">else</span>
<span style="color: #008080;">41</span>         <span style="color: #0000ff;">this</span>.contextClassLoader =<span style="color: #000000;"> parent.contextClassLoader;
</span><span style="color: #008080;">42</span>     <span style="color: #0000ff;">this</span>.inheritedAccessControlContext =
<span style="color: #008080;">43</span>             acc != <span style="color: #0000ff;">null</span> ?<span style="color: #000000;"> acc : AccessController.getContext();
</span><span style="color: #008080;">44</span>     <span style="color: #0000ff;">this</span>.target =<span style="color: #000000;"> target;
</span><span style="color: #008080;">45</span> <span style="color: #000000;">    setPriority(priority);
</span><span style="color: #008080;">46</span>     <span style="color: #008000;">//(2)</span><span style="color: #008000;">如果父线程的inheritableThreadLocal不为null</span>
<span style="color: #008080;">47</span>     <span style="color: #0000ff;">if</span> (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != <span style="color: #0000ff;">null</span><span style="color: #000000;">)
</span><span style="color: #008080;">48</span>         <span style="color: #008000;">//（3）</span><span style="color: #008000;">设置子线程中的inheritableThreadLocals为父线程的inheritableThreadLocals</span>
<span style="color: #008080;">49</span>         <span style="color: #0000ff;">this</span>.inheritableThreadLocals =
<span style="color: #008080;">50</span> <span style="color: #000000;">            ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);
</span><span style="color: #008080;">51</span>     <span style="color: #0000ff;">this</span>.stackSize =<span style="color: #000000;"> stackSize;
</span><span style="color: #008080;">52</span> 
<span style="color: #008080;">53</span>     tid =<span style="color: #000000;"> nextThreadID();
</span><span style="color: #008080;">54</span> }</pre>
</div>
<p>　　在init方法中，首先(1)处获取了当前线程(父线程)，然后（2）处判断当前父线程的inheritableThreadLocals是否为null，然后调用createInheritedMap将父线程的inheritableThreadLocals作为构造函数参数创建了一个新的ThreadLocalMap变量，然后赋值给子线程。下面是createInheritedMap方法和ThreadLocalMap的构造方法</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> ThreadLocalMap createInheritedMap(ThreadLocalMap parentMap) {
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> ThreadLocalMap(parentMap);
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">}
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span> <span style="color: #0000ff;">private</span><span style="color: #000000;"> ThreadLocalMap(ThreadLocalMap parentMap) {
</span><span style="color: #008080;"> 6</span>     Entry[] parentTable =<span style="color: #000000;"> parentMap.table;
</span><span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">int</span> len =<span style="color: #000000;"> parentTable.length;
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">    setThreshold(len);
</span><span style="color: #008080;"> 9</span>     table = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Entry[len];
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>     <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> j = 0; j &lt; len; j++<span style="color: #000000;">) {
</span><span style="color: #008080;">12</span>         Entry e =<span style="color: #000000;"> parentTable[j];
</span><span style="color: #008080;">13</span>         <span style="color: #0000ff;">if</span> (e != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">14</span>             @SuppressWarnings("unchecked"<span style="color: #000000;">)
</span><span style="color: #008080;">15</span>             ThreadLocal&lt;Object&gt; key = (ThreadLocal&lt;Object&gt;<span style="color: #000000;">) e.get();
</span><span style="color: #008080;">16</span>             <span style="color: #0000ff;">if</span> (key != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">17</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">调用重写的方法</span>
<span style="color: #008080;">18</span>                 Object value =<span style="color: #000000;"> key.childValue(e.value);
</span><span style="color: #008080;">19</span>                 Entry c = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Entry(key, value);
</span><span style="color: #008080;">20</span>                 <span style="color: #0000ff;">int</span> h = key.threadLocalHashCode &amp; (len - 1<span style="color: #000000;">);
</span><span style="color: #008080;">21</span>                 <span style="color: #0000ff;">while</span> (table[h] != <span style="color: #0000ff;">null</span><span style="color: #000000;">)
</span><span style="color: #008080;">22</span>                     h =<span style="color: #000000;"> nextIndex(h, len);
</span><span style="color: #008080;">23</span>                 table[h] =<span style="color: #000000;"> c;
</span><span style="color: #008080;">24</span>                 size++<span style="color: #000000;">;
</span><span style="color: #008080;">25</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">26</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">27</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">28</span> }</pre>
</div>
<p>　　在构造函数中将父线程的inheritableThreadLocals成员变量的值赋值到新的ThreadLocalMap对象中。返回之后赋值给子线程的inheritableThreadLocals。总之，InheritableThreadLocals类通过重写getMap和createMap两个方法将本地变量保存到了具体线程的inheritableThreadLocals变量中，当线程通过InheritableThreadLocals实例的set或者get方法设置变量的时候，就会创建当前线程的inheritableThreadLocals变量。而父线程创建子线程的时候，ThreadLocalMap中的构造函数会将父线程的inheritableThreadLocals中的变量复制一份到子线程的inheritableThreadLocals变量中。</p>
<h1>六、从ThreadLocalMap看ThreadLocal使用不当的内存泄漏问题</h1>
<h3>1、基础概念&nbsp;</h3>
<p>　　首先我们先看看ThreadLocalMap的类图，在前面的介绍中，我们知道ThreadLocal只是一个工具类，他为用户提供get、set、remove接口操作实际存放本地变量的threadLocals（调用线程的成员变量），也知道threadLocals是一个ThreadLocalMap类型的变量，下面我们来看看ThreadLocalMap这个类。在此之前，我们回忆一下Java中的四种引用类型，相关GC只是参考前面系列的文章(<a href="https://www.cnblogs.com/fsmly/category/1387642.html" target="_blank">JVM相关</a>)</p>
<p>①强引用：Java中默认的引用类型，一个对象如果具有强引用那么只要这种引用还存在就不会被GC。</p>
<p>②软引用：简言之，如果一个对象具有弱引用，在JVM发生OOM之前（即内存充足够使用），是不会GC这个对象的；只有到JVM内存不足的时候才会GC掉这个对象。软引用和一个引用队列联合使用，如果软引用所引用的对象被回收之后，该引用就会加入到与之关联的引用队列中</p>
<p>③弱引用（这里讨论ThreadLocalMap中的Entry类的重点）：如果一个对象只具有弱引用，那么这个对象就会被垃圾回收器GC掉(被弱引用所引用的对象只能生存到下一次GC之前，当发生GC时候，无论当前内存是否足够，弱引用所引用的对象都会被回收掉)。弱引用也是和一个引用队列联合使用，如果弱引用的对象被垃圾回收期回收掉，JVM会将这个引用加入到与之关联的引用队列中。若引用的对象可以通过弱引用的get方法得到，当引用的对象呗回收掉之后，再调用get方法就会返回null</p>
<p>④虚引用：虚引用是所有引用中最弱的一种引用，其存在就是为了将关联虚引用的对象在被GC掉之后收到一个通知。（不能通过get方法获得其指向的对象）</p>
<p><img src="https://img2018.cnblogs.com/blog/1368768/201906/1368768-20190614105112553-1657649661.png" alt="" width="547" height="188" /></p>
<h3>2、分析ThreadLocalMap内部实现</h3>
<p>　　上面我们知道ThreadLocalMap内部实际上是一个Entry数组<img src="https://img2018.cnblogs.com/blog/1368768/201906/1368768-20190614112107515-173627228.png" alt="" width="158" height="25" />，我们先看看Entry的这个内部类</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #008000;">/**</span>
<span style="color: #008080;"> 2</span> <span style="color: #008000;"> * 是继承自WeakReference的一个类，该类中实际存放的key是
</span><span style="color: #008080;"> 3</span> <span style="color: #008000;"> * 指向ThreadLocal的弱引用和与之对应的value值(该value值
</span><span style="color: #008080;"> 4</span> <span style="color: #008000;"> * 就是通过ThreadLocal的set方法传递过来的值)
</span><span style="color: #008080;"> 5</span> <span style="color: #008000;"> * 由于是弱引用，当get方法返回null的时候意味着坑能引用
</span><span style="color: #008080;"> 6</span>  <span style="color: #008000;">*/</span>
<span style="color: #008080;"> 7</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">class</span> Entry <span style="color: #0000ff;">extends</span> WeakReference&lt;ThreadLocal&lt;?&gt;&gt;<span style="color: #000000;"> {
</span><span style="color: #008080;"> 8</span>     <span style="color: #008000;">/**</span><span style="color: #008000;"> value就是和ThreadLocal绑定的 </span><span style="color: #008000;">*/</span>
<span style="color: #008080;"> 9</span> <span style="color: #000000;">    Object value;
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>     <span style="color: #008000;">//</span><span style="color: #008000;">k：ThreadLocal的引用，被传递给WeakReference的构造方法</span>
<span style="color: #008080;">12</span>     Entry(ThreadLocal&lt;?&gt;<span style="color: #000000;"> k, Object v) {
</span><span style="color: #008080;">13</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(k);
</span><span style="color: #008080;">14</span>         value =<span style="color: #000000;"> v;
</span><span style="color: #008080;">15</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">16</span> <span style="color: #000000;">}
</span><span style="color: #008080;">17</span> <span style="color: #008000;">//</span><span style="color: #008000;">WeakReference构造方法(public class WeakReference&lt;T&gt; extends Reference&lt;T&gt; )</span>
<span style="color: #008080;">18</span> <span style="color: #0000ff;">public</span><span style="color: #000000;"> WeakReference(T referent) {
</span><span style="color: #008080;">19</span>     <span style="color: #0000ff;">super</span>(referent); <span style="color: #008000;">//</span><span style="color: #008000;">referent：ThreadLocal的引用</span>
<span style="color: #008080;">20</span> <span style="color: #000000;">}
</span><span style="color: #008080;">21</span> 
<span style="color: #008080;">22</span> <span style="color: #008000;">//</span><span style="color: #008000;">Reference构造方法     </span>
<span style="color: #008080;">23</span> <span style="color: #000000;">Reference(T referent) {
</span><span style="color: #008080;">24</span>     <span style="color: #0000ff;">this</span>(referent, <span style="color: #0000ff;">null</span>);<span style="color: #008000;">//</span><span style="color: #008000;">referent：ThreadLocal的引用</span>
<span style="color: #008080;">25</span> <span style="color: #000000;">}
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span> Reference(T referent, ReferenceQueue&lt;? <span style="color: #0000ff;">super</span> T&gt;<span style="color: #000000;"> queue) {
</span><span style="color: #008080;">28</span>     <span style="color: #0000ff;">this</span>.referent =<span style="color: #000000;"> referent;
</span><span style="color: #008080;">29</span>     <span style="color: #0000ff;">this</span>.queue = (queue == <span style="color: #0000ff;">null</span>) ?<span style="color: #000000;"> ReferenceQueue.NULL : queue;
</span><span style="color: #008080;">30</span> }</pre>
</div>
<p>　　在上面的代码中，我们可以看出，当前ThreadLocal的引用k被传递给WeakReference的构造函数，所以ThreadLocalMap中的key为ThreadLocal的弱引用。当一个线程调用ThreadLocal的set方法设置变量的时候，当前线程的ThreadLocalMap就会存放一个记录，这个记录的key值为ThreadLocal的弱引用，value就是通过set设置的值。如果当前线程一直存在且没有调用该ThreadLocal的remove方法，如果这个时候别的地方还有对ThreadLocal的引用，那么当前线程中的ThreadLocalMap中会存在对ThreadLocal变量的引用和value对象的引用，是不会释放的，就会造成内存泄漏。</p>
<p>　　考虑这个ThreadLocal变量没有其他强依赖，如果当前线程还存在，由于线程的ThreadLocalMap里面的key是弱引用，所以当前线程的ThreadLocalMap里面的ThreadLocal变量的弱引用在gc的时候就被回收，但是对应的value还是存在的这就可能造成内存泄漏(因为这个时候ThreadLocalMap会存在key为null但是value不为null的entry项)。</p>
<p>　　总结：THreadLocalMap中的Entry的key使用的是ThreadLocal对象的弱引用，在没有其他地方对ThreadLoca依赖，ThreadLocalMap中的ThreadLocal对象就会被回收掉，但是对应的不会被回收，这个时候Map中就可能存在key为null但是value不为null的项，这需要实际的时候使用完毕及时调用remove方法避免内存泄漏。</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2019-06-14 11:34</span>&nbsp;
<a href="https://www.cnblogs.com/fsmly/">风沙迷了眼</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11020641" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(11020641);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 425851, cb_blogApp = 'fsmly', cb_blogUserGuid = 'b3c6765b-cb6a-4061-bdd0-08d5866282ce';
    var cb_entryId = 11020641, cb_entryCreatedDate = '2019-06-14 11:34', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 风沙迷了眼
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <script language="javascript" type="text/javascript">
// 生成目录索引列表
// ref: http://www.cnblogs.com/wangqiguo/p/4355032.html
// modified by: zzq
function GenerateContentList()
{
    var mainContent = $('#cnblogs_post_body');
    var h2_list = $('#cnblogs_post_body h1');//如果你的章节标题不是h2,只需要将这里的h2换掉即可

    if(mainContent.length < 1)
        return;
 
    if(h2_list.length>0)
    {
        var content = '<a name="_labelTop"></a>';
        content += '<div id="navCategory" style="color:#152e97;">';
        content += '<p style="font-size:18px;"><b>目录</b></p>';
        content += '<ul>';
        for(var i=0; i<h2_list.length; i++)
        {
            var go_to_top = '<div style="text-align: right;"><a href="#_labelTop" style="color:#f68a33">回到顶部</a><a name="_label' + i + '"></a></div>';
            $(h2_list[i]).before(go_to_top);
            
            var h3_list = $(h2_list[i]).nextAll("h2");
            var li3_content = '';
            for(var j=0; j<h3_list.length; j++)
            {
                var tmp = $(h3_list[j]).prevAll('h2').first();
                if(!tmp.is(h2_list[i]))
                    break;
                var li3_anchor = '<a name="_label' + i + '_' + j + '"></a>';
                $(h3_list[j]).before(li3_anchor);
                li3_content += '<li><a href="#_label' + i + '_' + j + '">' + $(h3_list[j]).text() + '</a></li>';
            }
            
            var li2_content = '';
            if(li3_content.length > 0)
                li2_content = '<li><a href="#_label' + i + '">' + $(h2_list[i]).text() + '</a><ul>' + li3_content + '</ul></li>';
            else
                li2_content = '<li><a href="#_label' + i + '">' + $(h2_list[i]).text() + '</a></li>';
            content += li2_content;
        }
        content += '</ul>';
        content += '</div><p>&nbsp;</p>';
        content += '<hr style="height:1px;border:none;border-top:1px dashed #0066CC;"/>';
        if($('#cnblogs_post_body').length != 0 )
        {
            $($('#cnblogs_post_body')[0]).prepend(content);
        }
    }   
}

GenerateContentList();
</script>
    </div>
</body>
</html>