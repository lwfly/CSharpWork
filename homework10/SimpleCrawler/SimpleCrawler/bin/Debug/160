<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="IEEE754 浮点数精度问题" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>浮点数精度上误差 - 喜欢兰花山丘 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=Z9Vw4btcgJmrpUEjY_SgebmTmDXJ_hPFoST7ad2aJp4" />
    <link id="MainCss" rel="stylesheet" href="/skins/simpleclear/bundle-simpleclear.min.css?v=VK2UnJ8cJRhid2HBuGo4mQJdQ6E3Xlp7fD_jRXm5PUU" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/simpleclear/bundle-simpleclear-mobile.min.css?v=DidnFOvv24-VeVpMoJxhxZWs9iNA_ZwNuLjfe3iZZR8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/life2refuel/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/life2refuel/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/life2refuel/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 248606;
        var currentBlogApp = 'life2refuel';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'SimpleClear';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    
</head>
<body>
    <a name="top"></a>
    
    <div id="main">
    <div id="header">
        
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/life2refuel/">喜欢兰花山丘</a>
</h1>
<p id="tagline">
飘云簇簇, 山道绵绵
</p>


    </div>
    <div id="post_detail">
<div class="post">
    <h2 class="postTitle">
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/life2refuel/p/12732873.html">浮点数精度上误差</a>
</h2>
    <div class="postText">
    <div id="cnblogs_post_description" style="display: none">
        IEEE754 浮点数精度问题
    </div>
<div id="cnblogs_post_body" class="blogpost-body ">
    <p>　　在我刚接触编程的时候, 那时候面试小题目很喜欢问下面这几类问题&nbsp;</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1'&nbsp; 浮点数如何和零比较大小?</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2'&nbsp; 浮点数如何转为整型?</p>
<p>然后过了七八年后这类问题应该很少出现在面试中了吧.&nbsp; 刚好最近我遇到线上 bug,&nbsp; 同大家交流科普下</p>
<p>&nbsp;</p>
<p><strong>问题最小现场</strong></p>
<div class="cnblogs_code">
<pre>#include &lt;stdio.h&gt;

<span style="color: #0000ff;">int</span> main(<span style="color: #0000ff;">void</span><span style="color: #000000;">) {
    </span><span style="color: #0000ff;">float</span> a = <span style="color: #800080;">2.01f</span><span style="color: #000000;">;
    </span><span style="color: #0000ff;">double</span> b = <span style="color: #800080;">2.01</span><span style="color: #000000;">;

    printf(</span><span style="color: #800000;">"</span><span style="color: #800000;">a1 : 2.01 * 1000 = %f\n</span><span style="color: #800000;">"</span>, a * <span style="color: #800080;">1000</span>);             <span style="color: #008000;">//</span><span style="color: #008000;"> a1 : 2.01 * 1000      = 2010.000000</span>
    printf(<span style="color: #800000;">"</span><span style="color: #800000;">a2 : int(2.01 * 1000) = %d\n</span><span style="color: #800000;">"</span>, (<span style="color: #0000ff;">int</span>)(a * <span style="color: #800080;">1000</span>)); <span style="color: #008000;">//</span><span style="color: #008000;"> a2 : int(2.01 * 1000) = 2010</span>
<span style="color: #000000;">
    printf(</span><span style="color: #800000;">"</span><span style="color: #800000;">b1 : 2.01 * 1000 = %lf\n</span><span style="color: #800000;">"</span>, b * <span style="color: #800080;">1000</span>);            <span style="color: #008000;">//</span><span style="color: #008000;"> b1 : 2.01 * 1000      = 2010.000000</span>
    printf(<span style="color: #800000;">"</span><span style="color: #800000;">b2 : int(2.01 * 1000) = %d\n</span><span style="color: #800000;">"</span>, (<span style="color: #0000ff;">int</span>)(b * <span style="color: #800080;">1000</span>)); <span style="color: #008000;">//</span><span style="color: #008000;"> b2 : int(2.01 * 1000) = 2009</span>
}</pre>
</div>
<p>(用 Go Java 效果是一样的, 绝大部分实现都是严格遵循 IEEE754 标准</p>
<p>&nbsp;</p>
<p><strong>问题解答</strong></p>
<p>其中 a1 和 b1 在 C 中 等价于下面的代码</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">float</span> a = <span style="color: #800080;">2.01f</span><span style="color: #000000;">;
</span><span style="color: #0000ff;">double</span> b = <span style="color: #800080;">2.01</span><span style="color: #000000;">;

printf(</span><span style="color: #800000;">"</span><span style="color: #800000;">a1 : 2.01 * 1000 = %f\n</span><span style="color: #800000;">"</span>, (<span style="color: #0000ff;">double</span>)(a * <span style="color: #800080;">1000</span><span style="color: #000000;">));

printf(</span><span style="color: #800000;">"</span><span style="color: #800000;">b1 : 2.01 * 1000 = %f\n</span><span style="color: #800000;">"</span>, b * <span style="color: #800080;">1000</span>);</pre>
</div>
<p>其中 printf float 其实相当于 printf (double) 去处理的. 具体可以看这类源码&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">#define</span> PARSE_FLOAT_VA_ARG(INFO)                          \
  <span style="color: #0000ff;">do</span><span style="color: #000000;">                                          \
    {                                          \
      INFO.is_binary128 </span>= <span style="color: #800080;">0</span><span style="color: #000000;">;                              \
      </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (is_long_double)                              \
    the_arg.pa_long_double </span>= va_arg (ap, <span style="color: #0000ff;">long</span> <span style="color: #0000ff;">double</span><span style="color: #000000;">);              \
      </span><span style="color: #0000ff;">else</span><span style="color: #000000;">                                      \
    the_arg.pa_double </span>= va_arg (ap, <span style="color: #0000ff;">double</span><span style="color: #000000;">);                  \
    }                                          \
  </span><span style="color: #0000ff;">while</span> (<span style="color: #800080;">0</span>)</pre>
</div>
<p>其次二者输出打印的数据内容一样. 本质原因是, double 尾数的高23位和float的尾数23位一样.</p>
<p>如果你用 %.8f 可能就不一样了.&nbsp;&nbsp;</p>
<p>(float : 1 + 8 +23, 小数点后精度 6-7)</p>
<p>(double : 1 + 11 + 52, 小数点后精度 15-16)</p>
<p>简单的, 我们可以用下面代码去验证&nbsp;</p>
<div class="cnblogs_code">
<pre>#include &lt;stdio.h&gt;

<span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> print_byte(unsigned <span style="color: #0000ff;">char</span> <span style="color: #0000ff;">byte</span><span style="color: #000000;">) {
    printf(</span><span style="color: #800000;">"</span><span style="color: #800000;">%d%d%d%d%d%d%d%d</span><span style="color: #800000;">"</span><span style="color: #000000;">
        , ((</span><span style="color: #0000ff;">byte</span> &gt;&gt; <span style="color: #800080;">7</span>) &amp; <span style="color: #800080;">1</span><span style="color: #000000;">) 
        , ((</span><span style="color: #0000ff;">byte</span> &gt;&gt; <span style="color: #800080;">6</span>) &amp; <span style="color: #800080;">1</span><span style="color: #000000;">)
        , ((</span><span style="color: #0000ff;">byte</span> &gt;&gt; <span style="color: #800080;">5</span>) &amp; <span style="color: #800080;">1</span><span style="color: #000000;">)
        , ((</span><span style="color: #0000ff;">byte</span> &gt;&gt; <span style="color: #800080;">4</span>) &amp; <span style="color: #800080;">1</span><span style="color: #000000;">)
        , ((</span><span style="color: #0000ff;">byte</span> &gt;&gt; <span style="color: #800080;">3</span>) &amp; <span style="color: #800080;">1</span><span style="color: #000000;">)
        , ((</span><span style="color: #0000ff;">byte</span> &gt;&gt; <span style="color: #800080;">2</span>) &amp; <span style="color: #800080;">1</span><span style="color: #000000;">)
        , ((</span><span style="color: #0000ff;">byte</span> &gt;&gt; <span style="color: #800080;">1</span>) &amp; <span style="color: #800080;">1</span><span style="color: #000000;">)
        , ((</span><span style="color: #0000ff;">byte</span> &gt;&gt; <span style="color: #800080;">0</span>) &amp; <span style="color: #800080;">1</span><span style="color: #000000;">)
    );
}

</span><span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> print_number(<span style="color: #0000ff;">const</span> <span style="color: #0000ff;">void</span> *<span style="color: #000000;"> data, size_t n) {
    </span><span style="color: #0000ff;">const</span> unsigned <span style="color: #0000ff;">char</span> * bytes =<span style="color: #000000;"> data;

# </span><span style="color: #0000ff;">if</span> __BYTE_ORDER__ ==<span style="color: #000000;"> __ORDER_LITTLE_ENDIAN__
    </span><span style="color: #0000ff;">for</span> (size_t i = n; i &gt; <span style="color: #800080;">0</span>; i--<span style="color: #000000;">) {
        print_byte(bytes[i</span>-<span style="color: #800080;">1</span><span style="color: #000000;">]);
    }
# </span><span style="color: #0000ff;">else</span>
    <span style="color: #0000ff;">for</span> (size_t i = <span style="color: #800080;">0</span>; i &lt; n; i++<span style="color: #000000;">) {
        print_byte(bytes[i]);
    }
# endif
}

</span><span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> print_float(<span style="color: #0000ff;">float</span><span style="color: #000000;"> num) {
    printf(</span><span style="color: #800000;">"</span><span style="color: #800000;"> float = </span><span style="color: #800000;">"</span><span style="color: #000000;">);
    print_number(</span>&amp;num, <span style="color: #0000ff;">sizeof</span><span style="color: #000000;"> num);
    printf(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n</span><span style="color: #800000;">"</span><span style="color: #000000;">);
}

</span><span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> print_double(<span style="color: #0000ff;">double</span><span style="color: #000000;"> num) {
    printf(</span><span style="color: #800000;">"</span><span style="color: #800000;">double = </span><span style="color: #800000;">"</span><span style="color: #000000;">);
    print_number(</span>&amp;num, <span style="color: #0000ff;">sizeof</span><span style="color: #000000;"> num);
    printf(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n</span><span style="color: #800000;">"</span><span style="color: #000000;">);
}

</span><span style="color: #0000ff;">int</span> main(<span style="color: #0000ff;">void</span><span style="color: #000000;">) {
    </span><span style="color: #0000ff;">float</span> a = <span style="color: #800080;">2.01f</span><span style="color: #000000;">;
    </span><span style="color: #0000ff;">double</span> b = <span style="color: #800080;">2.01</span><span style="color: #000000;">;

    print_float(a);
    print_double(b);

    printf(</span><span style="color: #800000;">"</span><span style="color: #800000;"> float 2.01f + %%.%df = %.*f\n</span><span style="color: #800000;">"</span>,  <span style="color: #800080;">8</span>, <span style="color: #800080;">8</span><span style="color: #000000;">, a);
    printf(</span><span style="color: #800000;">"</span><span style="color: #800000;">double 2.01  + %%.%df = %.*lf\n</span><span style="color: #800000;">"</span>, <span style="color: #800080;">8</span>, <span style="color: #800080;">8</span><span style="color: #000000;">, b);
}</span></pre>
</div>
<p>&nbsp;</p>
<p>在 window 和 ubuntu 得到的测试数据如下&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">/*</span><span style="color: #008000;">
  float = 01000000000000001010001111010111
 double = 0100000000000000000101000111101011100001010001111010111000010100

 float  2.01f = 0 10000000    00000001010001111010111
 double 2.01  = 0 10000000000 00000001010001111010111 00001010001111010111000010100

  float 2.01f + %.6f = 2.010000
 double 2.01  + %.6f = 2.010000

 float 2.01f + %.7f = 2.0100000
double 2.01  + %.7f = 2.0100000

 float 2.01f + %.8f = 2.00999999
double 2.01  + %.8f = 2.01000000

 float 2.01f + %.10f = 2.0099999905
double 2.01  + %.10f = 2.0100000000

 float 2.01f + %.15f = 2.009999990463257
double 2.01  + %.15f = 2.010000000000000

 float 2.01f + %.16f = 2.0099999904632568
double 2.01  + %.16f = 2.0099999999999998

 float 2.01f + %.17f = 2.00999999046325684
double 2.01  + %.17f = 2.00999999999999979
 </span><span style="color: #008000;">*/</span></pre>
</div>
<p>明显可以看出来 a = 2.01f 和 b = 2.01 在内存中二者是不一样的. 即 a != b, a * 1000 != b * 1000. 有兴趣的可以自行去实验.&nbsp;</p>
<p>&nbsp;</p>
<p><strong>问题解答继续</strong></p>
<p>这里说说 a2 和 b2 case 造成的原因.</p>
<div class="cnblogs_code">
<pre>printf(<span style="color: #800000;">"</span><span style="color: #800000;">a2 : int(2.01 * 1000) = %d\n</span><span style="color: #800000;">"</span>, (<span style="color: #0000ff;">int</span>)(a * <span style="color: #800080;">1000</span>)); <span style="color: #008000;">//</span><span style="color: #008000;"> a2 : int(2.01 * 1000) = 2010</span>
<span style="color: #000000;">
printf(</span><span style="color: #800000;">"</span><span style="color: #800000;">b2 : int(2.01 * 1000) = %d\n</span><span style="color: #800000;">"</span>, (<span style="color: #0000ff;">int</span>)(b * <span style="color: #800080;">1000</span>)); <span style="color: #008000;">//</span><span style="color: #008000;"> b2 : int(2.01 * 1000) = 2009</span></pre>
</div>
<p>&nbsp;</p>
<p>我们首先获取其内存布局&nbsp;</p>
<div class="cnblogs_code">
<pre> <span style="color: #0000ff;">float</span> <span style="color: #800080;">2010.0f</span> = <span style="color: #800080;">0</span> <span style="color: #800080;">10001001</span>    <span style="color: #800080;">11110110100000000000000</span>
<span style="color: #0000ff;">double</span> <span style="color: #800080;">2010.0</span>  = <span style="color: #800080;">0</span> <span style="color: #800080;">10000001001</span> <span style="color: #800080;">1111011001111111111111111111111111111111111111111111</span></pre>
</div>
<p>&nbsp;</p>
<p>随后借助场外信息, 引述 &lt;&lt;深入理解计算机系统-第三版&gt;&gt; 部分舍入概念</p>
<p><img src="https://img2020.cnblogs.com/blog/532523/202004/532523-20200428230119241-179937489.png" alt=""></p>
<p>&nbsp;误差来自浮点数无法精确表示和转换过程中舍入起的效果.&nbsp;</p>
<p>&nbsp;</p>
<p><strong>问题反思</strong></p>
<p>这类问题, 或多或少遇到过, 希望我们这里对这类问题做个了结 ~&nbsp;&nbsp;</p>
<p>此刻不知道有心人会不会着急下结论,</p>
<p>那以后的业务中还是别用 float 了, 或者直接用 double, 或者定点小数, 或者整数替代 float 等等 ...</p>
<p>这么考虑很不错, 在大多数领域是完全没有问题的. 也是值得推荐的.&nbsp;</p>
<p>补充下, 也有些领域例如嵌入式, 他们还是会用 float, 因为对他们而言 double 有的时候太浪费内存了,</p>
<p>还存在着地址对齐等问题.&nbsp;</p>
<p>虽然不同领域(场景)会有不同方式方法,&nbsp; 但有一点需要大家一块遵守, <strong>没有特殊情况别混着用</strong> ~&nbsp;</p>
<p>希望以上能帮助朋友们对这类问题知其所以然 ~</p>
<p>&nbsp;</p>
<p><strong>后记 -&nbsp;再见, 祝好运 ~</strong></p>
<p>　　错误是难免的, 欢迎交流指正, 当找个乐子 ~ 哈哈哈 ~</p>
<p>&nbsp;</p>
<h1 class="text-white" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0.5rem; font-family: PingFangSC-Regular, 'Noto Sans SC', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; line-height: 1.33; font-size: 2.4rem; background-color: #fafafa; color: #ffffff !important;">Summer</h1>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div></div>
    <p class="postfoot">posted on 
<span id="post-date">2020-04-28 23:34</span>&nbsp;
<a href="https://www.cnblogs.com/life2refuel/">喜欢兰花山丘</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12732873" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12732873);return false;">收藏</a></p>
</div>


<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 248606, cb_blogApp = 'life2refuel', cb_blogUserGuid = 'bf05250e-3bc5-e211-8d02-90b11c0b17d6';
    var cb_entryId = 12732873, cb_entryCreatedDate = '2020-04-28 23:34', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div></div>


</div>
<div id="rightmenu">
    
<div id="my_links">
<h3>导航</h3>
<ul>
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/life2refuel/">
首页</a>
</li>

<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%96%9C%E6%AC%A2%E5%85%B0%E8%8A%B1%E5%B1%B1%E4%B8%98">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/life2refuel/rss/">
订阅</a></li><!--<partial name="./Shared/_XmlLink.cshtml" model="Model" />-->
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>
</div>


    <div id="calendar">
        <div id="blog-calendar" style="display: none"></div>
    </div>
    <script>loadBlogDefaultCalendar();</script>
    
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
    <div id="blog_stats">
<h3>统计</h3>
<ul>
<li>随笔 - 
112</li>
<li>文章 - 
0</li>
<li>评论 - 
124
<!--<li>引用 - <partial name="./Shared/_PingTrackCount.cshtml" model="BlogServer.Web.Models.DetailBlogPage" />-->
</li>
</ul>
</div>


    <div id="blog-sidecolumn"></div>
    <script>loadBlogSideColumn();</script>
    <div id="footer">
	Powered by: 
	<br />
	
	
<a href="https://www.cnblogs.com/" id="Footer1_Hyperlink3" style="font-size: 12px; font-family: Verdana">博客园</a>
	<br />
	Copyright &copy; 2020 喜欢兰花山丘
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

</div>


</div>
    
</body>
</html>