<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="[TOC] Mutex 类 Mutex 中文为互斥，Mutex 类叫做互斥锁。它还可用于进程间同步的同步基元。 Mutex 跟 lock 相似，但是 Mutex 支持多个进程。Mutex 大约比 lo" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>C#多线程(4)：进程同步Mutex类 - 痴者工良 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=Z9Vw4btcgJmrpUEjY_SgebmTmDXJ_hPFoST7ad2aJp4" />
    <link id="MainCss" rel="stylesheet" href="/skins/codinglife/bundle-codinglife.min.css?v=hlpQ1CJDwwJXDxv2HNauUmW3NjyWzoMaw1uER19SLT0" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/whuanle/custom.css?v=mA&#x2B;FpFQUS/JIlY1IQJTjcdZUvw0=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/codinglife/bundle-codinglife-mobile.min.css?v=XjHfryC9ctsatIZz1dHn7TsRIqmwz9c3aj_6SCfHSDM" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/whuanle/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/whuanle/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/whuanle/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 406195;
        var currentBlogApp = 'whuanle';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'CodingLife';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/whuanle/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/whuanle/">痴者工良</a>
</h1>
<h2>
一个逗B的大学生，爱好技术交流，目前专注于.NET 全栈开发
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/whuanle/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E7%97%B4%E8%80%85%E5%B7%A5%E8%89%AF">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/whuanle/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
140&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
186</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/whuanle/p/12726724.html">C#多线程(4)：进程同步Mutex类</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#mutex-类">Mutex 类</a><ul><li><a href="#构造函数和方法">构造函数和方法</a></li><li><a href="#系统只能运行一个程序的实例">系统只能运行一个程序的实例</a></li><li><a href="#解释一下上面的示例">解释一下上面的示例</a></li><li><a href="#接替运行">接替运行</a></li><li><a href="#进程同步示例">进程同步示例</a></li><li><a href="#另外">另外</a></li></ul></li></ul></div></p>
<h2 id="mutex-类">Mutex 类</h2>
<p>Mutex 中文为互斥，Mutex 类叫做互斥锁。它还可用于进程间同步的同步基元。</p>
<p>
    <blockquote style="margin: 10px 0px; padding: 10px; border-left: 4px solid rgb(221, 221, 221); color: rgb(68, 68, 68); background-color: rgb(249, 249, 249); border-radius: 4px; font-size: 14px; overflow-wrap: break-word; font-family: "Helvetica Neue", 微软雅黑, "Microsoft Yahei", Helvetica, Arial, sans-serif">
Mutex 跟 lock 相似，但是 Mutex 支持多个进程。Mutex 大约比 lock 慢 20 倍。
    </blockquote>
</p>
<p>互斥锁(Mutex)，用于多线程中防止两条线程同时对一个公共资源进行读写的机制。</p>
<p>Windows 操作系统中，Mutex 同步对象有两个状态：</p>
<ul>
<li>signaled：未被任何对象拥有；</li>
<li>nonsignaled：被一个线程拥有；</li>
</ul>
<p>Mutex 只能在获得锁的线程中，释放锁。</p>
<h3 id="构造函数和方法">构造函数和方法</h3>
<p>Mutex 类其构造函数如下：</p>
<table>
<thead>
<tr>
<th>构造函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Mutex()</td>
<td>使用默认属性初始化 Mutex类的新实例。</td>
</tr>
<tr>
<td>Mutex(Boolean)</td>
<td>使用 Boolean 值（指示调用线程是否应具有互斥体的初始所有权）初始化 Mutex 类的新实例。</td>
</tr>
<tr>
<td>Mutex(Boolean, String)</td>
<td>使用 Boolean 值（指示调用线程是否应具有互斥体的初始所有权以及字符串是否为互斥体的名称）初始化 Mutex 类的新实例。</td>
</tr>
<tr>
<td>Mutex(Boolean, String, Boolean)</td>
<td>使用可指示调用线程是否应具有互斥体的初始所有权以及字符串是否为互斥体的名称的 Boolean 值和当线程返回时可指示调用线程是否已赋予互斥体的初始所有权的 Boolean 值初始化 Mutex 类的新实例。</td>
</tr>
</tbody>
</table>
<p>Mutex 对于进程同步有所帮助，例如其应用场景主要是控制系统只能运行一个此程序的实例。</p>
<p>
<div style="color: rgb(23, 23, 23); font-family: &quot;Segoe UI&quot;, SegoeUI, &quot;Segoe WP&quot;, &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, sans-serif; background-color: rgb(255, 241, 204);border-radius: 10px;padding:20px;">
Mutex 构造函数中的 String类型参数 叫做互斥量而互斥量是全局的操作系统对象。
<br />
Mutex 只要考虑实现进程间的同步，它会耗费比较多的资源，进程内请考虑 Monitor/lock。
</div>   
</p>
<p>Mutex 的常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Close()</td>
<td>释放由当前 WaitHandle 占用的所有资源。</td>
</tr>
<tr>
<td>Dispose()</td>
<td>释放由 WaitHandle 类的当前实例占用的所有资源。</td>
</tr>
<tr>
<td>OpenExisting(String)</td>
<td>打开指定的已命名的互斥体（如果已经存在）。</td>
</tr>
<tr>
<td>ReleaseMutex()</td>
<td>释放 Mutex一次。</td>
</tr>
<tr>
<td>TryOpenExisting(String, Mutex)</td>
<td>打开指定的已命名的互斥体（如果已经存在），并返回指示操作是否成功的值。</td>
</tr>
<tr>
<td>WaitOne()</td>
<td>阻止当前线程，直到当前 WaitHandle 收到信号。</td>
</tr>
<tr>
<td>WaitOne(Int32)</td>
<td>阻止当前线程，直到当前 WaitHandle 收到信号，同时使用 32 位带符号整数指定时间间隔（以毫秒为单位）。</td>
</tr>
<tr>
<td>WaitOne(Int32, Boolean)</td>
<td>阻止当前线程，直到当前的 WaitHandle 收到信号为止，同时使用 32 位带符号整数指定时间间隔，并指定是否在等待之前退出同步域。</td>
</tr>
<tr>
<td>WaitOne(TimeSpan)</td>
<td>阻止当前线程，直到当前实例收到信号，同时使用 TimeSpan 指定时间间隔。</td>
</tr>
<tr>
<td>WaitOne(TimeSpan, Boolean)</td>
<td>阻止当前线程，直到当前实例收到信号为止，同时使用 TimeSpan 指定时间间隔，并指定是否在等待之前退出同步域。</td>
</tr>
</tbody>
</table>
<p>关于 Mutex 类，我们可以先通过几个示例去了解它。</p>
<h3 id="系统只能运行一个程序的实例">系统只能运行一个程序的实例</h3>
<p>下面是一个示例，用于控制系统只能运行一个此程序的实例，不允许同时启动多次。</p>
<pre><code class="language-c#">    class Program
    {
        // 第一个程序
        const string name = &quot;www.whuanle.cn&quot;;
        private static Mutex m;
        static void Main(string[] args)
        {
            // 本程序是否是 Mutex 的拥有者
            bool firstInstance;
            m = new Mutex(false,name,out firstInstance);
            if (!firstInstance)
            {
                Console.WriteLine(&quot;程序已在运行！按下回车键退出！&quot;);
                Console.ReadKey();
                return;
            }
            Console.WriteLine(&quot;程序已经启动&quot;);
            Console.WriteLine(&quot;按下回车键退出运行&quot;);
            Console.ReadKey();
            m.ReleaseMutex();
            m.Close();
            return;
        }
    }
</code></pre>
<p>上面的代码中，有些地方前面没有讲，没关系，我们运行一下生成的程序先。</p>
<p><img src="https://img2020.cnblogs.com/blog/1315495/202004/1315495-20200418170918358-663320310.gif" alt=""></p>
<h3 id="解释一下上面的示例">解释一下上面的示例</h3>
<p>Mutex 的工作原理：</p>
<p>当两个或两个以上的线程同时访问共享资源时，操作系统需要一个同步机制来确保每次只有一个线程使用资源。</p>
<p>
    <blockquote style="margin: 10px 0px; padding: 10px; border-left: 4px solid rgb(221, 221, 221); color: rgb(68, 68, 68); background-color: rgb(249, 249, 249); border-radius: 4px; font-size: 14px; overflow-wrap: break-word; font-family: "Helvetica Neue", 微软雅黑, "Microsoft Yahei", Helvetica, Arial, sans-serif">
Mutex 是一种同步基元，Mutex 仅向一个线程授予独占访问共享资源的权限。这个权限依据就是 互斥体，当一个线程获取到互斥体后，其它线程也在试图获取互斥体时，就会被挂起(阻塞)，直到第一个线程释放互斥体。
    </blockquote>
</p>
<p>对应我们上一个代码示例中，实例化 Mutex 类的构造函数如下：</p>
<pre><code class="language-csharp">m = new Mutex(false,name,out firstInstance);
</code></pre>
<p>其构造函数原型如下：</p>
<pre><code class="language-csharp">public Mutex (bool initiallyOwned, string name, out bool createdNew);
</code></pre>
<br />
<p>前面我们提出过，Mutex 对象有两种状态，signaled 和 nonsignaled。</p>
<p>通过 new 来实例化 Mutex 类，会检查系统中此互斥量 name 是否已经被使用，如果没有被使用，则会创建 name 互斥量并且此线程拥有此互斥量的使用权；此时 <code>createdNew == true</code>。</p>
<p>那么 initiallyOwned ，它的作用是是否允许线程是否能够获取到此互斥量的初始化所有权。因为我们希望只有一个程序能够在后台运行，因此我们要设置为 false。</p>
<p>驱动开发中关于Mutex ：<a href="https://docs.microsoft.com/zh-cn/windows-hardware/drivers/kernel/introduction-to-mutex-objects">https://docs.microsoft.com/zh-cn/windows-hardware/drivers/kernel/introduction-to-mutex-objects</a></p>
<p>对了， Mutex 的 参数中，name 是非常有讲究的。</p>
<p>在运行终端服务的服务器上，命名系统 mutex 可以有两个级别的可见性。</p>
<ul>
<li>如果其名称以前缀 &quot;Global&quot; 开头，则 mutex 在所有终端服务器会话中可见。</li>
<li>如果其名称以前缀 &quot;Local&quot; 开头，则 mutex 仅在创建它的终端服务器会话中可见。 在这种情况下，可以在服务器上的其他每个终端服务器会话中存在具有相同名称的单独 mutex。</li>
</ul>
<p>如果在创建已命名的 mutex 时未指定前缀，则采用前缀 &quot;Local&quot;。 在终端服务器会话中，两个互斥体的名称只是它们的前缀不同，它们都是对终端服务器会话中的所有进程都可见。</p>
<p>也就是说，前缀名称 &quot;Global&quot; 和 &quot;Local&quot; 描述互斥体名称相对于终端服务器会话的作用域，而不是相对于进程。</p>
<p>请参考：</p>
<p><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.threading.mutex?view=netcore-3.1#methods">https://docs.microsoft.com/zh-cn/dotnet/api/system.threading.mutex?view=netcore-3.1#methods</a></p>
<p><a href="https://www.cnblogs.com/suntp/p/8258488.html">https://www.cnblogs.com/suntp/p/8258488.html</a></p>
<h3 id="接替运行">接替运行</h3>
<p>这里要实现，当同时点击一个程序时，只能有一个实例A可以运行，其它实例进入等待队列，等待A运行完毕后，然后继续运行队列中的下一个实例。</p>
<p>我们将每个程序比作一个人，模拟一个厕所坑位，每次只能有一个人上厕所，其他人需要排队等候。</p>
<p>使用 <code>WaitOne()</code> 方法来等待别的进程释放互斥量，即模拟排队；<code>ReleaseMutex()</code> 方法解除对坑位的占用。</p>
<pre><code class="language-C#">    class Program
    {
        // 第一个程序
        const string name = &quot;www.whuanle.cn&quot;;
        private static Mutex m;
        static void Main(string[] args)
        {
            // wc 还有没有位置
            bool firstInstance;
            m = new Mutex(true,name,out firstInstance);

            // 已经有人在上wc
            if (!firstInstance)
            {
                // 等待运行的实例退出，此进程才能运行。
                Console.WriteLine(&quot;排队等待&quot;);
                m.WaitOne();
                GoWC();
                return;
            }
            GoWC();

            return;
        }

        private static void GoWC()
        {
            Console.WriteLine(&quot; 开始上wc&quot;);
            Thread.Sleep(1000);
            Console.WriteLine(&quot; 开门&quot;);
            Thread.Sleep(1000);
            Console.WriteLine(&quot; 关门&quot;);
            Thread.Sleep(1000);
            Console.WriteLine(&quot; xxx&quot;);
            Thread.Sleep(1000);
            Console.WriteLine(&quot; 开门&quot;);
            Thread.Sleep(1000);
            Console.WriteLine(&quot; 离开wc&quot;);
            m.ReleaseMutex();
            Thread.Sleep(1000);
            Console.WriteLine(&quot; 洗手&quot;);
        }
    }
</code></pre>
<p><img src="https://img2020.cnblogs.com/blog/1315495/202004/1315495-20200418170954520-713019708.gif" alt=""></p>
<p>此时，我们使用了</p>
<pre><code class="language-csharp">            m = new Mutex(true,name,out firstInstance);
</code></pre>
<p>一个程序结束后，要允许其它线程能够创建 Mutex 对象获取互斥量，需要将构造函数的第一个参数设置为 true。</p>
<p>你也可以改成 false，看看会报什么异常。</p>
<p>你可以使用 <code>WaitOne(Int32)</code> 来设置等待时间，单位是毫秒，超过这个时间就不排队了，去别的地方上厕所。</p>
<p>为了避免出现问题，请考虑在 finally 块中执行 <code>m.ReleaseMutex()</code>。</p>
<h3 id="进程同步示例">进程同步示例</h3>
<p>这里我们实现一个这样的场景：</p>
<p>父进程 Parent 启动子进程 Children ，等待子进程 Children 执行完毕，子进程退出，父进程退出。</p>
<p>新建一个 .NET Core 控制台项目，名称为 Children，其 Progarm 中的代码如下</p>
<pre><code class="language-csharp">using System;
using System.Threading;

namespace Children
{
    class Program
    {
        const string name = &quot;进程同步示例&quot;;
        private static Mutex m;
        static void Main(string[] args)
        {
            Console.WriteLine(&quot;子进程被启动...&quot;);
            bool firstInstance;

            // 子进程创建互斥体
            m = new Mutex(true, name, out firstInstance);

            // 按照我们设计的程序，创建一定是成功的
            if (firstInstance)
            {
                Console.WriteLine(&quot;子线程执行任务&quot;);
                DoWork();
                Console.WriteLine(&quot;子线程任务完成&quot;);

                // 释放互斥体
                m.ReleaseMutex();
                // 结束程序
                return;
            }
            else
            {
                Console.WriteLine(&quot;莫名其妙的异常，直接退出&quot;);
            }
        }
        private static void DoWork()
        {
            for (int i = 0; i &lt; 5; i++)
            {
                Console.WriteLine(&quot;子线程工作中&quot;);
                Thread.Sleep(TimeSpan.FromSeconds(1));
            }
        }
    }
}

</code></pre>
<p>然后发布或生成项目，打开程序文件位置，复制线程文件路径。<br>
创建一个新项目，名为 Parent 的 .NET Core 控制台，其 Program 中的代码如下：</p>
<pre><code class="language-csharp">using System;
using System.Diagnostics;
using System.Threading;

namespace Parent
{
    class Program
    {
        const string name = &quot;进程同步示例&quot;;
        private static Mutex m;
        static void Main(string[] args)
        {
            // 晚一些再执行，我录屏要对正窗口位置
            Thread.Sleep(TimeSpan.FromSeconds(3));
            Console.WriteLine(&quot;父进程启动！&quot;);

            new Thread(() =&gt;
            {
                // 启动子进程
                Process process = new Process();
                process.StartInfo.UseShellExecute = true;
                process.StartInfo.CreateNoWindow = false;
                process.StartInfo.WorkingDirectory = @&quot;../../../ConsoleApp9\Children\bin\Debug\netcoreapp3.1&quot;;
                process.StartInfo.FileName = @&quot;../../../ConsoleApp9\Children\bin\Debug\netcoreapp3.1\Children.exe&quot;;
                process.Start();
                process.WaitForExit();
            }).Start();


            // 子进程启动需要一点时间
            Thread.Sleep(TimeSpan.FromSeconds(1));

            // 获取互斥体
            bool firstInstance;
            m = new Mutex(true, name, out firstInstance);

            // 说明子进程还在运行
            if (!firstInstance)
            {
                // 等待子进程运行结束
                Console.WriteLine(&quot;等待子进程运行结束&quot;);
                m.WaitOne();
                Console.WriteLine(&quot;子进程运行结束，程序将在3秒后自动退出&quot;);
                m.ReleaseMutex();
                Thread.Sleep(TimeSpan.FromSeconds(3));
                return;
            }
        }
    }
}

</code></pre>
<p>请将 Children 项目的程序文件路径，替换到 Parent 项目启动子进程的那部分字符串中。</p>
<p>然后启动 Parent.exe，可以观察到如下图的运行过程：</p>
<p><img src="https://img2020.cnblogs.com/blog/1315495/202004/1315495-20200418171021556-1819607275.gif" alt=""></p>
<h3 id="另外">另外</h3>
<p>构造函数中，如果为 <code>name</code> 指定 <code>null</code> 或空字符串，则将创建一个本地 Mutex 对象，只会在进程内有效。</p>
<p>Mutex 有些使用方法比较隐晦，可以参考 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.threading.mutex.-ctor?view=netcore-3.1#System_Threading_Mutex__ctor_System_Boolean_">https://docs.microsoft.com/zh-cn/dotnet/api/system.threading.mutex.-ctor?view=netcore-3.1#System_Threading_Mutex__ctor_System_Boolean_</a></p>
<p>另外打开互斥体，请参考</p>
<p><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.threading.mutex.openexisting?view=netcore-3.1">https://docs.microsoft.com/zh-cn/dotnet/api/system.threading.mutex.openexisting?view=netcore-3.1</a></p>
<p><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.threading.mutex.tryopenexisting?view=netcore-3.1">https://docs.microsoft.com/zh-cn/dotnet/api/system.threading.mutex.tryopenexisting?view=netcore-3.1</a></p>
<p>到目前为止，我们学习了排他锁 lock、Monitor、Mutex。下一篇我们将来学习非排他锁定结构的<code>Semaphore</code>和<code>SemaphoreSlim</code> 。</p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-18 16:58</span>&nbsp;
<a href="https://www.cnblogs.com/whuanle/">痴者工良</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12726724" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12726724);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 406195, cb_blogApp = 'whuanle', cb_blogUserGuid = 'b8263b87-b86b-4861-1de2-08d54dbac325';
    var cb_entryId = 12726724, cb_entryCreatedDate = '2020-04-18 16:58', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 痴者工良
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>