<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="检索数据&#xA; 排序检索数据&#xA; 过滤数据&#xA;使用通配符过滤&#xA;使用正则表达式进行搜索&#xA; 创建计算字段&#xA; 使用数据处理函数&#xA; 汇总数据&#xA;分组数据&#xA; 使用子查询&#xA;联结表&#xA; 创建高级联结&#xA;组合查询&#xA; 全文本搜索&#xA; " />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>MySQL基础知识和常用命令总结 - justisme - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=Z9Vw4btcgJmrpUEjY_SgebmTmDXJ_hPFoST7ad2aJp4" />
    <link id="MainCss" rel="stylesheet" href="/skins/custom/bundle-custom.min.css?v=1ssrnY3Il79Ok472qeVrpxlSprSXcHhYPgZC5S3wtVM" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/justisme/custom.css?v=7rnz5TtMcHt9VmgMA7H/K8T8fSI=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=-Yh290MhQyDeXLmvKTSses9H6-49lqbpXFh55zvS0w8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/justisme/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/justisme/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/justisme/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 597589;
        var currentBlogApp = 'justisme';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'Custom';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/justisme/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/justisme/">justisme</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/justisme/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/justisme">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/justisme/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
3&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
0</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/justisme/p/12797955.html">MySQL基础知识和常用命令总结</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
    <div id="cnblogs_post_description" style="display: none">
        检索数据
 排序检索数据
 过滤数据
使用通配符过滤
使用正则表达式进行搜索
 创建计算字段
 使用数据处理函数
 汇总数据
分组数据
 使用子查询
联结表
 创建高级联结
组合查询
 全文本搜索
 插入数据
更新和删除数据
 创建和操纵表
 使用视图
  使用存储过程
  使用游标
  使用触发器
 管理事务处理
  全球化和本地化
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <blockquote>
<p>说明：以下内容是阅读书籍&lt;&lt;MySQL必知必会&gt;&gt;的摘要和总结</p>
</blockquote>
<ol>
<li>检索数据</li>
<li>排序检索数据</li>
<li>过滤数据</li>
<li>使用通配符过滤</li>
<li>使用正则表达式进行搜索</li>
<li>创建计算字段</li>
<li>使用数据处理函数</li>
<li>汇总数据</li>
<li>分组数据</li>
<li>使用子查询</li>
<li>联结表</li>
<li>创建高级联结</li>
<li>组合查询</li>
<li>全文本搜索</li>
<li>插入数据</li>
<li>更新和删除数据</li>
<li>创建和操纵表</li>
<li>使用视图</li>
<li>使用存储过程</li>
<li>使用游标</li>
<li>使用触发器</li>
<li>管理事务处理</li>
<li>全球化和本地化</li>
<li>安全管理</li>
<li>数据库维护</li>
<li>改善性能.</li>
</ol>
<p>模式可以用来描述数据库中特定的表以及整个数据库,和其中表的关系<br>
<strong>行（row） 表</strong>中的一个记录</p>
<p><strong>必须先使用use命令打开数据库，才能读取其中的数据。</strong></p>
<pre><code class="language-sql">mysql&gt; show columns from user;//DESCRIBE
help show;
&gt; select  distinct prod_id prod_name,prod_price from products;//返回不同的行！DISTINCT，限制返回结果。LIMIT
SELECT prod_name,FROM products LIMIT 3,3(start,rows)
</code></pre>
<h3 id="help-命令">help 命令</h3>
<p>如果使用DISTINCT关键字，<strong>它必须直接放在所有列的前面</strong>,完全限定符：表名.列名<br>
<strong>子句（clause） SQL语句由子句构成，有些子句是必需的，而有的是可选的。</strong></p>
<h4 id="不同行distinct，排序order-by-xxx-desc">不同行distinct，排序order by XXX DESC</h4>
<pre><code class="language-sql">SELECT DISTINCT FOROM prod_name FROM products ORDER BY prod_name LIMIT 2,4;
</code></pre>
<p>结构体排序。先，，然后。。<strong>指定多列，用逗号隔开</strong>,DESC关键字<strong>只应用到直接位于其前面的列名</strong>,多列降序排列，则每个列都需要指定DESC关键字。</p>
<h3 id="子句次序-select-xx-from-xxx--where-xxxx-order-by-xx-desc--limit-1">子句次序 SELECT xx FROM XXX  WHERE xxxx ORDER BY xx DESC  LIMIT 1</h3>
<p><strong>单引号用来限定字符串</strong>。如果将值与<mark>串类型的列</mark>进行比较，则<mark>需要限定引号</mark>。用来与<strong>数值列进行比较的值不用引号</strong>。<strong>范围运算符between</strong></p>
<pre><code class="language-sql">SELECT prod_name,prod_price FROM prodects WHERE prod_price BETWEEN 4 AND 5;
SELECT prod_id ,prod_prices FROM produts WHERE  prod_id=1002 AND prod_price&lt;=10;
SELECT prod_id ,prod_prices FROM produts WHERE  prod_id NOT IN(1002,1004)AND prod_price&lt;=10;
SELECT prod_name FROM prodects WHERE prod_name LIKE jar%;
SELECT prod_name FROM prodects WHERE prod_name LIKE j_r%;
//WHERE prod_price is null
</code></pre>
<p><strong>MySQL允许给出多个WHERE子句</strong>。这些子句可以两种方式使用：以AND子句的方式或OR子句的方式使用,<strong>AND在计算次序中优先级更高，使用括号改变优先级</strong>，OR的泛化-- -- IN<br>
<strong>IN的最大优点是可以包含其他SELECT语句，使得能够更动态地建立WHERE子句</strong><br>
WHERE子句中的NOT操作符有且只有一个功能，那就是<strong>否定它之后所跟的任何条件</strong>。</p>
<p><strong>为在搜索子句中使用通配符，必须使用<mark>LIKE操作符</mark></strong>，<code>%表示任何字符出现任意次数</code>,<code>下划线只匹配单个字符</code>,通配符不要放在开始。<strong>正则表达式</strong></p>
<pre><code class="language-sql">SELECT prod_name FROM products 
WHERE prod_name REGEXP '1000'
ORDER BY prod_name ;//替代了LIKE
</code></pre>
<p>LIKE匹配整个列，而REGEXP在列值内进行匹配。使用^(开始）和$(结束）定位符（anchor）即可，为了匹配特殊字符，必须用\ \为前导。</p>
<p><strong>区分通配符和正则表达式(匹配范围、匹配几个字符之一，或者)</strong></p>
<p>可以使用预定义的字符集，称为字符类（character class）<br>
存储在表中的数据都不是应用程序所需要的。需要转换-- -<strong>计算字段</strong>，例如，拼接。没有列名，需要用AS来指定。计算字段的另一常见用途是对检索出的数据进行算术计算.</p>
<pre><code class="language-sql">SELECT Concat(RTrim(vend_name),' (',vend_country,')') AS vend_title
FROM vendors ORDER BY vend_name;
SELECT 2*4 XXX;//算术运算符
</code></pre>
<h3 id="使用处理函数，字符串，数字，日期，dbms信息">使用处理函数，字符串，数字，日期，DBMS信息</h3>
<p><strong>日期和时间函数在MySQL语言中具有重要的作用。</strong></p>
<blockquote>
<p>DateDiff() 计算两个日期之差</p>
</blockquote>
<p><mark>无论你什么时候指定一个日期，不管是插入或更新表值还是用WHERE子句进行过滤</mark>，<strong>日期必须为</strong><br>
<strong>格式yyyy-mm-dd</strong>。</p>
<p>datatime与date类型比较，<strong>截取相同部分比较<code>Date(xxx)</code></strong></p>
<h4 id="汇总数据aggregate-function">汇总数据aggregate function</h4>
<p>针对对象，<strong>列</strong>：avg,max(单列、忽略null),min ,sum,count()返回某列的行数</p>
<p>AVG()只用于单个列</p>
<p><strong>COUNT()函数进行计数</strong>。可利用COUNT()确定表中行的数目或符合特定条件的行的数目</p>
<ul>
<li>COUNT(*):对表中行的数目进行计数，不管表列中包含的是空值（NULL）还是非空值。</li>
<li><strong>COUNT(column)</strong>:对特定列中具有值的行进行计数，<strong>忽略NULL值。</strong></li>
</ul>
<pre><code class="language-sql">SELECT SUM(item*quantity) AS total_price 
FROM orderitems
WHERE order_num=23000;
SELECT AVG(DISTINCT prod_price) AS avg_price
FROM products
WHERE vend_id=2003;

SELECT COUNT(*) AS num_items,
		MIN(prod_price) AS price_min,
		MAX(prod_price) AS price_max,
		AVG(prod_price) AS price_avg,
FROM products
这些函数是高效设计的
</code></pre>
<h3 id="数据分组与过滤而不是整个表">数据分组与过滤,而<mark>不是整个表</mark></h3>
<p><strong>分组允许把数据分为多个逻辑组，以便能对每个组进行聚集计算</strong>。</p>
<p><mark>聚集对象默认是表</mark></p>
<pre><code class="language-sql">SELECT vend_id,COUNT(*) AS num_prods
FROM products
GROUP BY vend_id.//按照商家分组
</code></pre>
<p>这导致对每个vend_id，<strong>而不是整个表</strong>计算num_prods一次</p>
<p><mark>GROUP BY子句中列出的每个列都必须是检索列或有效的表达式（但不能是聚集函数）</mark>。如果在SELECT中使用表达式，则<strong>必须在GROUP BY子句中指定相同的表达式</strong>。不能使用别名。<strong>除聚集计算语句外，SELECT语句中的每个列都必须在GROUP BY子句中给.</strong></p>
<p>where-- &gt;groub by -- &gt;order by  desc  limit</p>
<h4 id="where过滤指定的是行而不是分组，分组过滤用having">WHERE过滤指定的是行而不是分组，分组过滤用having</h4>
<p><mark>目前为止所学过的所有类型的WHERE子句都可以用HAVING来替代</mark>。唯一的差别是WHERE过滤行，而HAVING过滤分组。HAVING支持所有WHERE操作符。语义相同，但针对对象不同。这里有另一种理解方法，<strong>WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤</strong>。</p>
<pre><code class="language-sql">SELECT cust_id,COUNT(*) AS orders 
FROM orders
GROUP BY cust_id
HAVING COUNT(*)&gt;2;
//它保留COUNT(*) &gt;=2（两个以上的订单）的那些分组
</code></pre>
<p>同时使用where和group by</p>
<pre><code class="language-sql">SELECT vend_id,COUNT(*) AS num_prods
FROM products
WHERE prod_price &gt;=10;//对所的行过滤，不管你是哪个组！体会，where是分组前的操作
GROUP BY vend_id
HAVING COUNT(*) &gt;=3;
</code></pre>
<h3 id="group-by-和order-by的区别">GROUP BY 和ORDER by的区别</h3>
<table>
<thead>
<tr>
<th>ORDER BY</th>
<th>GROUP BY</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>排序</strong>产生的输出</td>
<td>分组行。但输出可能不是分组的顺序</td>
</tr>
<tr>
<td>任意列都可以使用（甚至<br/>非选择的列也可以使用）</td>
<td><strong>只可能使用选择列或表达式列,SELECT中出现的</strong>，而且必须使用每个选择列表达式</td>
</tr>
<tr>
<td>不一定需要</td>
<td><strong>如果与聚集函数一起使用列（或表达式），则必须使用</strong>，</td>
</tr>
</tbody>
</table>
<p>千万不要仅依赖GROUP BY排序数据。SELE</p>
<pre><code class="language-sql">SELECT order_num ,SUM(quantity*item_prices) AS order_total
FROM orderitems
GROUP BY order_num//需要和select中的列相同，除了聚集函数
HAVING SUM(quantity*item_price)&gt;=50
ORDER BY order_total;
</code></pre>
<h3 id="select语句只有select子句是必须的，且select后面跟的是表达式">select语句只有select子句是必须的，且select后面跟的是表达式</h3>
<p>利用子查询进行过滤，select的结果可用于另一条SELECT语句的WHERE子句。<strong>内层的SELECT语句的列和外层的WHERE列相同</strong></p>
<pre><code class="language-sql">SELECT order_num FROM orderitems WHERE prod_id='INIT2';//20002,20004
SELECT cust_id FROM orders WHERE order_num IN(20002,20004)
 合并
SELECT cust_id 
FROM orders
WHERE order_num IN(SELECT order_num 
                   FROM orderitems
                   WHERE prod_id='INT2');//执行流程：从内向外。
//查询ID的信息。
SELECT cust_name,cust_contact
FROM customers
WHERE cust_id IN(SELECT cust_id//返回客户ID
                FROM orders 
                WHERE order_num IN(SELECT order_num//返回订单号列表
                                   FROM orderitems
                                   WHERE prod_id='INT2'));
                
</code></pre>
<p><strong>作为计算字段使用子查询</strong>，子查询：过滤或者使用计算字段</p>
<pre><code class="language-sql">--每个客户的总订单数
思路：先求单个客户的，然后使用子查询
SELECT COUNT(*) AS orders
FROM orders
WHERE cust_id=10001;
//为了对每个可以执行COUNT(*) ,子查询

SELECT cust_name,
		cust_state,
		(SELECT COUNT(*)
        FROM orders
        WHERE orders.cust_id=customers.cust_id) AS orders
 FROM customers
 ORDER BY cust_name;
</code></pre>
<h3 id="子查询构造过程：从内到外，逐渐进行。">子查询构造过程：从内到外，逐渐进行。</h3>
<p>测试时外层循环用硬编码，eg:where cust_id=23223;</p>
<p>子查询最常见的使用是<mark>在WHERE子句的IN操作符中</mark>，以及<mark>用来填充计算列</mark><br>
<strong>一类数据一个表</strong>。各表通过某些常用的值（即关系设计中的关系（relational））互相关联。<br>
外键（foreign key） 外键为某个表中的一列，它包含<strong>另一个表的主键值</strong>，定义了两个表之间的关系。</p>
<h3 id="连接：要连接的所有表和连接方式">连接：要连接的<mark>所有表</mark>和<mark>连接方式</mark></h3>
<pre><code class="language-sql">SELECT vend_name,prod_name,prod_price
FROM vendors AS v,products AS p--所有表
WHERE v.vend_id=p.vend_id-- 连接方式：equijoin，等值连接，又称内部联结
ORDER BY vend_name,prod_name;
完全限定列名消除二义性！！

SELECT vend_name,prod_name,prod_price
FROM vendors INNER JOIN products
ON vendors.vend_id=products.vend_id;
//多个表。列出所有，然后关联！！
</code></pre>
<p>其实，对于这种联结(等值连接、内部连接)可以使用稍微不同的语法来明确指定联结的类型。<code>FROM A,B WHERE A.col1=B.col2</code>可以简写为：inner join。联结是SQL中最重要最强大的特性</p>
<p><strong>使用哪种语法? ANSI SQL规范首选INNER JOIN语法</strong>，连接条件。</p>
<p><strong>别名除了用于列名和计算字段外，SQL还允许给表名起别名。</strong></p>
<ul>
<li>
<p>缩短SQL语句；</p>
</li>
<li>
<p><strong>允许在单条SELECT语句中<mark>多次使用相同的表</mark>。</strong>自连接</p>
</li>
</ul>
<pre><code class="language-sql">--物品有问题，该供应商的其他商品是否也有问题
SELECT prod_id,prod_name
FROM products
WHERE vend_id=(SELECT Vend_id
              	FROM products
              WHERE prod_id='DTNTR') --子查询
-- 联结
SELECT p1.prod_id,p1.prod_name
FROM products AS p1,products AS p2
WHERE p1.vend_id=p2.vend_id AND p2.prod_id='DTNTR' --级联操作和过滤数据。

</code></pre>
<p>联结包含了那些在相关表中没有关联行的行。这种类型的联结称为外部联结,需要与left或者right来指明</p>
<p>在使用OUTER JOIN语法时，必须使用RIGHT或LEFT关键字指定<strong>包括其所有行的表</strong>（RIGHT指出的是OUTER JOIN右边的表，而LEFT指出的是OUTER JOIN左边的表）</p>
<pre><code class="language-sql">SELECT customers.cust_id,COUNT(orders.order_num) AS num_ord
FROM customers RIGHT OUTER JION orders
ON orders.cust_id=customers.cust_id
</code></pre>
<p><strong>应该<mark>总是提供联结条件</mark>，否则会得出笛卡儿积。</strong></p>
<h3 id="多条sql-的组合查询-union">多条SQL 的组合查询 UNION</h3>
<p>MySQL也允许执行多个查询（多条SELECT语句）,并将结果作为单个查询结果集返回,<code>union</code>或者复合查询(compound query),<strong>组合查询和多个WHERE条件</strong></p>
<p>所需做的只是给出每条SELECT语句，在各条语句之间放上关键字UNION。<mark>UNION中的每个查询必须包含相同的列、表达式或聚集函数</mark>，因为返回的结果合为一个表</p>
<pre><code class="language-sql">--UNION从查询结果集中自动去除了重复的行
SELECT vend_id,prod_id,prod_price
FROM products
WHERE prod_price&lt;=5
UNION ALL--保留重复
SELECT vend_id,prod_id,prod_price
FROM proucts
WHERE vend_id IN(1001,1002)
ORDER BY vend_id,prod_price;--能使用一条ORDER BY子句，它必须出现在最后一条SELECT语句之后

----等价于多个where条件
SELECT vend_id ,prod_id,prod_price
FROM products
WHERE prod_price&lt;=5
	OR vend_id IN (1001,1002)
</code></pre>
<p>UNION几乎总是完成与多个WHERE条件相同的工作。UNION ALL为UNION的一种形式，它完成WHERE子句完成不了的工作。<strong>如果确实需要每个条件的匹配行全部出现（包括重复行），则必须使用UNION ALL而不是WHERE</strong>。</p>
<p>在用UNION组合查询时，只能使用一条ORDER BY子句，它必须出现在最后一条SELECT语句之后</p>
<h3 id="全文索引">全文索引</h3>
<pre><code class="language-sql">CREATE TABLE product_notes(
note_id int NOT NULL AUTO_INCREMENT,
prod_id char(10) NOT NULL,
note_date datetime NOT NULL,
note_text text NULL,

PRIMARY KEY(note_id),
FULLTEXT(note_text)
)ENGINE=MyISAM;
</code></pre>
<p><strong>MyISAM支持全文本搜索（对结果排序，较高优先级的行先返回，自带停用词列表(stopword)），而InnoDB不支持</strong><br>
子句<code>FULLTEXT(列名称)</code>的指示对它进行索引，<strong>先导入，后定义索引</strong>，在索引之后，使用两个函数Match()和Against()执行全文本搜索，其中Match()指定被搜索的列，Against()指定要使用的搜索表达式。</p>
<pre><code class="language-sql">SELECT note_text
FROM product_notes
WHERE Math(note_text) Against('rabbit') AS rank;
-- 效果上等价于LIKE ‘%rabbit%’,但效率不同。
SELECT note_text
FROM product_notes
WHERE note_text LIKE '%rabbit%';
</code></pre>
<h3 id="插入完整的行-insert-into-tables-values">插入完整的行 insert into tables values()</h3>
<pre><code class="language-sql">INSERT INT Customers(可以指定列名顺序)
VALUES(a),VALUES(b);-- 插入多个行
</code></pre>
<p><mark>总是使用列的列表</mark>。插入时提高整体性能，可以使用<code>INSERT LOW_PRIORITY INTO</code></p>
<p><strong>插入检索出的数据 insert select</strong>，列的位置。</p>
<pre><code class="language-sql">INSERT INTO customers(cust_id,cust_contact,cust_email,cust_name) SELECT 
cust_id,cust_contact,cust_email,cust_name 
FROM custnew;
</code></pre>
<h3 id="更新数据update以where结束和删除数据delete">更新数据(update,以where结束)和删除数据(delete)</h3>
<pre><code class="language-sql">UPDATE (IGNORE) customers--  表名
SET cust_email='xxx@ffdd.com'，cust_name='ddd'
WHERE cust_id=10004;
</code></pre>
<p>不要省略WHERE子句(对update和delete都有效),UPDATE语句总是<strong>以要更新的表的名字开始</strong>.</p>
<p><strong>DELETE FROM要求指定从中删除数据的表名</strong>。WHERE子句过滤要删除的行。</p>
<pre><code class="language-sql">DELETE FROM customers
WHERE cust_id=10004;
</code></pre>
<p>DELETE不需要列名或通配符。<mark>DELETE删除整行而不是删除列。为了删除指定的列，请使用UPDATE语句</mark>。<br>
更快的删除：truncate：TRUNCATE实际是删除原来的表并重新创建一个表，而不是逐行删除表中的数据在对<strong>UPDATE或DELETE语句使用WHERE子句前，应该先用SELECT进行测试</strong>，保证它过滤的是正确的记录，以防编写的WHERE子句不正确。应该使用引用完整性。使用默认值而不是NULL值</p>
<h3 id="创建表：表名列名">创建表：表名+列名</h3>
<pre><code class="language-sql">CREATE TABLE orders(
order_num int NOT NULL AUTO_INCREMENT,
cust_id int NOT NULL DEFAULT 1,-- 默认值
PRIMARY KEY(order_num)
)ENGINE=InnoDB;
</code></pre>
<p>NULL为默认设置.使用的最简单的编号是下一个编号.AUTO_INCREMENT;</p>
<p><strong>每个表只允许一个AUTO_INCREMENT列,而且它必须被索引（如，通过使它成为主键）。</strong>通过<code>last_insert_id()函数</code>获得最后一个AUTO_INCREMENT.存储引擎负责创建表等操作。</p>
<p>在表的设计过程中需要花费大量时间来考虑，<strong>以便后期不对该表进行大的改动</strong>。</p>
<p><strong>更新表 alter table</strong></p>
<pre><code class="language-sql">ALTER TABLE vendors
ADD vend_phone CHAR(20);-- 增加列。
ALTER TABLE vendors
DROP COLUMN vend_phone;
</code></pre>
<p>ALTER TABLE的一种常见用途是<mark>定义外键</mark></p>
<pre><code class="language-sql">ALTER TABLE order_items
ADD CONSTRAINT fk_item_orders
FOREIGN KEY(order_num) REFERECES orders(order_num);
</code></pre>
<p><strong>使用ALTER TABLE要极为小心，应该在进行改动前做一个完整的备份</strong>,没有撤回操作。<br>
<mark>删除表</mark>：<code>DROP TABLE 表名</code></p>
<p><mark>重命名表</mark>：<code>RENAME TABLE 原来的表名 TO 新的表名</code></p>
<pre><code class="language-sql">RENAME TABLE backup_a TO a,
			backup_b TO b;
</code></pre>
<h3 id="视图">视图</h3>
<p><mark>视图是虚拟的表</mark>。与包含数据的表不一样，<strong>视图只包含使用时动态检索数据的查询</strong>。</p>
<p>视图作用：</p>
<ul>
<li><strong>重用SQL</strong>。</li>
<li>简化复杂的SQL操作。</li>
</ul>
<p><strong>视图本身不包含数据，因此它们返回的数据是从其他表中检索出来的</strong>。在添加或更改这些表中的数据时，视图将返回改变过的数据。<br>
视图用CREATE VIEW语句来创建。</p>
<p>SHOW CREATE VIEW viewname</p>
<p>其语法为DROP VIEW viewname;</p>
<p>视图更新：先drop后create或者：<code>CREATE OR REPLACE VIEW</code><br>
<mark>视图的最常见的应用之一是隐藏复杂的SQL</mark>；视图的另一常见用途是<mark>重新格式化检索出的数据</mark>。视图对于简化计算字段的使用特别有用。</p>
<pre><code class="language-sql">CREATE VIEW product_customers AS
SELECT cust_name,cust_contact,prod_id
FROM customers,orders,order_items
WHERE customers.cust_id=orders.cust_id 
	AND order_items.order_num=orders.order_num;-- 连接条件
--  体会，这儿就是将连接之后的逻辑的表作为视图
--  应用
SELECT * FROM product_customers；
SELECT cust_name,cust_contact
FROM product_customers
WHERE prod_id='TNT2';
--  利用视图，可一次性编写基础的SQL，然后根据需要多次使用。作用类似于函数

CREATE VIEW location AS
SELECT Concat(RTrim(vend_name),' (',RTrim(vend_country),' )') AS title
FROM vendors
ORDER BY vend_name;

SELECT * FROM location;-- 应用视图
--  用视图过滤不想要的数据
CREATE VIEW list AS
SELECT cust_id,cust_name,cust_email
FROM customers
WHERE cust_eamil IS NOT NULL; 

--  SELECT * FROM list;-- WHERE子句与WHERE子句将自动合并。
CREATE VIEW infomation AS
SELECT order_num,prod_id,quantity,item_price,quentity*item_prices AS total_price
FROM order_items;
--  应用
SLECT * FROM infomation
WHERE order_num=20005;
</code></pre>
<p>基本上可以说，<strong>如果MySQL不能正确地确定被更新的<mark>基数据</mark>，则不允许更新图（包括插入和删除视）</strong>。这实际上意味着，如果视图定义中有以下操作，则不能进行视图的更新：<code>GROUP BY 、JOIN、UNION、聚集函数(MIN(),COUNT(),SUM(),DISTINCT)</code></p>
<h3 id="使用存储过程">使用存储过程</h3>
<p><strong>存储过程</strong>简单来说，就是为以后的使用而<mark>保存的一条或多条MySQL语句的集合</mark>。可将<strong>其视为批文件</strong>，虽然它们的作用不仅限于批处理。<br>
MySQL称存储过程的执行为调用,CALL</p>
<pre><code class="language-sql">CALL product_pricing(
				@pricelow,
				@pricehigh,
				@price_average);-- 调用。
-- -- --  MYSQL 调用时需要修改结束分割符号。

DELEMITER //
CREATE PROCEDURE prices()
BEGIN
SELECT Avg(prod_price) AS price_avg
FROM products;
END//
DELEMITER ;
-- 应用
CALL prices（）；
-- 删除 
DROP PROCEDURE IF EXISTS prices;
</code></pre>
<p><strong>带参数的存过程</strong></p>
<pre><code class="language-sql">-- 声明变量
;DECLARE price_low DECIMAL(8,2)； 
DELEMITER //
CREATE PROCEDURE prices(
OUT p1 DECIMAL(8,2),
OUT ph DECIMAL(8,2))
BEGIN
SELECT MIN(prod_price) INTO p1 FROM products;
SELECT MAX(prod_price) INTO ph FROM products;
END //
DELEMITER ;
CALL prices(@price_low,@proce_high);所有MySQL变量都必须以@开始。
--  以上调用不显示任何的数据，它返回变量；
应用
SELECT @price_low;
--  COMMENT关键字
SHOW CREATE PROCEDURE 
</code></pre>
<h3 id="游标cursor：逐行处理结果集">游标cursor：逐行处理结果集</h3>
<p>需要在检索出来的行中前进或后退一行或多行。这就是使用游标的原因。<mark>游标（cursor）是一个存储在MySQL服务器上的数据库查询</mark>，它不是一条SELECT语句，而是被该语句检索出来的结果集。<strong>MySQL游标只能用于存储过程</strong>（和函数）。<strong>使用FETCH来读取所需数据</strong></p>
<pre><code class="language-sql">BEGIN
	
	DECLARE o INT;
	DECLARE done BOOLEAN DEFAULT 0;
	DECLARE order_nums CURSOR FOR -- 声明游标 ，是一种类型。
		SELECT order_num FROM orders;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done=1;
	
	--使用
    OPEN order_nums;
    --循环
    REPEAT 
    	FETCH order_nums INTO o;
        UNTIL done
    END REPEAT;
    --关闭
    CLOSE order_nums;
END;
-- SQLSTATE'02000'是一个未找到条件

</code></pre>
<h3 id="触发器：sql语句与事件关联">触发器：SQL语句与事件关联</h3>
<p>应用场景：</p>
<ul>
<li>insert时检查电话号格式。</li>
<li>delete时保存副本等。</li>
</ul>
<p><strong>触发器</strong>是MySQL响应以下语句(<code>DELETE</code>、<code>INSERT</code>、<code>UPDATE</code>)而<mark>自动执行的一条MySQL语句</mark>（<strong>或</strong>位于BEGIN和END语句之间的一组语句）.</p>
<pre><code class="language-sql">CREATE TRIGGER new_product AFTER INSERT ON products
FOR EACH ROW SELECT 'product added';
-- 删除，触发器不支持更新
DROP TRIGGER new_product;
</code></pre>
<p>只有表才支持触发器，视图不支持（临时表也不支持）。<strong>每个表最多支持6个触发器</strong>（每条INSERT、UPDATE和DELETE的之前和之后)</p>
<pre><code class="language-sql">CREATE TRIGGER new_order AFTER INSERT ON orders 
FOR EACH ROW SELECT NEW.order_num;-- FOR EACH ROW 跟具体的SQL语句。

-- 应用
INSERT INTO orders(order_date,cust_id) 
VALUES(Now(),10001); -- 返回值就是触发器定义的内容。
-- DELETE 触发器
CREATE TRIGGER delete_order BEFORE DELETE ON orders
FOR EACH ROW
BEGIN
	INSERT INTO archive_orders
	VALUES(OLD.order_num,OLD.order_date,OLD.cust_id);
END
-- 引用一个名为OLD的虚拟表

-- UPDATE 触发器的应用，数据验证
CREATE TRIGGER update_vendor BEFORE UPDATE ON vendors
FOR EACH ROW SET NEW.vend_state=Upper(NEW.vend_state)

</code></pre>
<p><strong>触发器的一种非常有意义的使用是创建审计跟踪</strong>。<mark>使用触发器，把更改（如果需要，甚至还有之前和之后的状态）记录到另一个表非常容易.</mark></p>
<h3 id="事务处理">事务处理</h3>
<p><strong>事务（transaction）指一组SQL语句；</strong></p>
<ol>
<li>回退（rollback）指<mark>撤销</mark>指定SQL语句的过程；</li>
<li>提交（commit）指将未存储的SQL语句结果<mark>写入数据库表</mark>；</li>
<li>保留点（savepoint）指事务处理中设置的<mark>临时占位符（placeholder）</mark>，你可以对它发布回退（与回退整个事务处理不同）。</li>
</ol>
<p><strong>事务处理用来管理INSERT、UPDATE和DELETE语句</strong>,不能回退SELECT、CREATE、DROP。</p>
<pre><code class="language-sql">SELECT * FROM order_totals;
START TRANSACTION;
DELETE FROM  order_totals;
SELECT * FROM order_totals;
ROLLBACK;-- 回退到START TRANSACTION
DELETE FROM order_items WHERE order_num=20001;
DELETE FROM orders WHERE order_num=23334;
SELECT * FROM order_totals;
-- 提交。
COMMIT;
</code></pre>
<p>隐含提交（implicit commit），即提交（写或保存）操作是自动进行的。<strong>在事务处理时，提交不会隐含地进行</strong>.</p>
<p>为了支持<mark>回退部分事务处理</mark>，必须能在事务处理块中合适的位置放置占位符。这样，如果需要回退，可以回退到某个占位符。<strong>这些占位符称为保留点<code>SAVEPOINT</code></strong></p>
<pre><code class="language-sql">SAVEPOINT delete1;
ROLLBACK TO delete1;-- 保留点越多越好。RELEASE SAVEPOINT
</code></pre>
<p>更改默认的提交行为(<strong>连接专用</strong>)：<code>SET autocommit=0;</code></p>
<h3 id="全球化和本地化字符集">全球化和本地化:字符集</h3>
<ul>
<li>[ ] 字符集为字母和符号的集合；</li>
<li>[ ] 编码为某个字符集成员的内部表示；</li>
<li>[ ] <mark>校对<code>COLLATE</code>：规定字符如何<strong>比较</strong>的指令</mark>。</li>
</ul>
<pre><code class="language-sql">SHOW CHARACTER SET;
SHOW COLLATION;
SHOW VARIABLES LIKE 'character%'

-- 创建表时指定字符集和校对。
-- 当不指定COLLATE,则使用数据库默认。
CREATE TABLE mytable(
    column1 INT,
    columns2 VARCHAR(10)

)DEFAULT CHARACTER SET  hebrew
COLLATE hebrew_general_ci;
</code></pre>
<p><strong>校对在对用<mark>ORDER BY子句</mark> 检索出来的数据排序时起重要的作用。</strong><br>
COLLATE可用于<code>ORDER BY</code>、<code>GROUP BY</code>、<code>HAVING</code>、聚集函数、别名等。</p>
<pre><code class="language-sql">SELECT * FROM customers
ORDER BY lastname,firstname COLLATE latin1_general_cs;
</code></pre>
<h3 id="安-全-管-理">安 全 管 理</h3>
<p>访问控制:<strong>设置权限，使用GRANT语句</strong></p>
<p><strong>MySQL用户账号</strong>和信息存储在名为<code>mysql</code>的库中.</p>
<pre><code class="language-sql">USE mysql;
SELECT user FROM user;
</code></pre>
<p>MySQL的权限<strong>用用户名和主机名</strong>结合定义,不指定<code>采用默认值</code></p>
<pre><code class="language-sql">CREATE USER 'yyq' identified by '密码' ;-- 可以不指定密码，指定时需要用identified by
RENAME USER yyq TO 'new_name';
</code></pre>
<p><code>GRANT</code>:权限名称-数据库或者表-用户名。<strong>回收权限：revoke</strong></p>
<pre><code class="language-sql">GRANT SELECT on test.* TO yyq;
REVOKE SELECT ON test.* TO yyq;
</code></pre>
<p>GRANT和REVOKE可在<strong>几个层次</strong>上控制访问权限：</p>
<p> <mark>整个服务器</mark>，使用GRANT ALL和REVOKE ALL；<br>
 <mark>整个数据库</mark>，使用ON database.*；<br>
 特定的表，使用ON database.table；<br>
 特定的列；<br>
 特定的存储过程。</p>
<p>简化多次授权:<code>GRANT SELECT,INSERT ON test.* TO yyq</code></p>
<p><strong>更改口令</strong></p>
<pre><code class="language-sql">SET PASSWORD FOR yyq=Password('ddd');
</code></pre>
<h3 id="数据库维护：备份mysqldump">数据库维护：备份mysqldump</h3>
<p>mysqlhotcopy,BACKUP TABLE</p>
<pre><code class="language-sql">analyze table user;
check table user;
</code></pre>
<p><strong>查看日志</strong>：1.错误日志·<code>hostname.err</code>;2.查询日志<code>hostname.log</code>;3.二进制日志(更新)：<code>hostname-bin</code>；4.慢查询日志<code>hostname-slow.log</code></p>
<h3 id="改善性能">改善性能</h3>
<p><code>SHOW VARIABLES;SHOW STATUS;SHOW PROCESSLIST</code>。</p>
<p>总是有不止一种方法编写同一条SELECT语句。<mark>应该试验联结、并、子查询等，找出最佳的方法</mark><br>
<strong>使用<code>EXPLAIN</code>命令</strong>检查SQL执行过程。</p>
<ul>
<li>[x] 应该总是使用正确的数据类型。<strong>串类型、数值类型、日期和时间</strong>、<strong>二进制类型Blob(Binary long Object)</strong></li>
<li>[ ] <mark>复杂的OR条件用多条SQL语句+UNION代替</mark>。</li>
<li>[ ] LIKE很慢。一般来说，最好是使用FULLTEXT而不是LIKE。</li>
</ul>
<p>如果<strong>数值是计算（求和、平均等）中使用的数值</strong>，则<strong>应该存储在数值数据类型列</strong>中。如果<strong>作为字符串（可能只包含数字）使用，则应该保存在串数据类型列中</strong>。<br>
不使用引号 与串不一样，数值不应该括在引号内。</p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-28 22:38</span>&nbsp;
<a href="https://www.cnblogs.com/justisme/">justisme</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12797955" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12797955);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 597589, cb_blogApp = 'justisme', cb_blogUserGuid = 'b9709611-61cd-4c98-b2ab-08d6076592e1';
    var cb_entryId = 12797955, cb_entryCreatedDate = '2020-04-28 22:38', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 justisme
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>