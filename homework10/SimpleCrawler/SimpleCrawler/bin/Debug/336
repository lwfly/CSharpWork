<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="前言 AutoWrapper是一个简单可自定义全局异常处理程序和ASP.NET Core API响应的包装。他使用ASP.NET Core middleware拦截传入的HTTP请求，并将最后的结果使" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>ASP.NET Core AutoWrapper 自定义响应输出 - HueiFeng - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=Z9Vw4btcgJmrpUEjY_SgebmTmDXJ_hPFoST7ad2aJp4" />
    <link id="MainCss" rel="stylesheet" href="/skins/lessismoreright/bundle-lessismoreright.min.css?v=aar1eIg4zz9tL2uCrzOGDur190sJi2DazF273FikoL4" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/lessismoreright/bundle-lessismoreright-mobile.min.css?v=FJjyQba01xzuYKRyPpSwE1bMq69pRjxrz5wp2oZZGLY" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/yyfh/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/yyfh/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/yyfh/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 329108;
        var currentBlogApp = 'yyfh';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'LessIsMoreRight';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    
</head>
<body>
    <a name="top"></a>
    
    <div id="home">
    <div id="header">
        <div id="blogTitle">
            
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/yyfh/">冯辉</a>
</div>
<div class="subtitle">

</div>

        </div>
        <div id="navigator">
            
<ul id="navList">
    <li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
    <li id="nav_myhome">
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/yyfh/">
首页</a>
</li>
    <li id="nav_newpost">

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
    <li id="nav_contact">
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/HueiFeng">
联系</a></li>
    <li id="nav_rss">
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/yyfh/rss/">
订阅</a></li>
    <li id="nav_admin">
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>

            <div class="blogStats">
                
<span id="stats_post_count">随笔 - 
62&nbsp;</span>
<span id="stats_article_count">文章 - 
0&nbsp;</span>
<!-- <span id="stats-comment_count"></span> -->
<span id="stats_comment_count">评论 - 
281</span>
            </div>
        </div>
    </div>
    <div id="main">
        <div id="mainContent">
            <div class="forFlow">
                <div id="post_detail">
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/yyfh/p/12602087.html">ASP.NET Core AutoWrapper 自定义响应输出</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h2 id="前言">前言</h2>
<p>AutoWrapper是一个简单可自定义全局异常处理程序和ASP.NET Core API响应的包装。他使用ASP.NET Core middleware拦截传入的HTTP请求，并将最后的结果使用统一的格式来自动包装起来.目的主要是让我们更多的关注业务特定的代码要求，并让包装器自动处理HTTP响应。这可以在构建API时加快开发时间，同时为HTTP响应试试我们统一的标准。</p>
<h2 id="安装">安装</h2>
<p>AutoWrapper.Core从NuGet或通过CLI下载并安装</p>
<pre><code>PM&gt; Install-Package AutoWrapper.Core 
</code></pre>
<p>在Startup.cs Configure方法中注册以下内容，但是切记要放在UseRouting前</p>
<pre><code>app.UseApiResponseAndExceptionWrapper();  
</code></pre>
<h2 id="启动属性映射">启动属性映射</h2>
<p>默认情况下AutoWrapper将在成功请求成功时输出以下格式：</p>
<pre><code>{
    &quot;message&quot;: &quot;Request successful.&quot;,
    &quot;isError&quot;: false,
    &quot;result&quot;: [
      {
        &quot;id&quot;: 7002,
        &quot;firstName&quot;: &quot;Vianne&quot;,
        &quot;lastName&quot;: &quot;Durano&quot;,
        &quot;dateOfBirth&quot;: &quot;2018-11-01T00:00:00&quot;
      }
    ]
}
</code></pre>
<p>如果说不喜欢默认属性命名方式，那么我们可以通过AutoWrapperPropertyMap属性进行映射为我们需要指定的任何名称。例如我么可以将result属性的名称更改为data。如下所示</p>
<pre><code>public class MapResponseObject  
{
    [AutoWrapperPropertyMap(Prop.Result)]
    public object Data { get; set; }
}
</code></pre>
<p>然后将MapResponseObject类传递给AutpWrapper middleware</p>
<pre><code>app.UseApiResponseAndExceptionWrapper&lt;MapResponseObject&gt;();  
</code></pre>
<p>通过映射重新请求后，现在影响格式如下所示</p>
<pre><code>{
    &quot;message&quot;: &quot;Request successful.&quot;,
    &quot;isError&quot;: false,
    &quot;data&quot;: {
        &quot;id&quot;: 7002,
        &quot;firstName&quot;: &quot;Vianne&quot;,
        &quot;lastName&quot;: &quot;Durano&quot;,
        &quot;dateOfBirth&quot;: &quot;2018-11-01T00:00:00&quot;
    }
}
</code></pre>
<p>可以从中看出result属性已经更换为data属性了</p>
<p>默认情况下AutoWrapper发生异常时将吐出以下响应格式</p>
<pre><code>{
    &quot;isError&quot;: true,
    &quot;responseException&quot;: {
        &quot;exceptionMessage&quot;: &quot;Unhandled Exception occurred. Unable to process the request.&quot;
    }
}

</code></pre>
<p>而且如果在AutoWrapperOptions中设置了IsDebug，则将产生带有堆栈跟踪信息的类似信息</p>
<pre><code>{
    &quot;isError&quot;: true,
    &quot;responseException&quot;: {
        &quot;exceptionMessage&quot;: &quot; Input string was not in a correct format.&quot;,
        &quot;details&quot;: &quot;   at System.Number.ThrowOverflowOrFormatException(ParsingStatus status, TypeCode type)\r\n   at System.Number.ParseInt32(ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)\r\n …&quot;
    }
}
</code></pre>
<p>如果想将某些APIError属性名称更改为其他名称，只需要在以下代码中添加以下映射MapResponseObject</p>
<pre><code>public class MapResponseObject  
{
    [AutoWrapperPropertyMap(Prop.ResponseException)]
    public object Error { get; set; }

    [AutoWrapperPropertyMap(Prop.ResponseException_ExceptionMessage)]
    public string Message { get; set; }

    [AutoWrapperPropertyMap(Prop.ResponseException_Details)]
    public string StackTrace { get; set; }
}
</code></pre>
<p>通过如下代码来模拟错误</p>
<pre><code>int num = Convert.ToInt32(&quot;10s&quot;); 
</code></pre>
<p>现在映射后的输出如下所示</p>
<pre><code>{
    &quot;isError&quot;: true,
    &quot;error&quot;: {
        &quot;message&quot;: &quot; Input string was not in a correct format.&quot;,
        &quot;stackTrace&quot;: &quot;   at System.Number.ThrowOverflowOrFormatException(ParsingStatus status, TypeCode type)\r\n   at System.Number.ParseInt32(ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)\r\n …&quot;
    }
}
</code></pre>
<p>请注意APIError现在根据MapResponseObject类中定义的属性更改了模型的默认属性。</p>
<p>我们可以自由的选择映射任何属性，下面是映射属性相对应的列表</p>
<pre><code>[AutoWrapperPropertyMap(Prop.Version)]
[AutoWrapperPropertyMap(Prop.StatusCode)]
[AutoWrapperPropertyMap(Prop.Message)]
[AutoWrapperPropertyMap(Prop.IsError)]
[AutoWrapperPropertyMap(Prop.Result)]
[AutoWrapperPropertyMap(Prop.ResponseException)]
[AutoWrapperPropertyMap(Prop.ResponseException_ExceptionMessage)]
[AutoWrapperPropertyMap(Prop.ResponseException_Details)]
[AutoWrapperPropertyMap(Prop.ResponseException_ReferenceErrorCode)]
[AutoWrapperPropertyMap(Prop.ResponseException_ReferenceDocumentLink)]
[AutoWrapperPropertyMap(Prop.ResponseException_ValidationErrors)]
[AutoWrapperPropertyMap(Prop.ResponseException_ValidationErrors_Field)]
[AutoWrapperPropertyMap(Prop.ResponseException_ValidationErrors_Message)]
</code></pre>
<h2 id="自定义错误架构">自定义错误架构</h2>
<p>AutoWrapper还提供了一个APIException可用于定义自己的异常的对象，如果想抛出自己的异常消息，则可以简单地执行以下操作</p>
<pre><code>throw new ApiException(&quot;Error blah&quot;, 400, &quot;511&quot;, &quot;http://blah.com/error/511&quot;);  
</code></pre>
<p>默认输出格式如下所示</p>
<pre><code>{
    &quot;isError&quot;: true,
    &quot;responseException&quot;: {
        &quot;exceptionMessage&quot;: &quot;Error blah&quot;,
        &quot;referenceErrorCode&quot;: &quot;511&quot;,
        &quot;referenceDocumentLink&quot;: &quot;http://blah.com/error/511&quot;
    }
}
</code></pre>
<p>当然我们可以自定义错误格式</p>
<pre><code>public class MapResponseObject  
{
    [AutoWrapperPropertyMap(Prop.ResponseException)]
    public object Error { get; set; }
}

public class Error  
{
    public string Message { get; set; }

    public string Code { get; set; }
    public InnerError InnerError { get; set; }

    public Error(string message, string code, InnerError inner)
    {
        this.Message = message;
        this.Code = code;
        this.InnerError = inner;
    }

}

public class InnerError  
{
    public string RequestId { get; set; }
    public string Date { get; set; }

    public InnerError(string reqId, string reqDate)
    {
        this.RequestId = reqId;
        this.Date = reqDate;
    }
}
</code></pre>
<p>然后我们可以通过如下代码进行引发我们错误</p>
<pre><code>throw new ApiException(  
      new Error(&quot;An error blah.&quot;, &quot;InvalidRange&quot;,
      new InnerError(&quot;12345678&quot;, DateTime.Now.ToShortDateString())
));
</code></pre>
<p>输出格式如下所示</p>
<pre><code>{
    &quot;isError&quot;: true,
    &quot;error&quot;: {
        &quot;message&quot;: &quot;An error blah.&quot;,
        &quot;code&quot;: &quot;InvalidRange&quot;,
        &quot;innerError&quot;: {
            &quot;requestId&quot;: &quot;12345678&quot;,
            &quot;date&quot;: &quot;10/16/2019&quot;
        }
    }
}
</code></pre>
<h2 id="使用自定义api响应格式">使用自定义API响应格式</h2>
<p>如果映射满足不了我们的需求。并且我们需要向API响应模型中添加其他属性，那么我们现在可以自定义自己的格式类，通过设置UseCustomSchema为true来实现，代码如下所示</p>
<pre><code>app.UseApiResponseAndExceptionWrapper(new AutoWrapperOptions { UseCustomSchema = true });  
</code></pre>
<p>现在假设我们想在主API中响应中包含一个属性SentDate和Pagination对象，我们可能希望将API响应模型定义为以下格式</p>
<pre><code>public class MyCustomApiResponse  
{
    public int Code { get; set; }
    public string Message { get; set; }
    public object Payload { get; set; }
    public DateTime SentDate { get; set; }
    public Pagination Pagination { get; set; }

    public MyCustomApiResponse(DateTime sentDate, object payload = null, string message = &quot;&quot;, int statusCode = 200, Pagination pagination = null)
    {
        this.Code = statusCode;
        this.Message = message == string.Empty ? &quot;Success&quot; : message;
        this.Payload = payload;
        this.SentDate = sentDate;
        this.Pagination = pagination;
    }

    public MyCustomApiResponse(DateTime sentDate, object payload = null, Pagination pagination = null)
    {
        this.Code = 200;
        this.Message = &quot;Success&quot;;
        this.Payload = payload;
        this.SentDate = sentDate;
        this.Pagination = pagination;
    }

    public MyCustomApiResponse(object payload)
    {
        this.Code = 200;
        this.Payload = payload;
    }

}

public class Pagination  
{
    public int TotalItemsCount { get; set; }
    public int PageSize { get; set; }
    public int CurrentPage { get; set; }
    public int TotalPages { get; set; }
}
</code></pre>
<p>通过如下代码片段进行测试结果</p>
<pre><code>public async Task&lt;MyCustomApiResponse&gt; Get()  
{
    var data = await _personManager.GetAllAsync();

    return new MyCustomApiResponse(DateTime.UtcNow, data,
        new Pagination
        {
            CurrentPage = 1,
            PageSize = 10,
            TotalItemsCount = 200,
            TotalPages = 20
        });

}
</code></pre>
<p>运行后会得到如下影响格式</p>
<pre><code>
{
    &quot;code&quot;: 200,
    &quot;message&quot;: &quot;Success&quot;,
    &quot;payload&quot;: [
        {
            &quot;id&quot;: 1,
            &quot;firstName&quot;: &quot;Vianne&quot;,
            &quot;lastName&quot;: &quot;Durano&quot;,
            &quot;dateOfBirth&quot;: &quot;2018-11-01T00:00:00&quot;
        },
        {
            &quot;id&quot;: 2,
            &quot;firstName&quot;: &quot;Vynn&quot;,
            &quot;lastName&quot;: &quot;Durano&quot;,
            &quot;dateOfBirth&quot;: &quot;2018-11-01T00:00:00&quot;
        },
        {
            &quot;id&quot;: 3,
            &quot;firstName&quot;: &quot;Mitch&quot;,
            &quot;lastName&quot;: &quot;Durano&quot;,
            &quot;dateOfBirth&quot;: &quot;2018-11-01T00:00:00&quot;
        }
    ],
    &quot;sentDate&quot;: &quot;2019-10-17T02:26:32.5242353Z&quot;,
    &quot;pagination&quot;: {
        &quot;totalItemsCount&quot;: 200,
        &quot;pageSize&quot;: 10,
        &quot;currentPage&quot;: 1,
        &quot;totalPages&quot;: 20
    }
}
</code></pre>
<p>但是从这里要注意一旦我们对API响应进行自定义，那么就代表我们完全控制了要格式化数据的方式，同时丢失了默认API响应的某些选项配置。但是我们仍然可以利用ApiException()方法引发用户定义的错误消息<br>
如下所示</p>
<pre><code>[Route(&quot;{id:long}&quot;)]
[HttpPut]
public async Task&lt;MyCustomApiResponse&gt; Put(long id, [FromBody] PersonDTO dto)  
{
    if (ModelState.IsValid)
    {
        try
        {
            var person = _mapper.Map&lt;Person&gt;(dto);
            person.ID = id;

            if (await _personManager.UpdateAsync(person))
                return new MyCustomApiResponse(DateTime.UtcNow, true, &quot;Update successful.&quot;);
            else
                throw new ApiException($&quot;Record with id: {id} does not exist.&quot;, 400);
        }
        catch (Exception ex)
        {
            _logger.Log(LogLevel.Error, ex, &quot;Error when trying to update with ID:{@ID}&quot;, id);
            throw;
        }
    }
    else
        throw new ApiException(ModelState.AllErrors());
}
</code></pre>
<p>现在当进行模型验证时，可以获得默认响应格式</p>
<pre><code>{
    &quot;isError&quot;: true,
    &quot;responseException&quot;: {
        &quot;exceptionMessage&quot;: &quot;Request responded with validation error(s). Please correct the specified validation errors and try again.&quot;,
        &quot;validationErrors&quot;: [
            {
                &quot;field&quot;: &quot;FirstName&quot;,
                &quot;message&quot;: &quot;'First Name' must not be empty.&quot;
            }
        ]
    }
}

</code></pre>
<h2 id="reference">Reference</h2>
<p><a href="https://github.com/proudmonkey/AutoWrapper">https://github.com/proudmonkey/AutoWrapper</a></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-03-30 23:08</span>&nbsp;
<a href="https://www.cnblogs.com/yyfh/">HueiFeng</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12602087" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12602087);return false;">收藏</a></div>
        </div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 329108, cb_blogApp = 'yyfh', cb_blogUserGuid = 'f2702a43-bbde-e611-845c-ac853d9f53ac';
    var cb_entryId = 12602087, cb_entryCreatedDate = '2020-03-30 23:08', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>    </div>
</div>
            </div>
        </div>

        <div id="sideBar">
            <div id="sideBarMain">
                
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
                <div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                <script>loadBlogDefaultCalendar();</script>
                <div id="leftcontentcontainer">
                    <!-- begin:SingleColumn -->
                    <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                    <!-- end:  SingleColumn -->
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
    <div id="footer">
        <!--done-->
Copyright &copy; 2020 HueiFeng
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

    </div>
</div>

    <div id="page_end_html">
        <script>
  $("#page_end_html,#ad_t2,#cnblogs_c1,#under_post_news,#under_post_kb,#cnblogs_c2").css('display','none')

</script>
<script type="text/javascript">var cnzz_protocol = (("https:" == document.location.protocol) ? "https://" : "http://");document.write(unescape("%3Cspan id='cnzz_stat_icon_1278154726'%3E%3C/span%3E%3Cscript src='" + cnzz_protocol + "s4.cnzz.com/z_stat.php%3Fid%3D1278154726' type='text/javascript'%3E%3C/script%3E"));</script>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-155252267-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-155252267-2');
</script>
    </div>
</body>
</html>