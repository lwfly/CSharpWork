<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="Synchronized关键字随着JDK版本升级，出现了越来越多的优化，比如偏向锁，轻量级锁，以及锁消除，锁粗化等优化的方向，本文从概念上对这些进行了简单的介绍。" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Synchronized锁性能优化偏向锁轻量级锁升级 多线程中篇（五） - noteless - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/buildtowin/bundle-buildtowin.min.css?v=lp23bZd4RUCf9TGsihJRLSq5M_182P4N8YRMn1A2CWo" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/noteless/custom.css?v=fnk17ixpiOajP7an/OE6hUwN1aI=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/buildtowin/bundle-buildtowin-mobile.min.css?v=ADiCwO2hOTdd5yYidcx7eob7ix2VJI4o_TXjEycTHjs" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/noteless/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/noteless/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/noteless/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 268100;
        var currentBlogApp = 'noteless';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'BuildtoWin';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <link rel="stylesheet" href="https://blog-static.cnblogs.com/files/noteless/cnblogs.css" type="text/css" />

<!--
<link rel="stylesheet" href="https://blog-static.cnblogs.com/files/noteless/monokai-sublime.css">
-->

<script src="https://blog-static.cnblogs.com/files/noteless/highlight.pack.js" defer></script>






<div class="main-top">

  <a class="avatar" href="https://www.cnblogs.com/noteless">
    <img src="//files.cnblogs.com/files/noteless/cnblogspic2.gif" alt="noteless 头像">
</a>
<div class="title">
    <a class="name" href="https://www.cnblogs.com/noteless/">noteless</a>
  </div>
<div class="info">

  </div>
</div>



<a href="#"><div id="toTop" style="zoom:0;display:none"></div></a>
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/noteless/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/noteless/">noteless</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/noteless/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/noteless">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/noteless/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
212&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
89</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/noteless/p/10509665.html">Synchronized锁性能优化偏向锁轻量级锁升级 多线程中篇（五）</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
    <div id="cnblogs_post_description" style="display: none">
        Synchronized关键字随着JDK版本升级，出现了越来越多的优化，比如偏向锁，轻量级锁，以及锁消除，锁粗化等优化的方向，本文从概念上对这些进行了简单的介绍。
    </div>
<div id="cnblogs_post_body" class="blogpost-body ">
    <div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">不止一次的提到过，synchronized是Java内置的机制，是JVM层面的，而Lock则是接口，是JDK层面的</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">尽管最初synchronized的性能效率比较差，但是随着版本的升级，synchronized已经变得原来越强大了</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">这也是为什么官方建议使用synchronized的原因</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">毕竟，他是一个关键字啊，这才是亲儿子，Lock，终归差了一点</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">简单看下，synchronized大致都经过了哪些重要的变革</span></div>
<h3><span style="font-size: 18px;">重量级锁</span></h3>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">对于最原始的synchronized关键字，锁被称之为重量级锁</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">因为底层依赖监视器，监视器又依赖操作系统底层的互斥锁，java的线程是内核映射的</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如果获取不到锁，那么就必然会发生内核态与用户态的转换，成本很高，所以效率比较低</span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>所有的优化，其实都是为了将原来的重量级锁的&ldquo;重量&rdquo;变轻...</strong></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">在现在的版本中，锁的状态总共有四种：</span></div>
<div style="line-height: 200%;">
<ul>
<li><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">无锁状态</span></li>
<li><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">偏向锁</span></li>
<li><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">轻量级锁</span></li>
<li><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">重量级锁</span></li>
</ul>
</div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>很显然锁的&ldquo;重量&rdquo;从左到右，依次递增</strong></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">无所状态很好理解，新增加的偏向锁与轻量级锁，其实就是尽可能的将重量级锁往&ldquo;无锁&rdquo;的方向靠拢，尽可能的减少重量</span></div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>减少重量的思路就是，通过一定的逻辑处理与判断，如果不需要加锁，那么我就少加一点锁</strong></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">继续之前先介绍两个概念，Mark Word和CAS</span></div>
<h3><span style="font-size: 18px;">Mark Word</span></h3>
<div style="line-height: 200%;">
<div><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">对于每个对象，都有一个对象头，这部分存储了对象的必要信息</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">对象头中有一个主要区域被称之为Mark Word（其实就是那一段地址保存的数据的统称）</span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>其实可以简单理解为一个数据结构，里面保存了一些必要的数据信息</strong></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">为了节省空间，并不是每个字段都有空间，不同的锁状态，有不同的字段含义，比如说32位，这几位做什么，那几位做什么，了解过class字节码文件的话应该很容易理解这种思维</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">与本文相关的有下面这些，暂时可以不去思考如何保存的问题，就只需要知道有这么些字段即可（你简单理解为一个结构体，每个字段都有空间表示也不影响理解此处的叙述）</span></div>
<div style="line-height: 200%;">
<ul>
<li><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">锁标志位（什么类型的锁），他的标志包括：无锁、轻量级锁、重量级锁、偏向锁</span></li>
<li><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">轻量级锁时会记录：指向栈中锁记录的指针</span></li>
<li><span style="line-height: 24px; font-family: 'Microsoft YaHei'; font-size: 16px;">重量级锁时会记录：指向互斥量（重量级锁）的指针 </span></li>
<li><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">偏向锁时会记录：线程ID&nbsp;&nbsp;&nbsp;</span></li>
</ul>
</div>
</div>
<div>
<div>
<h3><span style="font-size: 18px;">CAS</span></h3>
<div>
<p><span style="font-size: 16px;">再简单提一个概念CAS</span></p>
<p><span style="font-size: 16px;">compareAndSwap，比较并替换，是一种实现并发算法时常用到的技术</span></p>
<p><span style="font-size: 16px;">CAS需要有3个操作数：内存地址V，旧的预期值A，即将要更新的目标值B</span></p>
</div>
<p><span style="font-size: 16px;">比如你要操作一个变量，他的值为A，你希望将他修改为B，这期间不会进行加锁，当你在修改的时候，你发现值仍旧是A，然后将它修改为B，如果此时值被其他线程修改了，变成了C，那么将不会进行值B的写入操作，这就是CAS的核心理论，通过这样的操作可以实现逻辑上的一种&ldquo;加锁&rdquo;，避免了真正去加锁&nbsp;&nbsp;</span></p>
<h3 style="line-height: 200%;"><span style="font-size: 18px;">轻量级锁</span><span style="font-family: 'Microsoft YaHei';">&nbsp;&nbsp; <span style="line-height: 24px;"><br /></span></span></h3>
<div style="line-height: 200%;"><span style="line-height: 24px; font-family: 'Microsoft YaHei'; font-size: 16px;">轻量级锁本质是借助于CAS操作，对于竞争不激烈的场景下，可以减少重量级锁的使用
		</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">线程需要访问同步代码体时，会判断当前状态是否是无锁状态
		</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如果无锁，将会尝试通过CAS操作，复制一份Mark Down 并且将Mark Down中的字段指向该线程栈中锁记录的指针
		</span></div>
<div style="line-height: 200%;">
<ul>
<li><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">成功说明没有竞争，那么执行同步代码体；
				</span></li>
<li><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">失败说明存在竞争，那么锁会升级为重量级锁，Mark Down字段修改为指向重量级锁指针，并且请求锁的线程会被阻塞
				</span></li>



			</ul>



		</div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">当持有线程执行结束后，会尝试借助于CAS操作恢复Mark Down
		</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如果有竞争会升级为重量级锁，Mark Down字段会被修改，CAS操作会失败，所以：
		</span></div>
<div style="line-height: 200%;">
<ul>
<li><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如果此次CAS成功，锁释放完成；
				</span></li>
<li><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如果失败，将会释放锁并且唤醒被阻塞的线程
				</span></li>



			</ul>



		</div>
<div style="line-height: 200%;"><span style="line-height: 24px; font-family: 'Microsoft YaHei'; font-size: 16px;">简要逻辑图如下
		</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="line-height: 24px;"><a href="https://img2018.cnblogs.com/blog/897393/201903/897393-20190311114204623-724362708.png"><img style="display: inline; background-image: none;" title="image_5c85d806_42f0" src="https://img2018.cnblogs.com/blog/897393/201903/897393-20190311114205469-321224305.png" alt="image_5c85d806_42f0" width="964" height="1357" border="0" /></a></span>&nbsp;&nbsp; <span style="line-height: 24px;"><br /></span></span></div>
<div>
<div><span style="font-size: 16px;">对于轻量级锁，核心就是CAS操作，因为一旦出现竞争，Mark Down信息将会被修改，而CAS操作的原理就是新值与旧值的对比后再操作，所以CAS操作的成功与否，可以推断是否有竞争
			</span></div>
<div><span style="font-size: 16px;">有竞争那么就会升级为重量级锁，其他请求线程会被阻塞，该线程执行结束后会唤醒其他阻塞线程；否则无竞争就会释放退出
			</span></div>
<div><span style="font-size: 16px;">很显然，如果竞争激烈的场景，很快就会升级为重量级锁，而关于轻量级锁所有的一切都是徒劳的
			</span></div>
<div><span style="font-size: 16px;">不过幸运的是，实践表明，大多数场景并不会竞争激烈&nbsp; &nbsp;&nbsp;</span></div>


</div>



	</div>
<h3><span style="font-size: 18px;">偏向锁
	</span></h3>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">对于轻量级锁中，需要对Mark Down字段进行维护，以及复制Mark Down，以及多次CAS操作
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">但是事实上，不少场景中，也的确经常存在只有一个线程访问的情况
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如果只有一个线程来回访问，那么轻量级锁的维护相对来说不也是没有必要的么，是否还可以进一步优化？偏向锁就是一种优化方案
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">偏向锁的提出就是针对于这种场景：
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">锁不仅不存在多线程竞争，而且总是由同一线程多次获得
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">所以偏向的概念，就是偏向这个线程，它的核心思想就是：
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">锁会偏向第一个获取它的线程，如果不存在竞争，只有一个线程，则持有偏向锁的线程永远不需要同步
	</span></div>



</div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如果没有竞争，可以看到出来，偏向锁的可以约等于是无锁的
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">核心原理：
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">当一个线程访问同步块并获取锁时，会记录存储锁偏向的线程ID
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">后续该线程在进入和退出同步块时不再需要CAS操作来加锁和解锁，只需简单地判断一下对象头的Mark Word里是否存储着指向当前线程的偏向锁
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">一个简要的逻辑如下图所示
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><a href="https://img2018.cnblogs.com/blog/897393/201903/897393-20190311114206012-1864877492.png"><img style="display: inline; background-image: none;" title="image_5c85d806_2fb8" src="https://img2018.cnblogs.com/blog/897393/201903/897393-20190311114330096-1561928477.png" alt="image_5c85d806_2fb8" width="697" height="1036" border="0" /></a>
</span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>ps:</strong>
</span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>上图中如果线程ID不是当前线程的话，也会继续进行CAS操作的，一旦CAS失败，才会需要升级，如果成功了，还是执行同步代码块</strong>
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';">对于偏向锁，核心针对通常只有一个线程执行同步代码的场景
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';">通过记录偏向锁ID，对于同一线程，如果无锁状态获取偏向锁成功或者是偏向锁，且为该线程，后续的进出无需额外的同步操作：
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';">但是一旦出现竞争，那么就会进行锁升级，升级为轻量级锁
</span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>小结</strong>
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">轻量级锁和偏向锁都是借助于CAS，如果出现问题，将会进行锁的升级，升级是不可逆的，也就是说只能从低到高，也就是偏向--&gt;轻量级--&gt;重量级，不能够降级
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">偏向锁是对于轻量级锁的更进一步优化，当然这是有前提的，那就是&ldquo;场景&rdquo;
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">很显然，对于偏向锁和轻量级锁，如果不是同一线程或者线程竞争激烈，将会迅速的从偏向锁升级为轻量级锁，然后迅速变为重量级锁，而偏向锁和轻量级锁带来的一切开销，都将是额外的开销，所以二者的开启与否要根据业务来，不同版本的JDK开启状态有所不同
</span></div>
<h3><span style="font-size: 18px;">自旋，适应性自旋
</span></h3>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">在锁分类一文中，对自旋的概念进行了简单介绍
</span></div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>再次说下，所谓自旋，不是获取不到就阻塞，而是在原地等待一会儿，再次尝试（当然次数或者时长有限），他是以牺牲CPU为代价来换取内核状态切换带来的开销</strong>
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">适应性自旋是针对于自旋的限制，比如次数（时长）的一种优化，如果本次成功下次多等待几次，如果经常失败，可能就不自旋了
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">借助于适应性自旋，可以在CPU时间片的损耗和内核状态的切换开销之间相对的找到一个平衡，进而能够提高性能
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">从原来的一旦获取不到就阻塞、状态切换，转变为在有的时候可以借助于较小的CPU浪费避免状态切换的开销，所以显然可以提升性能
</span></div>
<h3><span style="font-size: 18px;">锁消除
</span></h3>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">锁消除，就是消除锁
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">可是，难道好好地一个synchronized方法，最后JVM会把关键字去掉吗？显然不是这个意思
</span></div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>他指的是删除非必要的同步</strong>
</span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>根据代码逃逸技术，如果判断到一段代码中，堆上的数据不会逃逸出当前线程，那么可以认为这段代码是线程安全的，不必要加锁</strong>
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">什么是逃逸，比如A方法，调用B方法，B方法将内部创建的一个局部对象，返回给了A，那么这个B中的变量就属于逃逸了，就存在被其他线程访问的可能
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">简单说除了你写代码之外，Java底层包括从编译器到JVM还有很多工作人员在忙活，人家通过算法一看，你这根本就没有必要使用同步，就会在实际执行的时候把你的同步去掉
</span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>你可能以为，我自己哪有写很多synchronized修饰的方法？</strong>
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">但是你仔细想一下，你即使不写，代码中JDK提供的方法、别人提供的Jar包中的方法，他们用了多少synchronized？
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">最终不都会进入到你的方法中么？
</span></div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>所以实际代码中的synchronized（同步）远比你想象到的要多得多</strong>
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">所以如果可以消除不必要的同步，岂不是性能会有所提升？</span></div>
<h3><span style="font-size: 18px;">锁粗化（锁膨胀）
</span></h3>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">还是以方法调用为例，假如一个A方法，中有三个对象b,c,d，分别调用他们的方法而且都是同步方法
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">void A（）{
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">b.function();
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">c.function();
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">d.function();
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">}
</span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>每个方法都加锁解锁，是不是很烦很费电？</strong>
</span></div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>如果碰巧他们用的都是同一把锁呢？是不是可以尝试进行合并？</strong>
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">也就是说，虚拟机检测到有一系列连串的对同一个对象加锁和解锁操作，就会将其合并成一次范围更大的加锁和解锁操作
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">多个加锁解锁操作，转变为一次的加锁和解锁
</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">加锁解锁必然会消耗性能，如果可以进行合并，显然可以提高性能
</span></div>
<h3><span style="font-size: 18px;">小结
</span></h3>
<div style="line-height: 200%;"><span style="font-size: 16px; font-family: 'Microsoft YaHei';">以上为大致的synchronized优化过的点
</span></div>
<div style="line-height: 200%;"><span style="font-size: 16px; font-family: 'Microsoft YaHei';">面对一个蒸蒸日上的努力小青年，而且还有那么多自身具有的优势（隐式锁相对于显式锁，对开发者来说友好了很多，毕竟如果可以，大家都不喜欢多操心的）
</span></div>
<div style="line-height: 200%;"><span style="font-size: 16px; font-family: 'Microsoft YaHei';">有什么理由一定要放弃他呢？
</span></div>
<div style="line-height: 200%;"><span style="font-size: 16px; font-family: 'Microsoft YaHei';">所以除非场景特殊，或者对程序分析后，业务适合，否则尽可能的选择synchronized吧
</span></div>
<div style="line-height: 200%;"><span style="font-size: 16px; font-family: 'Microsoft YaHei';">synchronized是重量级的，他可以&ldquo;包治百病&rdquo;，尽管性能或许没有你的期望那么好
</span></div>
<div style="line-height: 200%;"><span style="font-size: 16px; font-family: 'Microsoft YaHei';">另外有些优化比如偏向锁、轻量级锁，对场景是有要求的，如果不管三七二十一，也许并不一定会提高，反而更差，所以对于锁优化参数的开闭也需要参照场景
</span></div>
<div style="line-height: 200%;"><span style="font-size: 16px; font-family: 'Microsoft YaHei';">原文地址:<a href="https://www.cnblogs.com/noteless/p/10509665.html" target="_blank">Synchronized锁性能优化偏向锁轻量级锁升级 多线程中篇（五）</a></span></div>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2019-03-11 11:48</span>&nbsp;
<a href="https://www.cnblogs.com/noteless/">noteless</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10509665" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(10509665);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 268100, cb_blogApp = 'noteless', cb_blogUserGuid = '2f3ff2be-bdda-e511-9fc1-ac853d9f53cc';
    var cb_entryId = 10509665, cb_entryCreatedDate = '2019-03-11 11:48', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 noteless
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <script>
/*
$(document).ready(function() {
  $('pre').each(function(i, e) {hljs.highlightBlock(e)});
});
*/
</script>





<script>




//初始化加载函数
$(function(){
    // hideIndexArticle();
    appendNavigator();

    addOriginURL();

addSupport();
hideToTop();


})


//隐藏首页除置顶外的其他所有文章列表
function hideIndexArticle(){
    var windowURL = window.location.href;
    console.log(windowURL )
    if(windowURL && windowURL.indexOf('www.cnblogs.com/noteless')>0 && windowURL.indexOf('html')<0){
        //$('#mainContent .day:not(:first)').css('display','none');
    }
}

//增导航条上增加 目录索引按钮
function appendNavigator(){
    var _html='<li>'
        +'<a id="blog_nav_admin" class="menu" rel="nofollow" href="https://www.cnblogs.com/noteless/p/9400742.html">'
        +'目录索引'
        +'</a>'
        +'</li>';

    $('#navList').append(_html);
}

function appendMenuItem(tagName,id,content){
    console.log(tagName+" "+tagName.substring(1));
    var paddingLeft = tagName.substring(1) * 30; //添加标题缩进
    $('#menu_nav_ol').append('<li class="' + id +'" style="padding-left: '+ paddingLeft +'px;"><b>' + content + '</b></li>');
}


//添加支持一下，请求关注
function addSupport(){

var zhichiHml = '<p>'
+'<span>'
+'<img src="https://files-cdn.cnblogs.com/files/noteless/zhichiyixaa.bmp" alt="">'
+'</span>'
+'</p>';
$('#cnblogs_post_body').append(zhichiHml );

}

//每篇文章增加原文地址
function addOriginURL(){

    //文章增加原文地址
    var originURL='<div>'
        +'原文地址:'
        +'<a href="'
        +window.location.href
        +'" target="_blank">'
        +$('.postTitle a').html()
        +'</a>'
        +'</div>';
		
	originURL+='<img src="https://blog-static.cnblogs.com/files/noteless/%E4%BA%8C%E7%BB%B4%E7%A0%812.gif"></img>';
		
		
    if($("#cnblogs_post_body h3:first").length>0){
        $("#cnblogs_post_body h3:first").before(originURL);
    }else{
        $('#cnblogs_post_body').prepend(originURL);
    }


}

//如果是pc展示返回顶部
function hideToTop(){

	if(isPC()){
		$('#toTop').show();
	}
}


//判断手机还是pc
function isPC() {
   var userAgentInfo = navigator.userAgent;
   var Agents = ["Android", "iPhone",
      "SymbianOS", "Windows Phone",
      "iPad", "iPod"];
   var flag = true;
   for (var v = 0; v < Agents.length; v++) {
      if (userAgentInfo.indexOf(Agents[v]) > 0) {
         flag = false;
         break;
      }
   }
   return flag;
}



//根据标题生成左侧边栏的目录树
// 生成目录开始

$(function () {

	//如果是手机隐藏目录
	if(isPC()){

		//内容拼接
		$('body').append(
			'<div id="article-outline">'
			+'<div style="height:15px;">'
			+'<button type="button" class="close" data-dismiss="modal" aria-hidden="true">'
			+'X'
			+'</button>'
			+'</div>'
			+'</div>'
			+'<style>'
			+'#article-outline{'
			+'display:none;'
			+'min-width:140p;'
			+'max-width: 230px;'
			//+'max-height: 350px;'
			+'position:absolute;'
			+'float: left;'
			+'top:150px;'
			+'left:-999px;'
			+'border:1px solid #ccc;'
			+'box-shadow:5px 5px 2px #ccc;'
			+'padding: 5px 10px;'
			+'background-color: #fff;'
			+'overflow-y: auto;'
			+'scroll-x: auto;'
			+'}'

			+'#article-outline ul{'
			+'margin:5px 0 5px 0;'
			+'padding-left:30px;'
			+'font-size:12px;'
			+'border-left:1px dotted #ccc;'
			+'}'

			+'#article-outline ul:first-child{'
			+'padding-left:15px;'
			+'border:none;'
			+'}'

			+'#article-outline li{'
			+'list-style-type:decimal;'
			+'margin:3px 0;'
			+'}'

			+'#article-outline a{'
			+'color:#00C1E4;'
			+'}'
			+'</style>'
		)
		
		

		
		
		//取得新添加的目录元素
		var jOutline = $('#article-outline');

		//获取文章内容
		//var jContent = $('article .content');
		var jContent = $('div#topics');

		//计算高度
		var jContentHeight = jContent.height();

		//关闭按钮
		jOutline.find('.close').on('click', function () {
			jOutline.hide();
		})

		updateOutline();

		var top = jOutline.offset().top;
		scrollOutline();
		$(window).on('scroll', scrollOutline);

		function scrollOutline() {
			var scrollTop = $(document).scrollTop();
			var maxTop = jContent.offset().top + jContent.height() - jOutline.height();
			//设置行内样式
			if (scrollTop >= top && scrollTop <= maxTop) {
				jOutline.css({'position': 'fixed', 'top': 0});
			}
			else if (scrollTop < top) {
				/*
							jOutline.css({'position': 'absolute','float':'left', 'top': '150px'});
				*/
				jOutline.css({'position': 'absolute', 'top': '200px'});
			}
			else {
				/*
							jOutline.css({'position': 'absolute','float':'left', 'top': maxTop + 'px'});
				*/
				jOutline.css({'position': 'absolute', 'top': maxTop + 'px'});
			}

		}

		function updateOutline() {
			//设置哪些级别的目录
			// var arrAllHeader = jContent.find("h1,h2,h3,h4,h5,h6");
			var arrAllHeader = jContent.find("h2,h3,h4,h5,h6");
			var arrOutline = ['<ul>'];
			var header, headerText;
			var id = 0;
			var level = 0,
				lastLevel = 1;
			var levelCount = 0;
			for (var i = 0, c = arrAllHeader.length; i < c; i++) {
				header = arrAllHeader[i];
				headerText = $(header).text();

				header.setAttribute('id', id);

				level = header.tagName.match(/^h(\d)$/i)[1];
				levelCount = level - lastLevel;

				if (levelCount > 0) {
					for (var j = 0; j < levelCount; j++) {
						arrOutline.push('<ul>');
					}
				} else if (levelCount < 0) {
					levelCount *= -1;
					for (var j = 0; j < levelCount; j++) {
						arrOutline.push('</ul>');
					}
				}
				;
				arrOutline.push('<li>');
				arrOutline.push('<a href="#' + id + '">' + headerText + '</a>');
				arrOutline.push('</li>');
				lastLevel = level;
				id++;
			}
			arrOutline.push('</ul>')
			if (arrOutline.length > 2) {
				jOutline.append(arrOutline.join(''));
				jOutline.find('ul').each(function (i, n) {
					var jThis = $(this);
					if (jThis.children('li').length === 0) {
						jThis.replaceWith(jThis.children());
					}
				});
				showOutline();
			}
			else {
				hideOutline();
			}
		}

		function showOutline() {
			var offset = jContent.offset();

			//目录左侧偏移量
			/*        jOutline.css({
						left: offset.left + jContent.width() + 10 + 'px',
					}).show();*/
			jOutline.css({
				left:8 + 'px',
			}).show();
		}

		function hideOutline() {
			jOutline.hide();
		}
	
	
	}




    
});

//生成目录结束




</script>
    </div>
</body>
</html>