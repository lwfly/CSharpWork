<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="Java中的对象拷贝(Object Copy)指的是将一个对象的所有属性（成员变量）拷贝到另一个有着相同类类型的对象中去。举例说明：比如，对象A和对象B都属于类S，具有属性a和b。那么对对象A进行拷贝" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Java 浅拷贝和深拷贝的理解和实现方式 - 摇头耶稣 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=Z9Vw4btcgJmrpUEjY_SgebmTmDXJ_hPFoST7ad2aJp4" />
    <link id="MainCss" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue.min.css?v=MH15aYd6DmX-6TABpA2xkiKENy3GAhiM2dh5rOPH89I" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue-mobile.min.css?v=X7swQJ1TyCJAf6FMVjDPbYhUAiMdNFddEy1-m0_TbFQ" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/shakinghead/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/shakinghead/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/shakinghead/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 374964;
        var currentBlogApp = 'shakinghead';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleBlue';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    <div id="home">
    <div id="header">
        <div id="blogTitle">
            
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/shakinghead/">摇头耶稣</a>
</div>
<div class="subtitle">

</div>

        </div>
        <div id="navigator">
            
<ul id="navList">
    <li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
    <li id="nav_myhome">
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/shakinghead/">
首页</a>
</li>
    <li id="nav_newpost">

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
    <li id="nav_contact">
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E6%91%87%E5%A4%B4%E8%80%B6%E7%A8%A3">
联系</a></li>
    <li id="nav_rss">
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/shakinghead/rss/">
订阅</a></li>
    <li id="nav_admin">
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>

            <div class="blogStats">
                
<span id="stats_post_count">随笔 - 
17&nbsp;</span>
<span id="stats_article_count">文章 - 
0&nbsp;</span>
<!-- <span id="stats-comment_count"></span> -->
<span id="stats_comment_count">评论 - 
14</span>
            </div>
        </div>
    </div>
    <div id="main">
        <div id="mainContent">
            <div class="forFlow">
                <div id="post_detail">
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/shakinghead/p/7651502.html">Java 浅拷贝和深拷贝的理解和实现方式</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p>Java中的对象拷贝(Object Copy)指的是将一个对象的所有属性（成员变量）拷贝到另一个有着相同类类型的对象中去。举例说明：比如，对象A和对象B都属于类S，具有属性a和b。那么对对象A进行拷贝操作赋值给对象B就是：B.a=A.a;&nbsp; B.b=A.b;</p>
<p>在程序中拷贝对象是很常见的，主要是为了在新的上下文环境中复用现有对象的部分或全部 数据。</p>
<p>Java中的对象拷贝主要分为：浅拷贝(Shallow Copy)、深拷贝(Deep Copy)。</p>
<p>先介绍一点铺垫知识：Java中的数据类型分为基本数据类型和引用数据类型。对于这两种数据类型，在进行赋值操作、用作方法参数或返回值时，会有值传递和引用（地址）传递的差别。</p>
<p><strong>浅拷贝</strong>（Shallow Copy）：①对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象。因为是两份不同的数据，所以对其中一个对象的该成员变量值进行修改，不会影响另一个对象拷贝得到的数据。②对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值。</p>
<p>具体模型如图所示：可以看到基本数据类型的成员变量，对其值创建了新的拷贝。而引用数据类型的成员变量的实例仍然是只有一份，两个对象的该成员变量都指向同一个实例。</p>
<p><img src="https://images2017.cnblogs.com/blog/1218256/201710/1218256-20171011182513121-1029542999.png" alt="" /></p>
<p>&nbsp;</p>
<p>浅拷贝的实现方式主要有三种：</p>
<p>一、通过拷贝构造方法实现浅拷贝：</p>
<p>拷贝构造方法指的是该类的构造方法参数为该类的对象。使用拷贝构造方法可以很好地完成浅拷贝，直接通过一个现有的对象创建出与该对象属性相同的新的对象。</p>
<p>代码参考如下：</p>
<div class="cnblogs_code">
<div class="cnblogs_code">
<pre><span style="color: #008000;">/*</span><span style="color: #008000;"> 拷贝构造方法实现浅拷贝 </span><span style="color: #008000;">*/</span>
<span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> CopyConstructor {
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
        Age a</span>=<span style="color: #0000ff;">new</span> Age(20<span style="color: #000000;">);
        Person p1</span>=<span style="color: #0000ff;">new</span> Person(a,"摇头耶稣"<span style="color: #000000;">);
        Person p2</span>=<span style="color: #0000ff;">new</span><span style="color: #000000;"> Person(p1);
        System.out.println(</span>"p1是"+<span style="color: #000000;">p1);
        System.out.println(</span>"p2是"+<span style="color: #000000;">p2);
        </span><span style="color: #008000;">//</span><span style="color: #008000;">修改p1的各属性值，观察p2的各属性值是否跟随变化</span>
        p1.setName("小傻瓜"<span style="color: #000000;">);
        a.setAge(</span>99<span style="color: #000000;">);
        System.out.println(</span>"修改后的p1是"+<span style="color: #000000;">p1);
        System.out.println(</span>"修改后的p2是"+<span style="color: #000000;">p2);
    }
}

</span><span style="color: #0000ff;">class</span><span style="color: #000000;"> Person{
    </span><span style="color: #008000;">//</span><span style="color: #008000;">两个属性值：分别代表值传递和引用传递</span>
    <span style="color: #0000ff;">private</span><span style="color: #000000;"> Age age;
    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> String name;
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Person(Age age,String name) {
        </span><span style="color: #0000ff;">this</span>.age=<span style="color: #000000;">age;
        </span><span style="color: #0000ff;">this</span>.name=<span style="color: #000000;">name;
    }
    </span><span style="color: #008000;">//</span><span style="color: #008000;">拷贝构造方法</span>
    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Person(Person p) {
        </span><span style="color: #0000ff;">this</span>.name=<span style="color: #000000;">p.name;
        </span><span style="color: #0000ff;">this</span>.age=<span style="color: #000000;">p.age;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setName(String name) {
        </span><span style="color: #0000ff;">this</span>.name=<span style="color: #000000;">name;
    }
    
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.name+" "+<span style="color: #0000ff;">this</span><span style="color: #000000;">.age;
    }
}

</span><span style="color: #0000ff;">class</span><span style="color: #000000;"> Age{
    </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> age;
    </span><span style="color: #0000ff;">public</span> Age(<span style="color: #0000ff;">int</span><span style="color: #000000;"> age) {
        </span><span style="color: #0000ff;">this</span>.age=<span style="color: #000000;">age;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setAge(<span style="color: #0000ff;">int</span><span style="color: #000000;"> age) {
        </span><span style="color: #0000ff;">this</span>.age=<span style="color: #000000;">age;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getAge() {
        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">.age;
    }
    
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
        </span><span style="color: #0000ff;">return</span> getAge()+""<span style="color: #000000;">;
    }
}</span></pre>
</div>
<p>&nbsp;</p>
</div>
<p>运行结果为：</p>
<p>p1是摇头耶稣 20<br />p2是摇头耶稣 20<br />修改后的p1是小傻瓜 99<br />修改后的p2是摇头耶稣 99</p>
<p>结果分析：这里对Person类选择了两个具有代表性的属性值：一个是引用传递类型；另一个是字符串类型（属于常量）。</p>
<p>通过拷贝构造方法进行了浅拷贝，各属性值成功复制。其中，p1值传递部分的属性值发生变化时，p2不会随之改变；而引用传递部分属性值发生变化时，p2也随之改变。</p>
<p>要注意：如果在拷贝构造方法中，对引用数据类型变量逐一开辟新的内存空间，创建新的对象，也可以实现深拷贝。而对于一般的拷贝构造，则一定是浅拷贝。</p>
<p>二、通过重写clone()方法进行浅拷贝：</p>
<p>Object类是类结构的根类，其中有一个方法为protected Object <strong>clone</strong>() throws <a title="java.lang 中的类" href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/lang/CloneNotSupportedException.html">CloneNotSupportedException</a>，这个方法就是进行的浅拷贝。有了这个浅拷贝模板，我们可以通过调用clone()方法来实现对象的浅拷贝。但是需要注意：1、Object类虽然有这个方法，但是这个方法是受保护的（被protected修饰），所以我们无法直接使用。2、使用clone方法的类必须实现Cloneable接口，否则会抛出异常<span style="font-family: Courier New;">CloneNotSupportedException。对于这两点，我们的解决方法是，在要使用clone方法的类中重写clone()方法，通过super.clone()调用Object类中的原clone方法。</span></p>
<p><span style="font-family: Courier New;">参考代码如下：对Student类的对象进行拷贝，直接重写clone()方法，通过调用clone方法即可完成浅拷贝。</span></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">/*</span><span style="color: #008000;"> clone方法实现浅拷贝 </span><span style="color: #008000;">*/</span>
<span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ShallowCopy {
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
        Age a</span>=<span style="color: #0000ff;">new</span> Age(20<span style="color: #000000;">);
        Student stu1</span>=<span style="color: #0000ff;">new</span> Student("摇头耶稣",a,175<span style="color: #000000;">);
        
        </span><span style="color: #008000;">//</span><span style="color: #008000;">通过调用重写后的clone方法进行浅拷贝</span>
        Student stu2=<span style="color: #000000;">(Student)stu1.clone();
        System.out.println(stu1.toString());
        System.out.println(stu2.toString());
        
        </span><span style="color: #008000;">//</span><span style="color: #008000;">尝试修改stu1中的各属性，观察stu2的属性有没有变化</span>
        stu1.setName("大傻子"<span style="color: #000000;">);
        </span><span style="color: #008000;">//</span><span style="color: #008000;">改变age这个引用类型的成员变量的值</span>
        a.setAge(99<span style="color: #000000;">);
        </span><span style="color: #008000;">//</span><span style="color: #008000;">stu1.setaAge(new Age(99));    使用这种方式修改age属性值的话，stu2是不会跟着改变的。因为创建了一个新的Age类对象而不是改变原对象的实例值</span>
        stu1.setLength(216<span style="color: #000000;">);
        System.out.println(stu1.toString());
        System.out.println(stu2.toString());
    }
}

</span><span style="color: #008000;">/*</span><span style="color: #008000;">
 * 创建年龄类
 </span><span style="color: #008000;">*/</span>
<span style="color: #0000ff;">class</span><span style="color: #000000;"> Age{
    </span><span style="color: #008000;">//</span><span style="color: #008000;">年龄类的成员变量（属性）</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> age;
    </span><span style="color: #008000;">//</span><span style="color: #008000;">构造方法</span>
    <span style="color: #0000ff;">public</span> Age(<span style="color: #0000ff;">int</span><span style="color: #000000;"> age) {
        </span><span style="color: #0000ff;">this</span>.age=<span style="color: #000000;">age;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getAge() {
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> age;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setAge(<span style="color: #0000ff;">int</span><span style="color: #000000;"> age) {
        </span><span style="color: #0000ff;">this</span>.age =<span style="color: #000000;"> age;
    }
    
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.age+""<span style="color: #000000;">;
    }
}
</span><span style="color: #008000;">/*</span><span style="color: #008000;">
 * 创建学生类
 </span><span style="color: #008000;">*/</span>
<span style="color: #0000ff;">class</span> Student <span style="color: #0000ff;">implements</span><span style="color: #000000;"> Cloneable{
    </span><span style="color: #008000;">//</span><span style="color: #008000;">学生类的成员变量（属性）,其中一个属性为类的对象</span>
    <span style="color: #0000ff;">private</span><span style="color: #000000;"> String name;
    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> Age aage;
    </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> length;
    </span><span style="color: #008000;">//</span><span style="color: #008000;">构造方法,其中一个参数为另一个类的对象</span>
    <span style="color: #0000ff;">public</span> Student(String name,Age a,<span style="color: #0000ff;">int</span><span style="color: #000000;"> length) {
        </span><span style="color: #0000ff;">this</span>.name=<span style="color: #000000;">name;
        </span><span style="color: #0000ff;">this</span>.aage=<span style="color: #000000;">a;
        </span><span style="color: #0000ff;">this</span>.length=<span style="color: #000000;">length;
    }
    </span><span style="color: #008000;">//</span><span style="color: #008000;">eclipe中alt+shift+s自动添加所有的set和get方法</span>
    <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getName() {
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> name;
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setName(String name) {
        </span><span style="color: #0000ff;">this</span>.name =<span style="color: #000000;"> name;
    }
    
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Age getaAge() {
        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">.aage;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setaAge(Age age) {
        </span><span style="color: #0000ff;">this</span>.aage=<span style="color: #000000;">age;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getLength() {
        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">.length;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setLength(<span style="color: #0000ff;">int</span><span style="color: #000000;"> length) {
        </span><span style="color: #0000ff;">this</span>.length=<span style="color: #000000;">length;
    }
    </span><span style="color: #008000;">//</span><span style="color: #008000;">设置输出的字符串形式</span>
    <span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
        </span><span style="color: #0000ff;">return</span> "姓名是： "+<span style="color: #0000ff;">this</span>.getName()+"， 年龄为： "+<span style="color: #0000ff;">this</span>.getaAge().toString()+", 长度是： "+<span style="color: #0000ff;">this</span><span style="color: #000000;">.getLength();
    }
    </span><span style="color: #008000;">//</span><span style="color: #008000;">重写Object类的clone方法</span>
    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object clone() {
        Object obj</span>=<span style="color: #0000ff;">null</span><span style="color: #000000;">;
        </span><span style="color: #008000;">//</span><span style="color: #008000;">调用Object类的clone方法，返回一个Object实例</span>
        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            obj</span>= <span style="color: #0000ff;">super</span><span style="color: #000000;">.clone();
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (CloneNotSupportedException e) {
            e.printStackTrace();
        }
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> obj;
    }
}</span></pre>
</div>
<p>&nbsp;</p>
<p>运行结果如下：</p>
<p>姓名是： 摇头耶稣， 年龄为： 20, 长度是： 175<br />姓名是： 摇头耶稣， 年龄为： 20, 长度是： 175<br />姓名是： 大傻子， 年龄为： 99, 长度是： 216<br />姓名是： 摇头耶稣， 年龄为： 99, 长度是： 175</p>
<p>其中：Student类的成员变量我有代表性地设置了三种：基本数据类型的成员变量length，引用数据类型的成员变量aage和字符串String类型的name.</p>
<p>分析结果可以验证：</p>
<p>基本数据类型是值传递，所以修改值后不会影响另一个对象的该属性值；</p>
<p>引用数据类型是地址传递（引用传递），所以修改值后另一个对象的该属性值会同步被修改。</p>
<p>String类型非常特殊，所以我额外设置了一个字符串类型的成员变量来进行说明。首先，String类型属于引用数据类型，不属于基本数据类型，但是String类型的数据是存放在常量池中的，也就是无法修改的！也就是说，当我将name属性从&ldquo;摇头耶稣&rdquo;改为&ldquo;大傻子"后，并不是修改了这个数据的值，而是把这个数据的引用从指向&rdquo;摇头耶稣&ldquo;这个常量改为了指向&rdquo;大傻子&ldquo;这个常量。在这种情况下，另一个对象的name属性值仍然指向&rdquo;摇头耶稣&ldquo;不会受到影响。</p>
<p><strong>深拷贝</strong>：首先介绍对象图的概念。设想一下，一个类有一个对象，其成员变量中又有一个对象，该对象指向另一个对象，另一个对象又指向另一个对象，直到一个确定的实例。这就形成了对象图。那么，对于深拷贝来说，不仅要复制对象的所有基本数据类型的成员变量值，还要为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。也就是说，对象进行深拷贝要对整个对象图进行拷贝！</p>
<p>简单地说，深拷贝对引用数据类型的成员变量的对象图中所有的对象都开辟了内存空间；而浅拷贝只是传递地址指向，新的对象并没有对引用数据类型创建内存空间。</p>
<p>深拷贝模型如图所示：可以看到所有的成员变量都进行了复制。</p>
<p><img src="https://images2017.cnblogs.com/blog/1218256/201710/1218256-20171011190501371-68869476.png" alt="" /></p>
<p>因为创建内存空间和拷贝整个对象图，所以深拷贝相比于浅拷贝速度较慢并且花销较大。</p>
<p>深拷贝的实现方法主要有两种：</p>
<p>一、通过重写clone方法来实现深拷贝</p>
<p>与通过重写clone方法实现浅拷贝的基本思路一样，只需要为对象图的每一层的每一个对象都实现Cloneable接口并重写clone方法，最后在最顶层的类的重写的clone方法中调用所有的clone方法即可实现深拷贝。简单的说就是：每一层的每个对象都进行浅拷贝=深拷贝。</p>
<p>参考代码如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">package</span><span style="color: #000000;"> linearList;
</span><span style="color: #008000;">/*</span><span style="color: #008000;"> 层次调用clone方法实现深拷贝 </span><span style="color: #008000;">*/</span>
<span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> DeepCopy {
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
        Age a</span>=<span style="color: #0000ff;">new</span> Age(20<span style="color: #000000;">);
        Student stu1</span>=<span style="color: #0000ff;">new</span> Student("摇头耶稣",a,175<span style="color: #000000;">);
        
        </span><span style="color: #008000;">//</span><span style="color: #008000;">通过调用重写后的clone方法进行浅拷贝</span>
        Student stu2=<span style="color: #000000;">(Student)stu1.clone();
        System.out.println(stu1.toString());
        System.out.println(stu2.toString());
        System.out.println();
        
        </span><span style="color: #008000;">//</span><span style="color: #008000;">尝试修改stu1中的各属性，观察stu2的属性有没有变化</span>
        stu1.setName("大傻子"<span style="color: #000000;">);
        </span><span style="color: #008000;">//</span><span style="color: #008000;">改变age这个引用类型的成员变量的值</span>
        a.setAge(99<span style="color: #000000;">);
        </span><span style="color: #008000;">//</span><span style="color: #008000;">stu1.setaAge(new Age(99));    使用这种方式修改age属性值的话，stu2是不会跟着改变的。因为创建了一个新的Age类对象而不是改变原对象的实例值</span>
        stu1.setLength(216<span style="color: #000000;">);
        System.out.println(stu1.toString());
        System.out.println(stu2.toString());
    }
}

</span><span style="color: #008000;">/*</span><span style="color: #008000;">
 * 创建年龄类
 </span><span style="color: #008000;">*/</span>
<span style="color: #0000ff;">class</span> Age <span style="color: #0000ff;">implements</span><span style="color: #000000;"> Cloneable{
    </span><span style="color: #008000;">//</span><span style="color: #008000;">年龄类的成员变量（属性）</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> age;
    </span><span style="color: #008000;">//</span><span style="color: #008000;">构造方法</span>
    <span style="color: #0000ff;">public</span> Age(<span style="color: #0000ff;">int</span><span style="color: #000000;"> age) {
        </span><span style="color: #0000ff;">this</span>.age=<span style="color: #000000;">age;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getAge() {
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> age;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setAge(<span style="color: #0000ff;">int</span><span style="color: #000000;"> age) {
        </span><span style="color: #0000ff;">this</span>.age =<span style="color: #000000;"> age;
    }
    
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.age+""<span style="color: #000000;">;
    }
    
    </span><span style="color: #008000;">//</span><span style="color: #008000;">重写Object的clone方法</span>
    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object clone() {
        Object obj</span>=<span style="color: #0000ff;">null</span><span style="color: #000000;">;
        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            obj</span>=<span style="color: #0000ff;">super</span><span style="color: #000000;">.clone();
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (CloneNotSupportedException e) {
            e.printStackTrace();
        }
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> obj;
    }
}
</span><span style="color: #008000;">/*</span><span style="color: #008000;">
 * 创建学生类
 </span><span style="color: #008000;">*/</span>
<span style="color: #0000ff;">class</span> Student <span style="color: #0000ff;">implements</span><span style="color: #000000;"> Cloneable{
    </span><span style="color: #008000;">//</span><span style="color: #008000;">学生类的成员变量（属性）,其中一个属性为类的对象</span>
    <span style="color: #0000ff;">private</span><span style="color: #000000;"> String name;
    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> Age aage;
    </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> length;
    </span><span style="color: #008000;">//</span><span style="color: #008000;">构造方法,其中一个参数为另一个类的对象</span>
    <span style="color: #0000ff;">public</span> Student(String name,Age a,<span style="color: #0000ff;">int</span><span style="color: #000000;"> length) {
        </span><span style="color: #0000ff;">this</span>.name=<span style="color: #000000;">name;
        </span><span style="color: #0000ff;">this</span>.aage=<span style="color: #000000;">a;
        </span><span style="color: #0000ff;">this</span>.length=<span style="color: #000000;">length;
    }
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> String getName() {
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> name;
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setName(String name) {
        </span><span style="color: #0000ff;">this</span>.name =<span style="color: #000000;"> name;
    }
    
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Age getaAge() {
        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">.aage;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setaAge(Age age) {
        </span><span style="color: #0000ff;">this</span>.aage=<span style="color: #000000;">age;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getLength() {
        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">.length;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setLength(<span style="color: #0000ff;">int</span><span style="color: #000000;"> length) {
        </span><span style="color: #0000ff;">this</span>.length=<span style="color: #000000;">length;
    }
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
        </span><span style="color: #0000ff;">return</span> "姓名是： "+<span style="color: #0000ff;">this</span>.getName()+"， 年龄为： "+<span style="color: #0000ff;">this</span>.getaAge().toString()+", 长度是： "+<span style="color: #0000ff;">this</span><span style="color: #000000;">.getLength();
    }
    </span><span style="color: #008000;">//</span><span style="color: #008000;">重写Object类的clone方法</span>
    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object clone() {
        Object obj</span>=<span style="color: #0000ff;">null</span><span style="color: #000000;">;
        </span><span style="color: #008000;">//</span><span style="color: #008000;">调用Object类的clone方法&mdash;&mdash;浅拷贝</span>
        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            obj</span>= <span style="color: #0000ff;">super</span><span style="color: #000000;">.clone();
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (CloneNotSupportedException e) {
            e.printStackTrace();
        }
        </span><span style="color: #008000;">//</span><span style="color: #008000;">调用Age类的clone方法进行深拷贝
        </span><span style="color: #008000;">//</span><span style="color: #008000;">先将obj转化为学生类实例</span>
        Student stu=<span style="color: #000000;">(Student)obj;
        </span><span style="color: #008000;">//</span><span style="color: #008000;">学生类实例的Age对象属性，调用其clone方法进行拷贝</span>
        stu.aage=<span style="color: #000000;">(Age)stu.getaAge().clone();
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> obj;
    }
}</span></pre>
</div>
<p>姓名是： 摇头耶稣， 年龄为： 20, 长度是： 175<br />姓名是： 摇头耶稣， 年龄为： 20, 长度是： 175<br />姓名是： 大傻子， 年龄为： 99, 长度是： 216<br />姓名是： 摇头耶稣， 年龄为： 20, 长度是： 175</p>
<p>分析结果可以验证：进行了深拷贝之后，无论是什么类型的属性值的修改，都不会影响另一个对象的属性值。</p>
<p>二、通过对象序列化实现深拷贝</p>
<p>虽然层次调用clone方法可以实现深拷贝，但是显然代码量实在太大。特别对于属性数量比较多、层次比较深的类而言，每个类都要重写clone方法太过繁琐。</p>
<p>将对象序列化为字节序列后，默认会将该对象的整个对象图进行序列化，再通过反序列即可完美地实现深拷贝。</p>
<p>参考代码如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.ByteArrayInputStream;
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.ByteArrayOutputStream;
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.IOException;
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.ObjectInputStream;
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.ObjectOutputStream;
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.Serializable;

</span><span style="color: #008000;">/*</span><span style="color: #008000;"> 通过序列化实现深拷贝 </span><span style="color: #008000;">*/</span>
<span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> DeepCopyBySerialization {
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> main(String[] args) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> IOException, ClassNotFoundException  {
        Age a</span>=<span style="color: #0000ff;">new</span> Age(20<span style="color: #000000;">);
        Student stu1</span>=<span style="color: #0000ff;">new</span> Student("摇头耶稣",a,175<span style="color: #000000;">);
        </span><span style="color: #008000;">//</span><span style="color: #008000;">通过序列化方法实现深拷贝</span>
        ByteArrayOutputStream bos=<span style="color: #0000ff;">new</span><span style="color: #000000;"> ByteArrayOutputStream();
        ObjectOutputStream oos</span>=<span style="color: #0000ff;">new</span><span style="color: #000000;"> ObjectOutputStream(bos);
        oos.writeObject(stu1);
        oos.flush();
        ObjectInputStream ois</span>=<span style="color: #0000ff;">new</span> ObjectInputStream(<span style="color: #0000ff;">new</span><span style="color: #000000;"> ByteArrayInputStream(bos.toByteArray()));
        Student stu2</span>=<span style="color: #000000;">(Student)ois.readObject();
        System.out.println(stu1.toString());
        System.out.println(stu2.toString());
        System.out.println();
        </span><span style="color: #008000;">//</span><span style="color: #008000;">尝试修改stu1中的各属性，观察stu2的属性有没有变化</span>
        stu1.setName("大傻子"<span style="color: #000000;">);
        </span><span style="color: #008000;">//</span><span style="color: #008000;">改变age这个引用类型的成员变量的值</span>
        a.setAge(99<span style="color: #000000;">);
        stu1.setLength(</span>216<span style="color: #000000;">);
        System.out.println(stu1.toString());
        System.out.println(stu2.toString());
    }
}

</span><span style="color: #008000;">/*</span><span style="color: #008000;">
 * 创建年龄类
 </span><span style="color: #008000;">*/</span>
<span style="color: #0000ff;">class</span> Age <span style="color: #0000ff;">implements</span><span style="color: #000000;"> Serializable{
    </span><span style="color: #008000;">//</span><span style="color: #008000;">年龄类的成员变量（属性）</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> age;
    </span><span style="color: #008000;">//</span><span style="color: #008000;">构造方法</span>
    <span style="color: #0000ff;">public</span> Age(<span style="color: #0000ff;">int</span><span style="color: #000000;"> age) {
        </span><span style="color: #0000ff;">this</span>.age=<span style="color: #000000;">age;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getAge() {
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> age;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setAge(<span style="color: #0000ff;">int</span><span style="color: #000000;"> age) {
        </span><span style="color: #0000ff;">this</span>.age =<span style="color: #000000;"> age;
    }
    
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.age+""<span style="color: #000000;">;
    }
}
</span><span style="color: #008000;">/*</span><span style="color: #008000;">
 * 创建学生类
 </span><span style="color: #008000;">*/</span>
<span style="color: #0000ff;">class</span> Student <span style="color: #0000ff;">implements</span><span style="color: #000000;"> Serializable{
    </span><span style="color: #008000;">//</span><span style="color: #008000;">学生类的成员变量（属性）,其中一个属性为类的对象</span>
    <span style="color: #0000ff;">private</span><span style="color: #000000;"> String name;
    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> Age aage;
    </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> length;
    </span><span style="color: #008000;">//</span><span style="color: #008000;">构造方法,其中一个参数为另一个类的对象</span>
    <span style="color: #0000ff;">public</span> Student(String name,Age a,<span style="color: #0000ff;">int</span><span style="color: #000000;"> length) {
        </span><span style="color: #0000ff;">this</span>.name=<span style="color: #000000;">name;
        </span><span style="color: #0000ff;">this</span>.aage=<span style="color: #000000;">a;
        </span><span style="color: #0000ff;">this</span>.length=<span style="color: #000000;">length;
    }
    </span><span style="color: #008000;">//</span><span style="color: #008000;">eclipe中alt+shift+s自动添加所有的set和get方法</span>
    <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getName() {
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> name;
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setName(String name) {
        </span><span style="color: #0000ff;">this</span>.name =<span style="color: #000000;"> name;
    }
    
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Age getaAge() {
        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">.aage;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setaAge(Age age) {
        </span><span style="color: #0000ff;">this</span>.aage=<span style="color: #000000;">age;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getLength() {
        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">.length;
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setLength(<span style="color: #0000ff;">int</span><span style="color: #000000;"> length) {
        </span><span style="color: #0000ff;">this</span>.length=<span style="color: #000000;">length;
    }
    </span><span style="color: #008000;">//</span><span style="color: #008000;">设置输出的字符串形式</span>
    <span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {
        </span><span style="color: #0000ff;">return</span> "姓名是： "+<span style="color: #0000ff;">this</span>.getName()+"， 年龄为： "+<span style="color: #0000ff;">this</span>.getaAge().toString()+", 长度是： "+<span style="color: #0000ff;">this</span><span style="color: #000000;">.getLength();
    }
}</span></pre>
</div>
<p>运行结果为：</p>
<p>姓名是： 摇头耶稣， 年龄为： 20, 长度是： 175<br />姓名是： 摇头耶稣， 年龄为： 20, 长度是： 175<br />姓名是： 大傻子， 年龄为： 99, 长度是： 216<br />姓名是： 摇头耶稣， 年龄为： 20, 长度是： 175</p>
<p>可以通过很简洁的代码即可完美实现深拷贝。不过要注意的是，如果某个属性被transient修饰，那么该属性就无法被拷贝了。</p>
<p>&nbsp;以上是浅拷贝的深拷贝的区别和实现方式。</p>
<p>over.</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2017-10-11 19:28</span>&nbsp;
<a href="https://www.cnblogs.com/shakinghead/">摇头耶稣</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=7651502" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(7651502);return false;">收藏</a></div>
        </div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 374964, cb_blogApp = 'shakinghead', cb_blogUserGuid = '08919a62-5ee6-47a5-700d-08d49c352df3';
    var cb_entryId = 7651502, cb_entryCreatedDate = '2017-10-11 19:28', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>    </div>
</div>
            </div>
        </div>

        <div id="sideBar">
            <div id="sideBarMain">
                
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
                <div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                <script>loadBlogDefaultCalendar();</script>
                <div id="leftcontentcontainer">
                    <!-- begin:SingleColumn -->
                    <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                    <!-- end:  SingleColumn -->
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
    <div id="footer">
        <!--done-->
Copyright &copy; 2020 摇头耶稣
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

    </div>
</div>

    
</body>
</html>