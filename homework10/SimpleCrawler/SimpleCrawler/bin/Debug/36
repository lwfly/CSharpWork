<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="资料：慕课网 第二章：手动搭建I/O网络通信框架2：BIO编程模型实现群聊 第三章：手动搭建I/O网络通信框架3：NIO编程模型，升级改造聊天室 第四章：手动搭建I/O网络通信框架4：AIO编程模型，" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>手动搭建I/O网络通信框架1：Socket和ServerSocket入门实战，实现单聊 - 耶low - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/custom/bundle-custom.min.css?v=1ssrnY3Il79Ok472qeVrpxlSprSXcHhYPgZC5S3wtVM" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/lbhym/custom.css?v=/bNcoqoCmLiTu3EIkfiCTX1tFFw=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=-Yh290MhQyDeXLmvKTSses9H6-49lqbpXFh55zvS0w8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/lbhym/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/lbhym/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/lbhym/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 524632;
        var currentBlogApp = 'lbhym';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'Custom';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/lbhym/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/lbhym/">耶low的博客</a>
</h1>
<h2>
路途遥远
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/lbhym/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E8%80%B6low">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/lbhym/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
51&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
6</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lbhym/p/12673470.html">手动搭建I/O网络通信框架1：Socket和ServerSocket入门实战，实现单聊</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p>资料：慕课网</p>
<p><span style="font-size: 16px;">　　第二章：</span><span style="font-size: 16px;"><a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lbhym/p/12681787.html">手动搭建I/O网络通信框架2：BIO编程模型实现群聊</a></span></p>
<p><span style="font-size: 16px;">　　第三章：<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lbhym/p/12698309.html">手动搭建I/O网络通信框架3：NIO编程模型，升级改造聊天室</a></span></p>
<p><span style="font-size: 16px;">　　第四章：<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lbhym/p/12720944.html">手动搭建I/O网络通信框架4：AIO编程模型，聊天室终极改造</a></span></p>
<p><span style="font-size: 16px;">&nbsp;　　这个基础项目会作为BIO、NIO、AIO的一个前提，后面会有数篇博客会基于这个小项目利用BIO、NIO、AIO进行改造升级。</span></p>
<p><span style="font-size: 16px;">　　简单的说一下io，了解的直接跳过看代码吧:IO常见的使用场景就是网络通信或读取文件等方面。</span><span style="font-family: 'Microsoft YaHei'; font-size: 16px; text-indent: 16.95pt;">IO流分为字节流和字符流。字节即Byte，包含八位二进制数，一个二进制数就是1bit，中文名称叫位。字符即一个字母或者一个汉字。一个字母由一个字节组成，而汉字根据编码不同由2个或者3个组成。Java.io包如下:详细的API可自行查阅资料</span></p>
<p><span style="font-family: 宋体; font-size: 10.5pt; text-indent: 16.95pt;">　　<img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200410142107890-242008210.png" alt="" width="526" height="371" /></span></p>
<p><span style="font-family: 宋体; font-size: 10.5pt; text-indent: 16.95pt;"><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200410142126015-790268014.png" alt="" width="597" height="273" /></span></p>
<p>&nbsp;</p>
<p>　　<span style="font-size: 16px;"><strong>Socket定义</strong>：</span><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序将I/O插入到网络中，并与网络中的其他应用程序进行通信。网络套接字是IP地址与端口的组合。</span></p>
<p><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">　　</span><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">可以理解为两台机器或进程间进行网络通信的端点，这个端点包含IP地址和端口号。</span></p>
<p><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">　　Socket和ServerSocket区别就如其名字一样，简单地说ServerSocket作用在服务端，用以监听客户端的请求。Socket作用在客户端和服务端，用以发送接收消息。但是就像上面说的，它们都要包含一个IP地址和端口号。</span></p>
<h2><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">　　Socket和ServerSocket实战：</span></h2>
<p><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">　　首先创建一个最普通的Java项目。然后创建两个类，Server和Client。其代码和注释如下,仔细看下注释和代码，还是比较简单的</span></p>
<p><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">　　服务器只能为一个客户端服务，一旦监听到客户端的请求，就会一直被这个客户端占用。</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Client {
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
        </span><span style="color: #008000;">//</span><span style="color: #008000;">这是服务端的IP和端口</span>
        <span style="color: #0000ff;">final</span> String DEFAULT_SERVER_HOST = "127.0.0.1"<span style="color: #000000;">;
        </span><span style="color: #0000ff;">final</span> <span style="color: #0000ff;">int</span> DEFAULT_SERVER_PORT = 8888<span style="color: #000000;">;
        </span><span style="color: #008000;">//</span><span style="color: #008000;">创建Socket</span>
        <span style="color: #0000ff;">try</span> (Socket socket = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Socket(DEFAULT_SERVER_HOST, DEFAULT_SERVER_PORT)) {
            </span><span style="color: #008000;">//</span><span style="color: #008000;">接收消息</span>
            BufferedReader reader = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BufferedReader(
                    </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> InputStreamReader(socket.getInputStream())
            );
            </span><span style="color: #008000;">//</span><span style="color: #008000;">发送消息</span>
            BufferedWriter writer = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BufferedWriter(
                    </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> OutputStreamWriter(socket.getOutputStream())
            );
            </span><span style="color: #008000;">//</span><span style="color: #008000;">获取用户输入的消息</span>
            BufferedReader userReader = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BufferedReader(
                    </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> InputStreamReader(System.in)
            );
            String msg </span>= <span style="color: #0000ff;">null</span><span style="color: #000000;">;
            </span><span style="color: #008000;">//</span><span style="color: #008000;">循环的话客户端就可以一直输入消息，不然执行完try catch会自动释放资源，也就是断开连接</span>
            <span style="color: #0000ff;">while</span> (<span style="color: #0000ff;">true</span><span style="color: #000000;">) {
                String input </span>=<span style="color: #000000;"> userReader.readLine();
                </span><span style="color: #008000;">//</span><span style="color: #008000;">写入客户端要发送的消息。因为服务端用readLine获取消息，其以\n为终点，所以要在消息最后加上\n</span>
                writer.write(input + "\n"<span style="color: #000000;">);
                writer.flush();
                msg </span>=<span style="color: #000000;"> reader.readLine();
                System.out.println(msg);
                </span><span style="color: #008000;">//</span><span style="color: #008000;">如果客户端输入quit就可以跳出循环、断开连接了</span>
                <span style="color: #0000ff;">if</span>(input.equals("quit"<span style="color: #000000;">)){
                    </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;
                }
            }
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
            e.printStackTrace();
        }
    }
}<br /></span></pre>
</div>
<p>　　</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Server {
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
        </span><span style="color: #0000ff;">final</span> <span style="color: #0000ff;">int</span> DEFAULT_PORT = 8888<span style="color: #000000;">;
        </span><span style="color: #008000;">//</span><span style="color: #008000;">创建ServerSocket监听8888端口</span>
        <span style="color: #0000ff;">try</span> (ServerSocket serverSocket = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ServerSocket(DEFAULT_PORT)) {
            System.out.println(</span>"ServerSocket Start,The Port is:" +<span style="color: #000000;"> DEFAULT_PORT);
            </span><span style="color: #0000ff;">while</span> (<span style="color: #0000ff;">true</span>) {<span style="color: #008000;">//</span><span style="color: #008000;">不停地监听该端口
                </span><span style="color: #008000;">//</span><span style="color: #008000;">阻塞式的监听，如果没有客户端请求就一直停留在这里</span>
                Socket socket =<span style="color: #000000;"> serverSocket.accept();
                System.out.println(</span>"Client[" + socket.getPort() + "]Online"<span style="color: #000000;">);
                </span><span style="color: #008000;">//</span><span style="color: #008000;">接收消息</span>
                BufferedReader reader = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BufferedReader(
                        </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> InputStreamReader(socket.getInputStream())
                );
                </span><span style="color: #008000;">//</span><span style="color: #008000;">发送消息</span>
                BufferedWriter writer = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BufferedWriter(
                        </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> OutputStreamWriter(socket.getOutputStream())
                );

                String msg </span>= <span style="color: #0000ff;">null</span><span style="color: #000000;">;
                </span><span style="color: #0000ff;">while</span> ((msg = reader.readLine()) != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
                    System.out.println(</span>"Client[" + socket.getPort() + "]:" +<span style="color: #000000;"> msg);
                    </span><span style="color: #008000;">//</span><span style="color: #008000;">写入服务端要发送的消息</span>
                    writer.write("Server:" + msg + "\n"<span style="color: #000000;">);
                    writer.flush();
                    </span><span style="color: #008000;">//</span><span style="color: #008000;">如果客户端的消息是quit代表他退出了，并跳出循环，不用再接收他的消息了。如果客户端再次连接就会重新上线</span>
                    <span style="color: #0000ff;">if</span> (msg.equals("quit"<span style="color: #000000;">)) {
                        System.out.println(</span>"Client[" + socket.getPort() + "]:Offline"<span style="color: #000000;">);
                        </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;
                    }
                }
            }
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
            e.printStackTrace();
        }
    }
}</span></pre>
</div>
<p>&nbsp;</p>
<p>　　<span style="font-size: 16px;">然后打开两个命令终端，通过javac编译后，一个运行Server代表服务器，一个运行Client代表客户端。</span></p>
<p><span style="font-size: 16px;"><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200410144802569-1725038127.png" alt="" /></span></p>
<p><img src="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200410144811290-2056832827.png" alt="" />&nbsp;</p>
<p><span style="font-size: 16px;">下一篇：基于BIO进行升级改造，打造群聊聊天室。</span></p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-10 14:48</span>&nbsp;
<a href="https://www.cnblogs.com/lbhym/">耶low</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12673470" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12673470);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 524632, cb_blogApp = 'lbhym', cb_blogUserGuid = '35e67917-dc39-41b2-3962-08d5a8229c33';
    var cb_entryId = 12673470, cb_entryCreatedDate = '2020-04-10 14:48', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 耶low
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>