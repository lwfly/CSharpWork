<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="前言 前情提要： &amp;quot;Git应用详解第六讲：Git协作与Git pull常见问题&amp;quot; 这一节来介绍本地仓库与远程仓库的分支映射关系： 。彻底弄清楚本地仓库到底是如何与远程仓库进行联系的" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Git应用详解第七讲：Git refspec与远程分支的重要操作 - AhuntSun - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/AhuntSun-blog/custom.css?v=aQxv9ugmgmxj9aI02HToOmJXaLs=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=-Yh290MhQyDeXLmvKTSses9H6-49lqbpXFh55zvS0w8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/AhuntSun-blog/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/AhuntSun-blog/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/AhuntSun-blog/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 555013;
        var currentBlogApp = 'AhuntSun-blog';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'Custom';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
         
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/AhuntSun-blog/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/AhuntSun-blog/">AhuntSun</a>
</h1>
<h2>
Talk is cheap, Show me the code.
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/AhuntSun-blog/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/AhuntSun">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/AhuntSun-blog/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
127&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
70</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/AhuntSun-blog/p/12721437.html">Git应用详解第七讲：Git refspec与远程分支的重要操作</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h3 id="前言">前言</h3>
<blockquote>
<p>前情提要：<a href="https://www.cnblogs.com/AhuntSun-blog/p/12713666.html">Git应用详解第六讲：Git协作与Git pull常见问题</a></p>
</blockquote>
<p>这一节来介绍本地仓库与远程仓库的分支映射关系：<code>git refspec</code>。彻底弄清楚本地仓库到底是如何与远程仓库进行联系的。</p>
<h3 id="一、git-refspec">一、<code>Git refspec</code></h3>
<p><code>refspec</code>是<code>Reference Specification</code>的缩写，字面意思就是<strong>具体的引用</strong>。它其实是<strong>一种格式</strong>，<code>git</code>通过这种格式来表示<strong>本地分支</strong>与<strong>远程分支</strong>的映射关系；</p>
<p>在本地仓库创建<code>master</code>分支外的其他两个分支<code>develop</code>和<code>test</code>:</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/1.png" alt="image-20200329114836186"></p>
<p>在<code>develop</code>分支上执行<code>git push</code>命令，出现如下错误：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/2.png" alt="image-20200329114910354"></p>
<p>这是由于本地分支<code>develop</code>没有与任何的远程分支建立联系导致的。通过<code>git branch -vv</code>查看本地与远程分支的关联情况，可见并没有建立任何联系：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/3.png" alt="image-20200416172209683"></p>
<h3 id="二、本地远程分支">二、本地远程分支</h3>
<p>在讲解如何建立与本地分支关联的远程分支之前，首先我们来介绍期待已久的本地远程分支：</p>
<ul>
<li><code>git</code>中其实有三种分支：本地分支、本地远程分支、远程分支；</li>
<li>可以这样理解：本地远程分支是远程分支的一个镜像，并且在本地仓库与远程仓库之间起到一个桥梁的作用；</li>
<li>在没有办法直接查看远程仓库的时候，可以通过本地远程分支观察远程分支的变化情况。比如本地远程分支<code>origin/develop</code>就对应着远程分支<code>develop</code>。</li>
</ul>
<h4 id="1三分支关系">1.三分支关系</h4>
<p>当本地<code>master</code>分支建立了与之关联的远程分支<code>master</code>后，查看当前分支状态：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/4.png" alt="image-20200416172925457"></p>
<p>图中的<code>origin/master</code>为本地远程分支，代表的是远程仓库的<code>master</code>分支，而这个分支是在本地的；也就是说加上远程仓库的<code>master</code>分支，一共有三个<code>master</code>分支：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/5.png" alt="image-20200407133027775"></p>
<p>并且，当本地仓库中的每一个分支都有与之关联的远程分支之后，本地仓库都会创建对应的<strong>本地远程分支</strong>，它们所处的位置和关系如下图所示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/6.png" alt="image-20200407134533388"></p>
<blockquote>
<p>可以这样理解：本地远程分支<code>origin/master</code>为远程分支<code>master</code>的本地化形式；</p>
</blockquote>
<p>假设远程仓库和本地仓库文件内容是一样的，都只有两次提交，此时三个分支的状态如下图所示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/7.png" alt="image-20200407133442447"></p>
<p>然后，在本地的<code>master</code>分支中新增了提交<code>3rd</code>，本地仓库的分支情况变为：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/8.png" alt="image-20200416174501257"></p>
<blockquote>
<p>上图中的<code>git dog</code>为指令：<code>git log --all --decorate --oneline --graph</code>的别名，有关内容将在下一节讲解。</p>
</blockquote>
<p>分支的示意图如下：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/9.png" alt="image-20200407133629409"></p>
<p>可见本地<code>master</code>分支比本地远程分支<code>origin/master</code>多了一次提交。这是因为本地远程分支是为了追踪远程分支而存在的，只有在执行<code>pull</code>或<code>push</code>操作时它的指向才会更新。比如在执行推送（<code>push</code>）指令时：</p>
<ul>
<li>
<p>首先，本地<code>master</code>分支对应的本地远程分支（<code>origin/master</code>）会指向本地<code>master</code>分支最新的提交（向前走了几步）；</p>
</li>
<li>
<p>然后，本地<code>master</code>分支再将文件推送到远程<code>master</code>分支中。完成推送后，三分支的状态为：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/10.png" alt="image-20200416175059690"></p>
</li>
</ul>
<p>回到终端，我们将刚才新增的提交<code>3rd</code>推送到远程分支，成功后查看本地分支以及本地远程分支的提交历史：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/11.png" alt="image-20200416180507680"></p>
<p>可见，本地远程分支的指向得到了更新，指向了最新的提交<code>3rd</code>，由此验证了上述说法。</p>
<p><strong>查看分支关联</strong></p>
<p>可以通过以下指令查看本地分支与本地远程分支的关联情况：</p>
<pre><code>git branch -vv
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/12.png" alt="image-20200410120936906"></p>
<p>可以看到：本地的<code>master</code>分支有本地远程分支<code>origin/master</code>关联，说明本地<code>master</code>分支已经和远程<code>master</code>分支建立了关联；</p>
<p>其余两个本地分支<code>pop</code>和<code>develop</code>并没有与之关联的本地远程分支，所以它们并没有与远程分支建立联系。</p>
<blockquote>
<p>简单点说：只要<strong>本地分支</strong>有与之对应的<strong>本地远程分支</strong>，就有与之对应的<strong>远程分支</strong>。</p>
</blockquote>
<p><strong>总结：</strong><code>origin/master</code>作用：<strong>追踪远程分支</strong>。当执行<code>git push/pull</code>操作时，该分支的指向都会相应地发生变化，用于与远程仓库保持同步；比如：本地仓库在执行<code>git push</code>操作的时候，不仅会把本地的修改推送到远程；还会同时修改<code>origin/master</code>分支的指向；</p>
<h4 id="2实战演示">2.实战演示</h4>
<p>可通过该指令查看本地的所有分支及其<strong>最新的提交信息</strong>：</p>
<pre><code>git branch -av
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/13.png" alt="image-20200328164526656"></p>
<p>首先，在<code>master</code>分支上进行三次提交，并将它推送到与之关联的远程<code>master</code>分支，此时各分支的提交历史为：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/14.png" alt="image-20200416181958738"></p>
<p>三个分支的状态为：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/15.png" alt="image-20200416182211614"></p>
<p>在此基础上，在<code>master</code>分支上进行一次提交<code>4th</code>，然后查看状态<code>git status</code>：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/16.png" alt="image-20200416182358491"></p>
<p>图中提示信息表明，当前分支（<code>master</code>）已经领先于<code>origin/master</code>分支一次提交。为了看得更清楚，我们查看本地各分支的提交历史：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/17.png" alt="image-20200416182650885"></p>
<p>从图中可看出，<code>origin/master</code>分支确实落后了一次提交，表示远程<code>master</code>分支落后了一次提交。此时可以使用<code>git push</code>将新增的提交推送到远程<code>master</code>分支，在这个过程中会将本地远程分支<code>origin/master</code>指向最新的提交<code>4th</code>。成功推送之后，再次查看本地各分支的提交历史：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/18.png" alt="image-20200416182921683"></p>
<p>可见，通过<code>git push</code>操作本地远程分支确实发生了更新，指向了最新提交<code>4th</code>。这就验证了执行<code>git push</code>时进行了两步操作：</p>
<ul>
<li>将本地<code>master</code>分支的新提交推送到与之关联的远程<code>master</code>分支；</li>
<li>将本地远程分支<code>origin/master</code>指向本地<code>master</code>分支的最新提交；</li>
</ul>
<p><code>git pull</code>操作同理，也会更新本地远程分支的指向；</p>
<p>也就是说：<strong>每次执行<code>push</code>或<code>pull</code>操作后，本地分支、本地远程分支、远程分支三个分支的指向都会达到同步。</strong></p>
<p>当切换到<code>origin/master</code>分支上时，如下图所示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/19.png" alt="image-20200416183352637"></p>
<p><code>git</code>并不会直接将分支切换到<code>origin/master</code>上，而是切换到最新的一次提交上，即一个游离的提交。这从侧面说明了：<code>git</code>是<strong>禁止</strong>我们直接修改<code>origin/master</code>分支的，只允许我们切换到最新的提交上；</p>
<p><strong>也就是说本地远程分支（如<code>origin/master</code>）是只读的，只能由<code>git</code>来改变，这就解释了为何使用<code>git branch</code>无法查看本地远程分支。</strong></p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/20.png" alt="image-20200416183719001"></p>
<h3 id="三、设置远程分支">三、设置远程分支</h3>
<p>弄清楚了什么是本地远程分支，就能更好地理解接下来所要介绍的，如何建立本地分支与远程分支的联系了。</p>
<h4 id="1设置同名远程分支">1.设置同名远程分支</h4>
<p>上图提示信息中的：<code>upstream branch</code>表示上游分支，即远程仓库的分支。当前的本地分支<code>develop</code>并没有一个远程仓库的<code>develop</code>分支与之对应；要想推送<code>develop</code>分支到远程仓库的<strong>同名分支</strong>，首先要创建对应的远程分支，有以下两种类型四种方法：</p>
<ul>
<li>
<p><strong>类型一：</strong>建立本地与远程分支追踪关系的。</p>
<pre><code>git push --set-upstream origin &lt;branch&gt;
git push -u origin &lt;branch&gt;
</code></pre>
<p>使用该类型方法，只需设置一次，之后就可以使用简写形式<code>git push</code>进行推送。</p>
</li>
<li>
<p><strong>类型二：</strong>不建立本地与远程分支追踪关系的。</p>
<pre><code>git push origin HEAD
git push origin &lt;branch_name&gt;
</code></pre>
<p>使用该类型方法，每次推送都需要采用上述的完整写法。</p>
</li>
</ul>
<p>下面就来详细介绍这四种方法：</p>
<h5 id="git-push---set-upstream-origin-branch"><code>git push --set-upstream origin &lt;branch&gt;</code></h5>
<p><strong>方法一：</strong>采用下述指令为本地仓库<code>mygit</code>的<code>develop</code>分支创建远程分支：</p>
<pre><code>git push --set-upstream origin develop
</code></pre>
<p>该命令的作用为：在远程仓库创键一个与本地分支<code>develop</code><strong>关联</strong>的同名分支<code>develop</code>，并将本地分支<code>develop</code>的文件推送到该远程分支上。</p>
<p>也就是将本地分支<code>develop</code>的上游分支设置为远程仓库的<code>develop</code>分支，并进行文件同步。</p>
<p>执行完上述命令后会有这样的提示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/21.png" alt="image-20200416172401646"></p>
<p>表示本地的<code>develop</code>分支已与远程的<code>develop</code>分支<strong>建立联系</strong>；此时查看本地分支，会发现多了一个本地远程分支<code>origin/develop</code>，并且已与本地<code>develop</code>分支建立了联系：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/22.png" alt="image-20200416235458838"></p>
<p>随后再次执行<code>git push</code>就不会出现问题了：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/23.png" alt="image-20200329120642796"></p>
<p>此时在<code>github</code>上查看对应的远程仓库，就能查看到新增的远程分支<code>develop</code>了：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/24.png" alt="image-20200329122141124"></p>
<blockquote>
<p>上图中的<code>master</code>分支是远程仓库创建时默认创建的，并没有与本地<code>master</code>分支建立联系。</p>
</blockquote>
<p>随后点开<code>branch</code>可以看到：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/25.png" alt="image-20200329122249532"></p>
<p>当前一共有两个分支，<code>master</code>分支是<code>default</code>（默认）分支，是不能够被删除的；活跃的分支为<code>deavelop</code>；</p>
<h5 id="git-push--u-origin-branch"><code>git push -u origin &lt;branch&gt;</code></h5>
<p><strong>方法二：</strong>先切换到<code>test</code>分支，再执行以下命令，为本地仓库<code>mygit</code>的<code>test</code>分支创建对应的远程分支：</p>
<pre><code>git push -u origin test
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/26.png" alt="image-20200417000257150"></p>
<p><code>-u</code>与<code>--set-upstream</code>作用是类似的，都是在远程仓库新建一个新的分支，并与本地分支建立联系。</p>
<p>执行完上述指令后，再次查看本地分支的详细情况，以及分支对应关系，可以发现<code>test</code>分支已与远程<code>test</code>分支建立联系：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/27.png" alt="image-20200417000515217"></p>
<h5 id="git-push-origin-head"><code>git push origin HEAD</code></h5>
<p><strong>方法三：</strong></p>
<p>如下图所示，通过该指令成功设置了本地<code>develop</code>分支对应的远程<code>develop</code>分支。但没有显示追踪信息，之后不能使用<code>git push</code>推送。</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/28.png" alt="image-20200417121129943"></p>
<h5 id="git-push-origin-branch"><code>git push origin &lt;branch&gt;</code></h5>
<p><strong>方法四：</strong></p>
<p>如下图所示，该方法实质上与方法三相同，因为<code>HEAD</code>指向的就是当前分支。同样没有显示追踪信息，之后也不能使用<code>git push</code>推送。</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/29.png" alt="image-20200417121419529"></p>
<blockquote>
<p><strong>总结：</strong>当本地分支与远程分支同名时，一旦手动建立了它们之间的联系。之后推送本地分支的文件到对应的远程分支时可以采用简写形式：<code>git push</code>。</p>
<p>这是因为在已经建立三个分支的对应关系并后，再执行<code>git push</code>，<code>git</code>会自动地将同名的本地分支与远程分支进行匹配；</p>
<p>而其他情况则要采用完整写法进行推送。关于这些结论，将在第三大点<code>-u</code>参数的作用中详细介绍。</p>
</blockquote>
<h4 id="2设置不同名远程分支">2.设置不同名远程分支</h4>
<p>主要有以下四种方法，注意：使用每种方法前都需要先切换到对应分支上。</p>
<h5 id="git-push---set-upstream-origin-branch1branch2"><code>git push --set-upstream origin &lt;branch1&gt;:&lt;branch2&gt;</code></h5>
<p><strong>方法一：</strong> 比如当前位于<code>develop</code>分支，如果采用的是以下简写命令：</p>
<pre><code> git push --set-upstream origin develop
</code></pre>
<p>则会创建一个同名的远程分支<code>develop</code>。而如果采用该命令的完整写法，就可以自定义远程分支的名字了，比如设为<code>develop2</code>：</p>
<pre><code>git push --set-upstream origin develop:develop2
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/30.png" alt="image-20200417001750391"></p>
<p>执行上述指令后，成功创建了对应的，不同名的本地远程分支<code>origin/develop2</code>。表示本地<code>develop</code>分支已与远程<code>develop2</code>分支建立联系（因为远程分支与本地远程分支是一一对应的关系）：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/31.png" alt="image-20200417001824384"></p>
<p>在<code>github</code>上查看本地仓库关联的远程仓库<code>MY</code>，可以看到顺利创建了<code>develop2</code>分支：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/32.png" alt="image-20200417002057662"></p>
<blockquote>
<p>可以发现这么一个规律：在创建远程分支的同时会创建同名的本地远程分支。</p>
</blockquote>
<h5 id="git-push--u-origin-branch1branch2"><code>git push -u origin &lt;branch1&gt;:&lt;branch2&gt;</code></h5>
<p><strong>方法二：</strong></p>
<p>如下图所示，使用<code>-u</code>参数也能将本地<code>develop</code>分支的远程分支自定义为<code>develop2</code>。</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/33.png" alt="image-20200417103419756"></p>
<h5 id="git-push-origin-headbranch"><code>git push origin HEAD:&lt;branch&gt;</code></h5>
<p><strong>方法三：</strong></p>
<p>通过该方法也能成功设置与本地分支关联的，不同名的远程分支<code>develop2</code>：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/34.png" alt="image-20200417003727161"></p>
<h5 id="git-push-origin-branch1branch2"><code>git push origin &lt;branch1&gt;:&lt;branch2&gt;</code></h5>
<p><strong>方法四：</strong>该方法与方法二实质上是一样的，因为方法二中的<code>HEAD</code>指针指向的就是当前所在的分支，也就是<code>develop</code>分支。过程与方法二类似：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/35.png" alt="image-20200417004155159"></p>
<blockquote>
<p><strong>上面这四种设置不同名远程分支的方法，都有一个共同特点：不能使用<code>git push</code>进行推送</strong>。</p>
</blockquote>
<p>若使用<code>git push</code>都会出现找不到对应远程分支的错误：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/36.png" alt="image-20200417004455754"></p>
<p>原因在下面第三点的<code>-u</code>参数作用中会详细讲解。</p>
<p>既然是<code>-u</code>参数追踪问题，那我加上<code>-u</code>参数不就行了么？其实这样也行不通：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/37.png" alt="image-20200417005033407"></p>
<p><strong>解决方案</strong>：每次推送的时候，指明本地分支与远程分支的对应关系，即采用上述命令的完整写法，比如：</p>
<pre><code>git push --set-upstream origin develop:develop2
git push -u origin develop:develop2
git push origin develop:develop2
git push origin HEAD:develop2
</code></pre>
<p>采用了完整写法后，成功地进行了推送，如下图所示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/38.png" alt="image-20200407215703682"></p>
<blockquote>
<p><strong>注意：</strong>虽然可以自定义远程分支与本地远程分支的名字，但是十分不推荐，因为容易出错。所以，建议<strong>本地远程分支和远程分支</strong>都使用默认的，与本地分支相同的名字。</p>
</blockquote>
<h4 id="3总结">3.总结</h4>
<p>以本地分支<code>develop</code>为例，不难发现：</p>
<ul>
<li>
<p>使用下列简写命令时，远程分支和本地远程分支都会采用默认的，与本地分支相同的名字：</p>
<pre><code>git push --set-upstream origin develop
git push -u origin develop
</code></pre>
</li>
<li>
<p>而使用下列命令的完整写法时，就可以自定义远程分支与本地远程分支的名字：</p>
</li>
</ul>
<pre><code>git push --set-upstream origin develop:develop2
git push -u origin develop:develop2
git push origin develop:develop2
git push origin HEAD:develop2
</code></pre>
<h3 id="四、git-push-origin-master与git-push--u-origin-master的区别">四、<code>git push origin master</code>与<code>git push -u origin master</code>的区别</h3>
<p>第一次将本地仓库的<code>master</code>分支推送到远程仓库的<code>master</code>分支上时，使用前者和后者都可以顺利推送，区别在于是否使用了<code>-u</code>参数：</p>
<ul>
<li>
<p>推送时不使用<code>-u</code>参数：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/39.png" alt="image-20200407204915066"></p>
</li>
<li>
<p>推送时使用<code>-u</code>参数：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/40.png" alt="image-20200407205035250"></p>
</li>
</ul>
<p>注意到推送时使用<code>-u</code>参数会打印下列提示信息：</p>
<pre><code>Branch 'master' set up to track remote branch 'master' from 'origin'.
</code></pre>
<p>表示本地的<code>master</code>分支被设置去追踪远程的<code>master</code>分支，在第<code>2~n</code>次推送中，只需要使用<code>git push</code>这样的简写命令（当然，完整写法效果等同）。<code>git</code>就会自动将本地的<code>master</code>分支与远程的<code>master</code>分支进行匹配，完成推送：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/41.png" alt="image-20200407205848977"></p>
<p>而不使用<code>-u</code>参数时，没有上述的分支追踪信息。此时使用简写<code>git push</code>进行推送会出现错误：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/42.png" alt="image-20200407210028495"></p>
<p>错误信息显示：当前分支没有与之对应的远程分支。这个时候想要成功推送，必须采用指明对应关系的完整写法，比如：</p>
<pre><code>git push origin master
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/43.png" alt="image-20200407210350445"></p>
<p>这就是推送时使不使用<code>-u</code>参数的区别。并且，根据上面的介绍，使用如下指令进行推送也能达到<code>-u</code>参数的效果：</p>
<pre><code>git push --set-upstream origin develop
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/44.png" alt="image-20200407210704627"></p>
<p>之后也可以使用简写的<code>git pull</code>指令进行推送：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/45.png" alt="image-20200407210730668"></p>
<p><strong>细心的你一定发现了，以上都只是本地分支与远程分支同名的情况。不同名的情况下，上面的两个方法还好使吗？</strong></p>
<p>首先验证方法一：<code>-u</code>参数：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/46.png" alt="image-20200407211150483"></p>
<blockquote>
<p>设置不同名的远程分支时要注意写成完整形式：<code>pop:pop2</code></p>
</blockquote>
<p>可以看到，即使创建不同名的远程分支，<code>-u</code>参数也一样能够设置追踪关系；但是，奇怪的是<code>git push</code>却不好使了：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/47.png" alt="image-20200407211424929"></p>
<p>还是和没使用<code>-u</code>参数时一样，找不到对应的远程分支，需要采用指明对应关系的完整写法，比如：</p>
<pre><code>git push origin pop:pop2
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/48.png" alt="image-20200407211604378"></p>
<p>其次验证方法二：<code>--set-upstream</code>：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/49.png" alt="image-20200407212552925"></p>
<p>同样设置分支对应关系时要使用完整写法。可以看到，该方法也设置了追踪关系。奇怪的是<code>git push</code>同样不管用：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/50.png" alt="image-20200407212657862"></p>
<p>同样找不到对应的远程分支，需要采用指明对应关系的完整写法，比如：</p>
<pre><code>git push origin bob:bob2
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/51.png" alt="image-20200407212901263"></p>
<p><strong>所以可以得出结论：</strong></p>
<ul>
<li><strong>本地/远程分支同名时：</strong>
<ul>
<li><code>-u</code>参数的作用是设置本地分支与远程分支的追踪关系，设置了追踪关系后，之后的推送可使用简写<code>git push</code>，<code>git</code>内部会自动进行匹配；</li>
<li><code>--set-upstream</code>参数与<code>-u</code>参数效果等同；</li>
</ul>
</li>
<li><strong>本地/远程分支不同名时：</strong>
<ul>
<li><code>--set-upstream</code>参数与<code>-u</code>参数依然可以设置分支的追踪关系，但是，之后的推送不能使用简写<code>git push</code>，只能使用指定分支对应关系的完整写法；</li>
</ul>
</li>
</ul>
<p><strong>总结：十分建议将所有的本地分支与对应的远程分支设为同名，并且第一次推送使用<code>--set-upstream</code>或<code>-u</code>参数建立分支追踪关系，之后就可以使用简写<code>git push</code>进行推送了！</strong></p>
<h3 id="五、git-push--f">五、<code>git push -f</code></h3>
<p>该命令的完整写法为：</p>
<pre><code>git push -f origin master
</code></pre>
<p>意思为<strong>强制推送</strong>：直接跳过与远程仓库的<code>master</code>分支合并的环节，强制覆盖远程仓库上<code>master</code>分支的内容，即以本地的<code>master</code>分支内容为准。应慎用该命令，否则将覆盖远程仓库中<code>master</code>分支上其他人推送的文件（一星期的成果没了）。</p>
<h4 id="1应用场合">1.应用场合</h4>
<ul>
<li>当远程仓库的历史提交记录太乱了，想要重新整理时。<strong>注意：</strong>一定要与其他人协商好再用本地分支强制覆盖远程分支。</li>
<li>只有一个人开发时，代码以本地为准。为了避免推送时繁琐的合并，可以使用<code>-f</code>强制推送，直接覆盖远程分支上的内容；</li>
</ul>
<p>分两种写法：</p>
<ul>
<li>
<p><strong>第一种：</strong>已经通过<code>-u</code>参数等方式，设置了本地分支与远程分支的追踪关系时，采用：</p>
<pre><code>git push -f
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/52.png" alt="image-20200417113501672"></p>
</li>
<li>
<p><strong>第二种：</strong>还未设置追踪关系，采用：</p>
<pre><code>git push -u origin master -f
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/53.png" alt="image-20200417114605971"></p>
</li>
</ul>
<h4 id="2预防措施">2.预防措施</h4>
<p><code>Github</code>提供了相应的分支保护机制，可以在<code>Settings</code>选项中进行设置：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/54.png" alt="image-20200409092021721"></p>
<p>可以看到<code>Github</code>默认是保护分支的：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/55.png" alt="image-20200409092311908"></p>
<h4 id="3补救措施">3.补救措施</h4>
<p>让有进度的人，再次对被强制覆盖的远程分支执行一次 <code>git push -f</code> 指令，把正确的内容强制推送上去，覆盖前一次 <code>git push -f</code> 所造成的灾难。</p>
<h3 id="六、设置远程分支对应的本地分支">六、设置远程分支对应的本地分支</h3>
<p>假如远程仓库<code>M3Y</code>中有<code>master</code>和<code>develop</code>两个分支，此时新建一个空的本地仓库<code>mygit</code>，通过以下指令将它的远程仓库地址<code>origin</code>设置为<code>M3Y</code>的地址：</p>
<pre><code>git remote add origin git@github.com:AhuntSun/M3Y.git
</code></pre>
<p>此时两仓库的状态为：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/56.png" alt="image-20200417140610948"></p>
<p>由于<code>mygit</code>是空仓库与远程仓库<code>M3Y</code>没有任何公共提交历史，所以在执行<code>git pull</code>时会出现下图所示的不同源冲突（上一节中详细介绍过该冲突）：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/57.png" alt="image-20200417141801581"></p>
<p>虽然<code>git pull</code>操作失败了，但是也成功地将远程仓库<code>M3Y</code>的分支拉取了下来。但是，通过<code>git branch -vv</code>查看分支追踪关系，发现并没有本地分支与这两个远程分支建立了联系：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/58.png" alt="image-20200417142011442"></p>
<p>如何建立这两个本地远程分支对应的本地分支？可以通过以下两种方法：</p>
<h4 id="1git-checkout--b-branch-originbranch">1.<code>git checkout -b &lt;branch&gt; origin/&lt;branch&gt;</code></h4>
<p>比如可以通过以下命令，设置本地远程分支<code>origin/master</code>与本地<code>master</code>分支的追踪关系：</p>
<pre><code>git checkout -b master origin/master
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/59.png" alt="image-20200417142353425"></p>
<p>以上为本地<code>master</code>分支已存在的情况，如果本地分支<code>develop</code>未创建，可以采用下述命令创建并切换到<code>develop</code>分支，并且设置<code>origin/develop</code>与<code>develop</code>的追踪关系：</p>
<pre><code>git checkout -b develop origin/develop
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/60.png" alt="image-20200417142901803"></p>
<p>设置了本地分支与远程分支的追踪关系，接下来就可以在本地仓库执行<code>git push</code>进行推送了：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/61.png" alt="image-20200417143211765"></p>
<h4 id="2git-checkout---track-originbranch">2.<code>git checkout --track origin/&lt;branch&gt;</code></h4>
<p>重置条件，新创建一个空的本地仓库<code>mygit2</code>，同样将其远程地址<code>origin</code>设置为远程仓库<code>M3Y</code>的地址。随后在本地仓库<code>mygit2</code>中执行<code>git pull</code>操作，将远程仓库<code>M3Y</code>中的两个分支拉取到本地：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/62.png" alt="image-20200417144521310"></p>
<p>与上次一样，拉取到本地的两个本地远程分支没有与任何本地分支建立追踪关系。这次可以采用另外一种方法：</p>
<pre><code>git checkout --track origin/test
</code></pre>
<p>创建并切换到<code>develop</code>分支，并且设置该分支与<code>origin/develop</code>分支的追踪关系：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/63.png" alt="image-20200417144827348"></p>
<p>可以说该方法是方法一的特殊情况，因为该方法没有指明创建的本地分支的名字，所以默认采用与远程分支一样的名字<code>develop</code>来命名；</p>
<p>如果想在本地建立一个<code>develop2</code>（不同名）的分支与本地远程分支<code>origin/test</code>建立追踪关系，则应采用第一种方法。</p>
<h3 id="七、远程分支信息">七、远程分支信息</h3>
<p>可以进入<code>.git</code>目录，查看储存远程分支信息的文件：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/64.png" alt="image-20200417123200144"></p>
<h4 id="1查看config文件">1.查看<code>config</code>文件</h4>
<p>使用<code>vim</code>编辑器打开该文件，可以查看到关于远程分支的信息：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/65.png" alt="image-20200417123001405"></p>
<p>可以看到<code>remote</code>这一栏中有两个信息，第一个是远程仓库的<code>url</code>，第二个是<code>fetch</code>信息，这两个信息尤为重要：</p>
<ul>
<li><code>refs/heads/*</code>表示远程仓库的<code>refs/heads</code>目录下的所有引用都会写入到本地的<code>refs/remotes/origin</code>目录中；</li>
<li>其中的<code>+</code>号是可选的，加了表示无论是否能够自动合并，即是否为<code>Fast Forward</code>方式，都将远程仓库所有文件拉取到本地。</li>
<li>而不加<code>+</code>则表示如果不是<code>Fast Forward</code>方式就不拉取。一般情况下都是加上<code>+</code>号的，先把文件拉取到本地，不是<code>Fast Forward</code>方式就手动合并；</li>
</ul>
<h4 id="2查看refs文件">2.查看<code>refs</code>文件</h4>
<p><code>refs</code>文件夹存储着<code>refspec</code>的文件，里面维护着三个目录：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/66.png" alt="image-20200417123302707"></p>
<ul>
<li>
<p><strong>第一个目录<code>heads</code></strong>：存储的是本地仓库的分支信息：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/67.png" alt="image-20200417123344501"></p>
<p>可以查看其中一个分支：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/68.png" alt="image-20200417123406330"></p>
<p>是一个<code>SHA1</code>值，表示分支就是一个指针，指向当前提交。</p>
</li>
<li>
<p><strong>第二个目录<code>remotes</code></strong>：里面存放着远程分支信息，远程仓库中也存在这样的目录与文件；</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/69.png" alt="image-20200417123559607"></p>
<p>从上图可以看到，远程分支只有<code>master</code>，没有<code>develop</code>（因为之前被删除了）。并且它们本质上也是一个代表提交的<code>SHA1</code>值：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/70.png" alt="image-20200417125705684"></p>
<p>建立<code>refspec</code>映射（即本地分支、本地远程分支、远程分支三者间对应关系）后，<code>git</code>会获取远端上<code>refs/heads</code>下的所有引用，并将它们写入本地的<code>refs/remotes/origin</code>目录下。所以，可以通过查看本地远程分支（如<code>origin/master</code>）的方式查看本地仓库最后一次访问远程仓库时，远程仓库<code>master</code>分支上的历史提交记录：</p>
<pre><code>//完整写法
git log refs/remotes/origin/master
//进一步简写
git log remotes/origin/master
//继续简写
git log origin/master
</code></pre>
<p>上述两种省略的写法最终都会转换为完整的写法：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/71.png" alt="image-20200417125810727"></p>
</li>
<li>
<p><strong>第三个目录<code>tags</code></strong>：存放标签信息，也是一个<code>SHA1</code>值：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/72.png" alt="image-20200417130027257"></p>
<p>详细内容将在下一节介绍。</p>
</li>
</ul>
<h3 id="八、删除远程分支">八、删除远程分支</h3>
<p>如下图所示，远程仓库有三个分支<code>master</code>、<code>develop</code>和<code>test</code>：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/73.png" alt="image-20200329125145378"></p>
<p>通过前面的学习，我们知道通过下述指令可以删除本地<code>develop</code>分支：</p>
<pre><code>git branch -d develop
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/74.png" alt="image-20200329125322296"></p>
<p><strong>那么如何删除远程分支呢？</strong></p>
<p>首先我们来看看<code>git push</code>的完整写法：</p>
<pre><code>git push origin srcBranch:destBranch
</code></pre>
<ul>
<li>
<p><code>srcBranch</code>表示本地的分支，<code>destBranch</code>表示对应的远程分支；</p>
</li>
<li>
<p>表示将本地的分支推送到远程分支，这两个分支可以不同；</p>
</li>
<li>
<p>之所以可以直接使用<code>git push</code>是因为我们设置的本地分支和远程分支的名字是<strong>相同的</strong>，并且手动建立了联系，所以<code>git</code>能够自动识别；</p>
</li>
</ul>
<p>明白了这点后，就不难理解下列删除远程分支的两种做法了：</p>
<h4 id="1git-push-origin-destbranch">1.<code>git push origin :destBranch</code></h4>
<p>将空的分支推送到远程分支，这样就能将该远程分支删除；比如删除本地分支<code>develop</code>的远程分支：</p>
<pre><code>git push origin :develop
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/75.png" alt="image-20200417120547162"></p>
<p>可以看到成功删除了远程分支<code>develop</code>以及它所对应的本地远程分支<code>origin/develop</code>。</p>
<blockquote>
<p><strong>注意：</strong>并不需要切换到需要删除远程分支的本地分支<code>develop</code>上，再执行上述指令。也就是说，可以在任意本地分支上删除任意本地分支对应的远程分支。</p>
</blockquote>
<h4 id="2git-push-origin---delete-destbranch">2.<code>git push origin --delete destBranch</code></h4>
<p>还可以采用更加直观的<code>--delete</code>参数，比如删除远程分支<code>develop</code>：</p>
<pre><code> git push origin --delete develop
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/76.png" alt="image-20200417120853849"></p>
<p>这两种方式是等价的，可根据需求选择。</p>
<h4 id="3git-remote-prune-origin">3.<code>git remote prune origin</code></h4>
<p>该方法用于删除无效的<strong>远程分支</strong>对应的<strong>本地远程分支</strong>，具体场合如下：</p>
<p>如图所示<code>mygit</code>与<code>mygit2</code>共享一个有三个分支的远程仓库：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/77.png" alt="image-20200409230534065"></p>
<p>首先在<code>mygit2</code>中删除远程仓库的<code>develop</code>分支，可以看到<code>mygit2</code>中远程分支<code>develop</code>对应的本地远程分支<code>origin/develop</code>被删除了：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/78.png" alt="image-20200329161409609"></p>
<p>然后在<code>mygit</code>中查看远程分支详细信息：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/79.png" alt="image-20200329161520419"></p>
<p>可以看到提示信息中显示远程分支<code>develop</code>对应的本地远程分支<code>origin/develop</code>处于<code>stale</code>（腐烂，游离）状态，即该分支对于<code>mygit</code>来说已经失效，可以使用:</p>
<pre><code>git remote prune origin
</code></pre>
<p>（<code>prune</code>：裁剪）删除<code>mygit</code>上这个无效的本地远程分支：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/80.png" alt="image-20200329161857475"></p>
<p>再次查看分支信息，可发现<code>mygit</code>中的本地远程分支<code>origin/develop</code>已经被删除了：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/81.png" alt="image-20200329161939271"></p>
<blockquote>
<p><strong>注意：</strong>一般本地远程分支设置了保护措施，不能随意删除；</p>
</blockquote>
<h3 id="九、重命名分支">九、重命名分支</h3>
<h4 id="1本地分支">1.本地分支</h4>
<p>可以通过以下命令，将本地分支<code>dev</code>重命名为<code>develop</code>：</p>
<pre><code>git branch -m dev develop
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson7/82.png" alt="image-20200407193850382"></p>
<h4 id="2远程分支">2.远程分支</h4>
<p>无法直接重命名远程分支，只能通过先删除原来的远程分支，再创建重命名后<code>develop</code>分支对应的远程分支，过程为：</p>
<pre><code>//删除远程分支dev
git push origin :dev
//创建重命名后develop分支对应的远程分支
git push -u origin develop
</code></pre>
<p>由此间接地完成了远程分支的重命名。</p>
<blockquote>
<p>以上就是本节的全部内容，相信看到这里的你已经十分熟悉<code>git refspec</code>了。下一节将介绍<code>git</code>标签与别名。</p>
</blockquote>
<p>​</p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-17 17:50</span>&nbsp;
<a href="https://www.cnblogs.com/AhuntSun-blog/">AhuntSun</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12721437" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12721437);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 555013, cb_blogApp = 'AhuntSun-blog', cb_blogUserGuid = 'bad5555f-0923-4a98-9bae-08d753a8c051';
    var cb_entryId = 12721437, cb_entryCreatedDate = '2020-04-17 17:50', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 AhuntSun
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <!--代码复制-->
<script src="https://cdn.bootcss.com/clipboard.js/2.0.4/clipboard.min.js"></script>

<!--主题-->
<script src="https://blog-static.cnblogs.com/files/AhuntSun-blog/bilibili2.js" ></script>
<!--scrollTo-->
<script src="https://cdn.bootcss.com/jquery-scrollTo/2.1.2/jquery.scrollTo.js"></script>
<!--owo表情-->
<script src="https://blog-static.cnblogs.com/files/gshang/gshang.owo.2020.01.05.1.js"></script>
<link rel="stylesheet" href="https://blog-static.cnblogs.com/files/elkyo/OwO.min.css" />

<!-- import Vue.js -->
<script src="https://cdn.staticfile.org/vue/2.2.2/vue.min.js"></script>

<!-- 额外小特效 -->
 <!--鼠标特效-->
 <script src="https://blog-static.cnblogs.com/files/zouwangblog/mouse-click.js"></script>
 <canvas width="1777" height="841" style="position: fixed; left: 0px; top: 0px; z-index: 2147483647; pointer-events: none;"></canvas>
 <!--鼠标特效 end-->

<!--图片放大器-->
<script type="text/javascript" src="https://cdn.bootcss.com/fancybox/3.5.7/jquery.fancybox.js"></script>
<link rel="stylesheet" href="https://cdn.bootcss.com/fancybox/3.5.7/jquery.fancybox.css">
<script>

<!--指定fancybox作用的区域-->
$(".forFlow img").each(function () {
    var element = document.createElement("a");
    $(element).attr("data-fancybox", "gallery");
    $(element).attr("href", $(this).attr("src"));
    $(this).wrap(element);
});
</script>

    </div>
</body>
</html>