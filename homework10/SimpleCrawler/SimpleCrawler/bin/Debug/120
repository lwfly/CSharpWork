<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="不得不看的JMM介绍，JMM不同于java运行时内存区域划分，本文从区域划分拓展到JMM，多线程必备的知识点，并且从原子性可见性有序性三个角度深入的分析了JMM的在这几个点涉及的部分" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Java内存模型JMM 高并发原子性可见性有序性简介 多线程中篇（十） - noteless - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/buildtowin/bundle-buildtowin.min.css?v=lp23bZd4RUCf9TGsihJRLSq5M_182P4N8YRMn1A2CWo" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/noteless/custom.css?v=fnk17ixpiOajP7an/OE6hUwN1aI=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/buildtowin/bundle-buildtowin-mobile.min.css?v=ADiCwO2hOTdd5yYidcx7eob7ix2VJI4o_TXjEycTHjs" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/noteless/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/noteless/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/noteless/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 268100;
        var currentBlogApp = 'noteless';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'BuildtoWin';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <link rel="stylesheet" href="https://blog-static.cnblogs.com/files/noteless/cnblogs.css" type="text/css" />

<!--
<link rel="stylesheet" href="https://blog-static.cnblogs.com/files/noteless/monokai-sublime.css">
-->

<script src="https://blog-static.cnblogs.com/files/noteless/highlight.pack.js" defer></script>






<div class="main-top">

  <a class="avatar" href="https://www.cnblogs.com/noteless">
    <img src="//files.cnblogs.com/files/noteless/cnblogspic2.gif" alt="noteless 头像">
</a>
<div class="title">
    <a class="name" href="https://www.cnblogs.com/noteless/">noteless</a>
  </div>
<div class="info">

  </div>
</div>



<a href="#"><div id="toTop" style="zoom:0;display:none"></div></a>
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/noteless/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/noteless/">noteless</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/noteless/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/noteless">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/noteless/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
212&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
89</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/noteless/p/10401193.html">Java内存模型JMM 高并发原子性可见性有序性简介 多线程中篇（十）</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
    <div id="cnblogs_post_description" style="display: none">
        不得不看的JMM介绍，JMM不同于java运行时内存区域划分，本文从区域划分拓展到JMM，多线程必备的知识点，并且从原子性可见性有序性三个角度深入的分析了JMM的在这几个点涉及的部分
    </div>
<div id="cnblogs_post_body" class="blogpost-body ">
    <h3><span style="font-size: 18px;">JVM运行时内存结构回顾</span></h3>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">在JVM相关的介绍中，有说到JAVA运行时的内存结构，简单回顾下</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">整体结构如下图所示，大致分为五大块</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><a href="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150914516-1355050672.png"><img style="display: inline; background-image: none;" title="image_5c6b9b5a_35d" src="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150915325-1166551198.png" alt="image_5c6b9b5a_35d" width="1065" height="493" border="0" /></a></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">而对于方法区中的数据，是属于所有线程共享的数据结构</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><a href="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150916596-1246408886.png"><img style="display: inline; background-image: none;" title="image_5c6b9b5a_1104" src="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150917950-143369415.png" alt="image_5c6b9b5a_1104" width="658" height="468" border="0" /></a></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">而对于虚拟机栈中数据结构，则是线程独有的，被保存在线程私有的内存空间中，所以这部分数据不涉及线程安全的问题</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><a href="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150918548-135587293.png"><img style="display: inline; background-image: none;" title="image_5c6b9b5a_3920" src="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150919185-466718342.png" alt="image_5c6b9b5a_3920" width="574" height="365" border="0" /></a></span></div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>不管是堆还是栈，他们都是保存在主内存中的</strong></span></div>
<div style="line-height: 200%;">
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">线程堆栈包含正在执行的每个方法的所有局部变量（调用堆栈上的所有方法）。线程只能访问它自己的线程堆栈。</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">由线程创建的局部变量对于创建它的线程以外的所有其他线程是不可见的。</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="color: #ff0000; font-size: 13.5pt;"><strong>即使两个线程正在执行完全相同的代码，两个线程仍将在每个自己的线程堆栈中创建该代码的局部变量</strong></span><span style="font-size: 16px;">。因此，每个线程都有自己的每个局部变量的版本。</span></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="color: #000000; font-size: 13.5pt;"><strong>局部变量可以是基本类型</strong></span>，<span style="font-size: 16px;">在这种情况下，很显然它完全保留在线程堆栈上</span></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="color: #000000; font-size: 13.5pt;"><strong>局部变量也可以是对象的引用</strong></span><span style="font-size: 16px;">，这种情况下，局部变量本身仍旧是在线程堆栈上，但是所指向的对象本身却是在堆中的</span></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">很显然，所有具有对象引用的线程都可以访问堆上的对象，尽管是多个局部变量（引用），但是实际上是同一个对象，所以如果这个对象有成员变量，那么将会出现数据安全问题。</span></div>
</div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><a href="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150920624-1435876192.png"><img style="display: inline; background-image: none;" title="image_5c6b9b5a_7e07" src="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150922704-1808673815.png" alt="image_5c6b9b5a_7e07" width="512" height="419" border="0" /></a></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如上图所示，两个线程，localVariable1并 localVariable2两个局部变量位于不同的线程，但是同时指向的是Object3</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';">&nbsp;</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="font-size: 16px;">简单说，从上面可以看得出来，</span><span style="color: #ff0000; font-size: 13.5pt;"><strong>在Java中所有实例域、静态域和数组元素存储在堆内存中，堆内存在线程之间共享。</strong></span></span></div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>对于多线程的线程安全问题，根本在于共享数据的读写。</strong></span></div>
<h3><span style="font-size: 18px;">JMM（Java内存模型）</span></h3>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>Java 内存模型作为JVM的一种抽象内存模型，屏蔽掉各种硬件和操作系统的内存差异，达到跨平台的内存访问效果。</strong></span></div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>Java语言规范定义了一个统一的内存管理模型JMM(Java Memory Model)</strong></span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>不管是堆还是栈，数据都是保存在主存中的，整个的内存，都只是物理内存的一部分，也就是操作系统分配给JVM进程的那一部分 </strong></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">这部分内存按照运行区域的划分规则进行了区域划分</span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>运行时内存区域的划分，可以简单理解为空间的分配，比如一个房间多少平，这边用于衣帽间，那边用于卧室，卧室多大，衣帽间多大</strong></span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>而对于内存的访问，规定Java内存模型分为主内存，和工作内存；工作内存就是线程私有的部分，主内存是所有的线程所共享的</strong></span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>每条线程自己的工作内存中保存了被该线程使用到的变量的主内存副本拷贝，所有的工作都是在工作内存这个操作台上，线程并不能直接操作主存，也不能访问其他线程的工作内存</strong></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">你划分好了区域，比如有的地方用于存放局部变量，有的地方用于存放实例变量，但是这些数据的存取规则是什么？</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">换句话说，如何正确有效的进行数据的读取？显然光找好地方存是不行的，怎么存？怎么读？怎么共享？这又是另外的一个很复杂的问题</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">比如上面的两个线程对于Object3的数据读取顺序、限制都是什么样子的？</span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>所以内存区域的分块划分和工作内存与主存的交互访问是两个不同的维度</strong></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';">文档如下：</span></div>
<div style="line-height: 200%;">
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><a title="" href="http://ifeve.com/wp-content/uploads/2014/03/JSR133%E4%B8%AD%E6%96%87%E7%89%881.pdf">http://ifeve.com/wp-content/uploads/2014/03/JSR133%E4%B8%AD%E6%96%87%E7%89%881.pdf</a></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><a title="" href="http://101.96.10.64/www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf">http://101.96.10.64/www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf </a></span></div>
</div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';">&nbsp;</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">在对JMM进行介绍之前，先回想下计算机对于数据的读取</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">数据本质上是存放于主存（最终是存放于磁盘）中的，但是计算却又是在CPU中，很显然他们的速度有天壤之别</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">所以在计算机硬件的发展中，出现了缓存（一级缓存、二级缓存），借助于缓存与主存进行数据交互，而且现代计算机中已经不仅仅只是有一个CPU</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">一个简单的示意图如下</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><a href="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150923903-1726274706.png"><img style="display: inline; background-image: none;" title="image_5c6b9b5a_264f" src="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150924918-863024882.png" alt="image_5c6b9b5a_264f" width="605" height="458" border="0" /></a></span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>对于访问速度来说，寄存器--缓存--主存&nbsp; 依次递减，但是空间却依次变大</strong></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">有了缓存，CPU将不再需要频繁的直接从主存中读取数据，性能有了很大程度的提高（当然，如果需要的数据不在缓存中，那么还是需要从主存中去读取数据，是否存在，被称为缓存的命中率，显然，命中率对于CPU效率有很大影响）</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">在速度提高的同时，很显然，出现了一个问题：</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如果两个CPU同时对主存中的一个变量x （值为1）进行处理，假设一个执行x+1 另外一个执行x-1</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如果其中一个处理后另一个才开始读取，显然并没有什么问题</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">但是如果最初缓存中都没有数据或者说一个CPU处理过程中还没来得及将缓存写入主存，另一个CPU开始进行处理，那么最后的结果将会是不确定的</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="font-size: 16px;">这个问题被称为：</span><strong><span style="color: #ff0000; font-size: 13.5pt;">缓存一致性问题</span></strong></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">所以说：对于多个处理器运算任务都涉及同一块主存，需要一种协议可以保障数据的一致性，这类协议有MSI、MESI、MOSI及Dragon Protocol等</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';">&nbsp;</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">关于缓存一致性的更多信息可以查阅</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">百度百科</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;"><a title="" href="https://baike.baidu.com/item/%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/15814005?fr=aladdin">https://baike.baidu.com/item/%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/15814005?fr=aladdin</a></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">缓存一致性（Cache Coherency）入门</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;"><a title="" href="https://www.infoq.cn/article/cache-coherency-primer">https://www.infoq.cn/article/cache-coherency-primer</a></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">缓存、缓存算法和缓存框架简介</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;"><a title="" href="http://blog.jobbole.com/30940/">http://blog.jobbole.com/30940/</a></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">总之，多个CPU，大家使用同一个主存，但是各自不同的缓存，自然会有不一致的安全问题。</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';">&nbsp;</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="font-size: 16px;">再回到JMM上来，</span><span style="color: #000000; font-size: 13.5pt;"><strong>Java Memory Model</strong></span>&nbsp;&nbsp;&nbsp;&nbsp;</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">网址：</span></div>
<div style="line-height: 200%;"><span style="line-height: normal; font-family: 'Microsoft YaHei'; font-size: 16px;"><a title="" href="http://tutorials.jenkov.com/java-concurrency/java-memory-model.html">http://tutorials.jenkov.com/java-concurrency/java-memory-model.html</a></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;"><a title="" href="http://rsim.cs.uiuc.edu/Pubs/popl05.pdf">http://rsim.cs.uiuc.edu/Pubs/popl05.pdf</a></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">文中有说到：</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">The Java memory model specifies how the Java virtual machine works with the computer's memory (RAM). The Java virtual machine is a model of a whole computer so this model naturally includes a memory model - AKA the Java memory model.</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">Java内存模型指定Java虚拟机如何与计算机内存(RAM)一起工作。</span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>Java虚拟机是整个计算机的模型，因此这个模型自然包括一个内存模型&mdash;&mdash;也就是Java内存模型</strong></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';">&nbsp;</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">对于多线程场景下，对于线程私有的数据是本地的，这个无可置疑，但是对于共享数据，前面已经提到，也是&ldquo;私有的&rdquo;</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">因为每个线程对于共享数据，都会读取一份拷贝到本地内存中（也是线程私有的内存），所有的工作都是在本地内存这个操作台上进行的，如下图所示&nbsp;</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">这本质就是一种<span style="color: #000000; font-size: 18px;"><strong>read-modify-write</strong></span>模式，所以必然有线程安全问题的隐患</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><a href="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150925867-1724715948.png"><img style="display: inline; background-image: none;" title="image_5c6b9b5a_7c72" src="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150926857-1086018593.png" alt="image_5c6b9b5a_7c72" width="607" height="449" border="0" /></a></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">与计算机硬件对于主存数据的访问是不是很相似？</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="font-size: 16px;">需要注意的是，</span><span style="color: #0000ff; font-size: 13.5pt;"><strong>此处的主存并不是像前面硬件架构中的主存（RAM），是一个泛指</strong></span><span style="color: #0000ff; font-size: 13.5pt;"><strong>，保存共享数据的地方</strong></span><span style="font-size: 16px;">，可能是主存也可能是缓存，总之是操作系统提供的服务，在JMM中可以统一认为是主存</span></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">这里的本地内存，就好似对于CPU来说的缓存一样，很显然，也会有一致性方面的问题</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如果两个线程之间不是串行的，必然对于数据处理后的结果会出现不确定性</span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>所以JMM规范到底是什么？</strong></span></div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>他其实就是JVM内部的内存数据的访问规则，线程进行共享数据读写的一种规则，在JVM内部，多线程就是这么读取数据的</strong></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">具体的数据是如何设置到上图中&ldquo;主存&rdquo;这个概念中的？本地内存如何具体的与主存进行交互的？这都是操作系统以及JVM底层实现层面的问题</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">单纯的对于多线程编程来说，就不用管什么RAM、寄存器、缓存一致性等等问题，就只需要知道：</span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>数据分为两部分，共享的位于主存，线程局部的位于私有的工作内存，所有的工作都是在工作内存中进行的，也就意味着有&ldquo;读取-拷贝-操作-回写&rdquo;这样一个大致的过程</strong></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">既然人家叫做JVM&nbsp; java虚拟机，自然是五脏俱全，而且如果不能做到统一形式的内存访问模型，还叫什么跨平台？</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';">&nbsp;</span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>如果把线程类比为CPU，工作内存类比寄存器、缓存，主存类比为RAM</strong></span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>那么JMM就相当于解决硬件缓存一致性问题的、类似的一种解决Java多线程读写共享数据的协议规范</strong></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">所以说，如果要设计正确的并发程序，了解Java内存模型非常重要。Java内存模型指定了不同线程如何以及何时可以看到其他线程写入共享变量的值，以及如何在必要时同步对共享变量的访问</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">所以再次强调，单纯的从多线程编程的角度看，记住下面这张图就够了！！！</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">所以再次强调，单纯的从多线程编程的角度看，记住下面这张图就够了！！！</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">每个线程局部数据自己独有，共享数据会读取拷贝一份到工作内存，操作后会回写到主存</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><a href="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150927578-1543547641.png"><img style="display: inline; background-image: none;" title="image_5c6b9b5a_7c72[1]" src="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150928674-824203629.png" alt="image_5c6b9b5a_7c72[1]" width="607" height="449" border="0" /></a></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">换一个说法，可以认为JMM的核心就是用于解决线程安全问题的，而线程安全问题根本就是对于共享数据的操作，所以说JMM对于数据操作的规范要求，本质也就是多线程安全问题的解决方案（缓存一致性也是数据安全的解决方案）</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">所以说理解了可能出现问题的原因与场景，就了解了线程安全的问题，了解了问题，才能理解解决方案，那多线程到底有哪些主要的安全问题呢？</span></div>
<h3><span style="font-size: 18px;">竞争场景</span></h3>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">线程安全问题的本质就是共享数据的访问，没有共享就没有安全问题，所以说有时干脆一个类中都没有成员变量，也就避免了线程安全问题，但是很显然，这只是个别场景下适合，如果一味如此，就是因噎废食了</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如果对于数据的访问是串行的，也不会出现问题，因为不存在竞争，但是很显然，随着计算机硬件的升级，多核处理器的出现，并发（并行）是必然，你不能为了安全就牺牲掉性能，也是一种因噎废食</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="font-size: 16px;">所以换一个说法，</span><span style="color: #ff0000; font-size: 13.5pt;"><strong>为何会有线程安全问题？是因为对于共享数据的竞争访问！</strong></span></span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>常见的两种竞争场景</strong></span></div>
<div style="line-height: 200%;">
<ul style="line-height: 200%;">
<li style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">read-modify-write（读-改-写）</span></li>
<li style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">check-then-act（检查后行动）</span></li>
</ul>
</div>
<h4><span style="font-size: 16px;">read-modify-write（读-改-写）</span></h4>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">read-modify-write（读-改-写）可以简单地分为三个步骤：</span></div>
<div style="line-height: 200%;"><ol style="line-height: 200%;">
<li style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">读取数据</span></li>
<li style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">修改数据</span></li>
<li style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">回写数据</span></li>
</ol></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">很显然，如果多个线程同时进行，将会出现不可预知的后果，假设两个线程，A和B，他们的三个步骤为A1，A2，A3&nbsp; 和 B1，B2，B3</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如果按照A1，A2，A3，B1，B2，B3 或者 B1，B2，B3，A1，A2，A3的顺序，并不会出现问题</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">但是如果是交叉进行，比如A1，A2，B1，B2，B3，A3，那么就会出现问题，B对数据的写入被覆盖了！</span></div>
<h4><span style="font-size: 16px;">check-then-act（检查后行动）</span></h4>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">比如</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">if（x &gt;1）{</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">//do sth....</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">x--；</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">}</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如果A线程条件满足后，还没有继续进行，此时B线程开始执行，条件判断后满足继续执行，执行后x的值并不满足条件了！</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">这也是一种常见的线程安全问题</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">&nbsp;</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">很显然，单线程情况下，或者说所有的变量全部都是局部变量的话，不会出现问题，否则就很可能出现问题（线程安全问题并不是必然出现的，长时间不出问题也很可能）</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';">&nbsp;</span></div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>对于线程安全的问题主要分为三类</strong></span></div>
<div style="line-height: 200%;">
<ul style="line-height: 200%;">
<li style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>原子性</strong></span></li>
<li style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>可见性</strong></span></li>
<li style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>有序性</strong></span></li>
</ul>
</div>
<h3><span style="font-size: 18px;">原子性</span></h3>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">原子 Atomic，意指不可分割，也就是作为一个整体，要么全部执行，要么不会执行</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">对于共享变量访问的一个操作，如果对于除了当前执行线程以外的任何线程来说，都是不可分割的，那么就是具有原子性</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">简言之，对于别的线程而言，他要么看到的是该线程还没有执行的情况，要么就是看到了线程执行后的情况，不会出现执行一半的场景，简言之，其他线程永远不会看到中间结果</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">生活中有一个典型的例子，就是ATM机取款</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">尽管中间有很多的工作，比如账户扣款，ATM吐出钞票等，但是从取钱的角度来看，对于用户却是不可分割的一个过程</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">要么，取钱成功了，要么取款失败了，对于共享变量也就是账户余额来说，要么会减少，要么不变，不会出现钱去了余额不变或者余额减少，但是却没有看到钱的情况</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">既然是原子操作，既然是不可分割的，那么就是要么做了，要么没做，不会中间被耽搁，最终的结果看起来就好似串行的执行一样，不会出现线程安全问题</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';">&nbsp;</span></div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>Java中有两种方式实现原子性</strong></span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>一种是使用锁机制，锁具有排他性，也就是说它能够保证一个共享变量在任意一个时刻仅仅被一个线程访问，这就消除了竞争；</strong></span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>另外一种是借助于处理器提供的专门的CAS指令（compare-and-swap）</strong></span></div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>在Java中，long和double以外的任何类型的变量的写操作都是原子操作</strong></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">也就是基础类型（byte int short char float boolean）以及引用类型的变量的写操作都是原子的，由Java语言规范规定，JVM实现</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">对于long和double，64位长度，如果是在32位机器上，写操作可能分为两个步骤，分别处理高低32位，两个步骤就打破了原子性，可能出现数据安全问题</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="font-size: 16px;">有一点需要注意的是，</span><span style="color: #ff0000; font-size: 13.5pt;"><strong>原子操作+原子操作，并非仍旧是原子操作</strong></span></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">比如</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">a=1；</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">b=1；</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">很显然，都是原子操作，但是在a=1执行后，如果此时另外的线程过来读取数据，会读取到a=1，而b却是没设置的中间状态</span></div>
<h3><span style="font-size: 18px;">可见性</span></h3>
<div style="line-height: 200%;">
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">在多线程环境下，一个线程对某个共享变量进行更新之后，后续访问该变量的线程可能无法立刻读取到这个更新的结果，甚至永远也无法读取到这个更新的结果。</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">这就是线程安全问题的另外一个表现形式:可见性(Visibility )</span></div>
</div>
<div style="line-height: 200%;">
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>如果一个线程对某个共享变量进行更新之后，后续访问该变量的线程可以读取到该更新的结果，那么就称这个线程对该共享变量的更新对其他线程可见，否则就称这个线程对该共享变量的更新对其他线程不可见。</strong></span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>简言之，如果一个线程对共享数据做出了修改，而另外的线程却并没有读取到最新的结果，这是有问题的</strong></span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>多线程程序在可见性方面存在问题意味着某些线程读取到了旧数据，通常也是不被希望的</strong></span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong><br /></strong>
	</span></div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>为什么会出现可见性问题？</strong>
	</span></div>
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>因为数据本质是要从主存存取的，但是对于线程来说，有了工作内存，这个私有的工作台，也就是read-modify-write模式</strong>
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">即使线程正确的处理了结果，但是却没有及时的被其他的线程读取，而别人却读取了错误的结果（旧数据），这是一个很大的问题
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">所以此处也可以看到，如果仅仅是保障原子性，对于线程安全来说，完全是不够的（有些场景可能足够了）
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">原子性保障了不会读取到中间结果，要么是结束要么是未开始，但是如果操作结束了，这个结果真的就能看到么？所以还需要可见性的保障
	</span></div>
<h3><span style="font-size: 18px;">有序性
	</span></h3>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">关于有序性，首先要说下重排序的概念，如果不曾有重排序，那么也就不涉及这方面的问题了
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">比如下面两条语句
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">a=1；
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">b=2；
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">在源代码中是有顺序的，经过编译后形成指令后，也必然是有顺序的
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">在一个线程中从代码执行的角度来看，也总是有先后顺序的
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">比如上面两条语句，a的赋值在前，b的赋值在后，但是实际上，这种顺序是没有保障的
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">处理器可能并不会完全按照已经形成的指令（目标代码）顺序执行，这种现象就叫做重排序
	</span></div>
<h4><span style="font-size: 16px;">为什么要重排序？
	</span></h4>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>重排序是对内存访问操作的一种优化，他可以在不影响单线程程序正确性的前提下进行一定的调整，进而提高程序的性能</strong>
	</span></div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>但是对于多线程场景下，就可能产生一定的问题</strong>
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="font-size: 16px;">当然，重排序导致的问题，也</span><span style="color: #000000; font-size: 13.5pt;"><strong>不是必然出现的</strong></span>
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">比如，编译器进行编译时，处理器进行执行时，都有可能发生重排序
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">先声明几个概念
	</span></div>
<div style="line-height: 200%;">
<ul style="line-height: 200%;">
<li style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">源代码顺序，很明显字面意思就是源代码的顺序
			</span></li>
<li style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">程序顺序，源码经过处理后的目标代码顺序（解释后或者JIT编译后的目标代码或者干脆理解成源代码解析后的机器指令）
			</span></li>
<li style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">执行顺序，处理器对目标代码执行时的顺序
			</span></li>
<li style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">感知顺序，处理器执行了，但是别人看到的并不一定就是你执行的顺序，因为操作后的数据涉及到数据的回写，可能会经过寄存器、缓存等，即使你先计算的a后计算的b，如果b先被写回呢？这就是感知顺序，简单说就是别人看到的结果
			</span></li>










		</ul>










	</div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">在此基础上，可以将重排序可以分为两种，指令重排序和存储重排序
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">下图来自《Java多线程编程实战指南-核心篇》
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><a href="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150930244-1619236612.png"><img style="display: inline; background-image: none;" title="image_5c6b9b5a_3147" src="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150930705-1348379339.png" alt="image_5c6b9b5a_3147" width="1141" height="262" border="0" /></a>
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">编译器可能导致目标代码与源代码顺序不一致；即时编译器JIT和处理器可能导致执行顺序与程序顺序不一致；
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">缓存、缓冲器可能导致感知顺序不一致
	</span></div>
<h4><span style="font-size: 16px;">指令重排序
	</span></h4>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">不管是程序顺序与源代码顺序不一致还是执行顺序与程序顺序不一致，结果都是指令重排序，因为最终的效果就是源代码与最终被执行的指令顺序不一致
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如下图所示，不管是哪一段顺序被重拍了，最终的结果都是最终执行的指令乱序了
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><a href="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150931381-245328336.png"><img style="display: inline; background-image: none;" title="image_5c6b9b5a_407e" src="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150932290-2046466003.png" alt="image_5c6b9b5a_407e" width="611" height="215" border="0" /></a>
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">ps：Java有两种编译器，一种是Javac静态编译器，将源文件编译为字节码，代码编译阶段运行；JIT是在运行时，动态的将字节码编译为本地机器码（目标代码）
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">通常javac不会进行重排序，而JIT则很可能进行重排序
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="font-size: 16px;">此处不对为什么要重排序展开，简单说就是</span><span style="color: #000000; font-size: 13.5pt;"><strong>硬件或者编译器等为了能够更好地执行指令，提高性能，所做出的一定程度的优化，重排序也不是随随便便的就改变了顺序的，它具有一定的规则，叫做貌似串行语义<span style="line-height: 24px;">As-if-serial Semantics，也就是从单线程的角度保障不会出现问题，</span>但是对于多线程就可能出现问题。</strong></span>
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">貌似串行语义的规则主要是对于具有数据依赖关系的数据不会进行重排序，没有依赖关系的则可能进行重排序
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">比如下面的三条语句，c=a+b；依赖a和b，所以不会与他们进行重排序，但是a和b没有依赖关系，就可能发生重排序
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">a=1；
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">b=2；
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">c=a+b；
	</span></div>
<h4><span style="font-size: 16px;">存储重排序
	</span></h4>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">为什么会出现执行一种顺序，而结果的写入是另外的一种顺序？
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="font-size: 16px;">前面说过，对于CPU来说并不是直接跟主存交互的，因为速度有天壤之别，所以有多级缓存，有读缓存，其实也有</span><span style="color: #ff0000; font-size: 13.5pt;"><strong>写缓存</strong></span>
	</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">有了缓存，也就意味着这中间就多了一些步骤，那么就可能即使严格按照指令的顺序执行，但是从结果上看起来却是乱序的
	</span></div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>指令重排序是一种动作，实际发生了，而存储重排序则是一种现象，从结果看出来的一种现象，其实本身并没有在执行上重拍，但是这也可能引起问题</strong></span></div>
<h4><span style="font-size: 16px;">如何保证顺序？
	</span></h4>
<div style="line-height: 200%;">
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>貌似串行语义As-if-serial Semantics，只是保障单线程不会出问题，所以有序性保障，可以理解为，将貌似貌似串行语义As-if-serial Semantics扩展到多线程，在多线程中也不会出现问题</strong>
		</span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>换句话说，有序性的保障，就是貌似串行语义在逻辑上看起来，有些必要的地方禁止重排序</strong>
		</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="font-size: 16px;">从底层的角度来看，是借助于处理器提供的相关指令</span><span style="color: #ff0000; font-size: 13.5pt;"><strong>内存屏障</strong></span><span style="font-size: 16px;">来实现的
		</span></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">对于Java语言本身来说，Java已经帮我们与底层打交道，我们不会直接接触内存屏障指令，java提供的关键字synchronized和volatile，可以达到这个效果，保障有序性（借助于显式锁Lock也是一样的，Lock逻辑与synchronized一致）
		</span></div>
<h4><span style="font-size: 16px;">happens-before 原则
		</span></h4>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">关键字volatile和synchronized都可以保证有序性，他们都会告知底层，相关的处理需要保障有序，但是很显然，如果所有的处理都需要主动地去借助于这两个关键字去维护有序，这将是一件繁琐痛苦的事情，而且，也说到了重排序也并不是随意的
		</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">Java有一个内置的有序规则，也就是说，对于重排序有一个内置的规则实现，你不需要自己去动脑子思考，动手去写代码，有一些有序的保障Java天然存在，简化了你对重排序的设计与思考
		</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">这个规则就叫做happens-before 原则
		</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如果可以从这个原则中推测出来顺序，那么将会对他们进行有序性保障；如果不能推导出来，换句话说不与这些要求相违背，那么就可能会被重排序，JVM不会对有序性进行保障。</span></div>
<div style="line-height: 200%;">
<div><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>程序次序规则(Program Order Rule)</strong>
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。准确地说，应该是控制流顺序而不是程序代码顺序，因为要考虑分支、循环等结构，只要确保在一个线程内最终的结果和代码顺序执行的结果一致即可，仍旧可能发生重排序，但是得保证这个前提</span></div>










		</div>
<div style="line-height: 200%;">
<div><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>管程锁定规则(Monitor Lock Rule)</strong>
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">一个unlock操作先行发生于后面对同一个锁的 lock操作。这里必须强调的是同一个锁，而&ldquo;后面&rdquo;是指时间上的先后顺序</span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>volatile变量规则(Volatile Variable Rule)</strong>
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">对一个volatile变量的写操作先行发生于后面对这个变量的读操作，这里的&ldquo;后面&rdquo;同样是指时间上的先后顺序。</span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>线程启动规则(Thread Start Rule)</strong>
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">Thread对象的start()方法先行发生于此线程的每一个动作。你必须得先启动一个线程才能有后续</span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>线程终止规则(Thread Termination Rule)</strong>
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">线程中的所有操作都先行发生于对此线程的终止检测，也就是说所有的操作肯定是要在线程终止之前的，终止之后就不能有操作了，可以通过Thread.join()方法结束、Thread. isAlive()的返回值等手段检测到线程已经终止执行。</span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>线程中断规则(Thread Interruption Rule)</strong>
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">对线程 interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，也就是你得先调用方法，才会产生中断，你不能别人发现中断信号了，你竟然你都还没调用interrupt方法，可以通过Thread.isinterrupted ()方法检测到是否有中断发生。</span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>对象终结规则(Finalizer Rule)</strong>
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">一个对象的初始化完成(构造函数执行结束)先行发生于它的finalizeO方法的开始，先生后死，这个是必须的</span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>传递性(Transitivity)</strong>
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">如果操作A先行发生于操作B,操作B先行发生于操作C,那就可以得出操作A先行发生于操作C的结论。
			</span></div>
<div><span style="font-family: 'Microsoft YaHei';">&nbsp;</span></div>










		</div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>再次强调：对于happens-before规则，不需要做任何的同步限制，Java是天然支持的</strong>
		</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">《深入理解Java虚拟机：JVM高级特性与最佳实践》中有一个例子对于理解该原则有所帮助
		</span></div>
<div style="line-height: 200%;">
<div>
<div>
<p style="margin: 0px;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">  <span style="color: #8b008b; font-weight: 600;">private</span> <span style="color: #8b008b; font-weight: 600;">int</span> value = <span style="color: #4682b4; font-weight: 600;">0</span>;
</span></p>
<p style="margin: 0px; -qt-paragraph-type: empty;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">&nbsp;</span></p>
<p style="margin: 0px;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">  <span style="color: #8b008b; font-weight: 600;">public</span> <span style="color: #8b008b; font-weight: 600;">int</span> getValue() {
</span></p>
<p style="margin: 0px;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">    <span style="color: #8b008b; font-weight: 600;">return</span> value;
</span></p>
<p style="margin: 0px;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">  }
</span></p>
<p style="margin: 0px; -qt-paragraph-type: empty;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">&nbsp;</span></p>
<p style="margin: 0px;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">  <span style="color: #8b008b; font-weight: 600;">public</span> <span style="color: #8b008b; font-weight: 600;">void</span> setValue(<span style="color: #8b008b; font-weight: 600;">int</span> value) {
</span></p>
<p style="margin: 0px;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">    <span style="color: #8b008b; font-weight: 600;">this</span><span style="color: #4682b4; font-weight: 600;">.</span>value = value;
</span></p>
<p style="margin: 0px;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;"><code>  }</code></span></p>









</div>









</div>









</div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">假设两个线程A和B，线程A先（在时间上先）调用了这个对象的setValue（1），接着线程B调用getValue方法，那么B的返回值是多少？</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">对照着hp原则</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">不是同一个线程，所以不涉及：程序次序规则</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">不涉及同步，所以不涉及：管程锁定规则</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">没有volatile关键字，所以不涉及：volatile变量规则</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">没有线程的启动，中断，终止，所以不涉及：线程启动规则，线程终止规则，线程中断规则</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">没有对象的创建于终结，所以不涉及：对象终结规则</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">更没有涉及到传递性</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">所以一条规则都不满足，所以，尽管线程A在时间上与线程B具有先后顺序，但是，却并不涉及hp原则，也就是有序性并不会保障，所以线程B的数据获取是不安全的！！</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">比如的确是先执行了，但是没有及时写入呢？</span></div>
<div style="line-height: 200%;"><span style="color: #ff0000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>简言之，时间上的先后顺序，并不代表真正的先行发生（hp），而且，先行发生（hp）也并不能说明时间上的先后顺序是什么</strong></span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>这也说明，不要被时间先后迷惑，只有真正的有序了，才能保障安全</strong></span></div>
<div style="line-height: 200%;"><span style="color: #0000ff; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>也就是要么满足hp原则了（天然就支持有序了），或者借助于volatile或者synchronized关键字或者显式锁Lock对他们进行保障（显式手动控制有序），才能保障有序</strong></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';">&nbsp;</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">happens-before是JMM的一个核心概念，因为对于程序员来说，希望一个简单高效最重要的是要易用的，易于理解的编程模型，但是反过来说从编译器和处理器执行的角度来看，自然是希望约束越少越好，没有约束，那么就可以高度优化，很显然两者是矛盾的，一个希望严格、简单、易用，另一个则希望尽可能少的约束；
		</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';"><span style="color: #ff0000; font-size: 13.5pt;"><strong>happens-before则相当于一个折中后的方案，二者的一个权衡，以上是基本大致的的一个规范，有兴趣的可以深入研究happens-before原则</strong></span>&nbsp;&nbsp; </span></div>
<div style="line-height: 200%;">
<div style="line-height: 200%;"><span style="color: #000000; font-size: 13.5pt; font-family: 'Microsoft YaHei';"><strong>原子性、可见性、有序性</strong>
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">前面说过，原子性保障了要么执行要么不执行，不会出现中间结果，但是即使原子了，不可分割了，但是是否对另外一个可见，是无法保障的，所以需要可见性
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">而有序性则是另外的线程对当前线程执行看起来的顺序，所以如果都不可见，何谈有序性，所以可见性是有序性的基础
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">另外，有序性对于可见性是有影响的，比如某些操作本来在前，结果是可见的，但是重排序后，被排序到了后面，这就可能导致不可见，比如父线程的操作对子线程是可见的，但是如果有些位置顺序调整了呢？&nbsp;&nbsp;&nbsp; </span></div>
<h3><span style="font-size: 18px;">总结
			</span></h3>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">Java内存区域的划分是对于主存的一种划分，存储的划分，而这个主存则是分配给JVM进程的内存空间，而JVM的这部分内存只是物理内存的一部分
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">这部分内存有共享的主存储空间，还有一部分是线程私有的本地内存空间
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">线程所用到的所有的变量都位于线程的本地内存中，局部变量本身就在本地内存，而共享变量则会持有一份私有拷贝
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">线程的操作台就是这个本地内存，既不能直接访问主存也不能访问其他线程本地内存，只能借助于主存进行交互
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">JMM模型则是对于JVM对于内存访问的一种规范，多线程工作内存与主内存之间的交互原则进行了指示，他是独立于具体物理机器的一种内存存取模型
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">&nbsp;</span></div>
<div style="line-height: 200%;">
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">对于多线程的数据安全问题，三个方面，原子性、可见性、有序性是三个相互协作的方面，不是说保障了任何一个就万事大吉了，另外也并不一定是所有的场景都需要全部都保障才能够线程安全
				</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">比如volatile关键字只能保障可见性和有序性以及自身修饰变量的原子性，但是如果是一个代码段却并不能保障原子性，所以是一种弱的同步，而synchronized则可以从三个维度进行保障
				</span></div>










			</div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">这三个特性也是JMM的核心，对相关的原则进行了规范，所以概括的说什么是JMM？他就只是一个规范概念
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">Java通过提供同步机制（synchronized、volatile）关键字借助于编译器、JVM实现，依赖于底层操作系统，对这些规范进行了实现，提供了对于这些特性的一个保障
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">反复提到的下面的这个图就是JMM的基础结构，而延展出来的规范特性，就是基于这个结构，并且针对于多线程安全问题提出的一些解决方案
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">只要正确的使用提供的同步机制，就能够开发出正确的并发程序
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">以下图为结构基础，定义的线程私有数据空间与主存之间的交互原则
			</span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;"><a href="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150935455-950546177.png"><img style="display: inline; background-image: none;" title="image_5c6b9b5a_7c72[2]" src="https://img2018.cnblogs.com/blog/897393/201902/897393-20190219150939335-1039422725.png" alt="image_5c6b9b5a_7c72[2]" width="607" height="449" border="0" /></a></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei'; font-size: 16px;">原文地址:<a href="https://www.cnblogs.com/noteless/p/10401193.html" target="_blank">Java内存模型JMM 高并发原子性可见性有序性简介 多线程中篇（十）</a></span></div>
<div style="line-height: 200%;"><span style="font-family: 'Microsoft YaHei';">&nbsp;</span></div>










		</div>










	</div>










</div>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2019-02-19 15:13</span>&nbsp;
<a href="https://www.cnblogs.com/noteless/">noteless</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10401193" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(10401193);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 268100, cb_blogApp = 'noteless', cb_blogUserGuid = '2f3ff2be-bdda-e511-9fc1-ac853d9f53cc';
    var cb_entryId = 10401193, cb_entryCreatedDate = '2019-02-19 15:13', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 noteless
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <script>
/*
$(document).ready(function() {
  $('pre').each(function(i, e) {hljs.highlightBlock(e)});
});
*/
</script>





<script>




//初始化加载函数
$(function(){
    // hideIndexArticle();
    appendNavigator();

    addOriginURL();

addSupport();
hideToTop();


})


//隐藏首页除置顶外的其他所有文章列表
function hideIndexArticle(){
    var windowURL = window.location.href;
    console.log(windowURL )
    if(windowURL && windowURL.indexOf('www.cnblogs.com/noteless')>0 && windowURL.indexOf('html')<0){
        //$('#mainContent .day:not(:first)').css('display','none');
    }
}

//增导航条上增加 目录索引按钮
function appendNavigator(){
    var _html='<li>'
        +'<a id="blog_nav_admin" class="menu" rel="nofollow" href="https://www.cnblogs.com/noteless/p/9400742.html">'
        +'目录索引'
        +'</a>'
        +'</li>';

    $('#navList').append(_html);
}

function appendMenuItem(tagName,id,content){
    console.log(tagName+" "+tagName.substring(1));
    var paddingLeft = tagName.substring(1) * 30; //添加标题缩进
    $('#menu_nav_ol').append('<li class="' + id +'" style="padding-left: '+ paddingLeft +'px;"><b>' + content + '</b></li>');
}


//添加支持一下，请求关注
function addSupport(){

var zhichiHml = '<p>'
+'<span>'
+'<img src="https://files-cdn.cnblogs.com/files/noteless/zhichiyixaa.bmp" alt="">'
+'</span>'
+'</p>';
$('#cnblogs_post_body').append(zhichiHml );

}

//每篇文章增加原文地址
function addOriginURL(){

    //文章增加原文地址
    var originURL='<div>'
        +'原文地址:'
        +'<a href="'
        +window.location.href
        +'" target="_blank">'
        +$('.postTitle a').html()
        +'</a>'
        +'</div>';
		
	originURL+='<img src="https://blog-static.cnblogs.com/files/noteless/%E4%BA%8C%E7%BB%B4%E7%A0%812.gif"></img>';
		
		
    if($("#cnblogs_post_body h3:first").length>0){
        $("#cnblogs_post_body h3:first").before(originURL);
    }else{
        $('#cnblogs_post_body').prepend(originURL);
    }


}

//如果是pc展示返回顶部
function hideToTop(){

	if(isPC()){
		$('#toTop').show();
	}
}


//判断手机还是pc
function isPC() {
   var userAgentInfo = navigator.userAgent;
   var Agents = ["Android", "iPhone",
      "SymbianOS", "Windows Phone",
      "iPad", "iPod"];
   var flag = true;
   for (var v = 0; v < Agents.length; v++) {
      if (userAgentInfo.indexOf(Agents[v]) > 0) {
         flag = false;
         break;
      }
   }
   return flag;
}



//根据标题生成左侧边栏的目录树
// 生成目录开始

$(function () {

	//如果是手机隐藏目录
	if(isPC()){

		//内容拼接
		$('body').append(
			'<div id="article-outline">'
			+'<div style="height:15px;">'
			+'<button type="button" class="close" data-dismiss="modal" aria-hidden="true">'
			+'X'
			+'</button>'
			+'</div>'
			+'</div>'
			+'<style>'
			+'#article-outline{'
			+'display:none;'
			+'min-width:140p;'
			+'max-width: 230px;'
			//+'max-height: 350px;'
			+'position:absolute;'
			+'float: left;'
			+'top:150px;'
			+'left:-999px;'
			+'border:1px solid #ccc;'
			+'box-shadow:5px 5px 2px #ccc;'
			+'padding: 5px 10px;'
			+'background-color: #fff;'
			+'overflow-y: auto;'
			+'scroll-x: auto;'
			+'}'

			+'#article-outline ul{'
			+'margin:5px 0 5px 0;'
			+'padding-left:30px;'
			+'font-size:12px;'
			+'border-left:1px dotted #ccc;'
			+'}'

			+'#article-outline ul:first-child{'
			+'padding-left:15px;'
			+'border:none;'
			+'}'

			+'#article-outline li{'
			+'list-style-type:decimal;'
			+'margin:3px 0;'
			+'}'

			+'#article-outline a{'
			+'color:#00C1E4;'
			+'}'
			+'</style>'
		)
		
		

		
		
		//取得新添加的目录元素
		var jOutline = $('#article-outline');

		//获取文章内容
		//var jContent = $('article .content');
		var jContent = $('div#topics');

		//计算高度
		var jContentHeight = jContent.height();

		//关闭按钮
		jOutline.find('.close').on('click', function () {
			jOutline.hide();
		})

		updateOutline();

		var top = jOutline.offset().top;
		scrollOutline();
		$(window).on('scroll', scrollOutline);

		function scrollOutline() {
			var scrollTop = $(document).scrollTop();
			var maxTop = jContent.offset().top + jContent.height() - jOutline.height();
			//设置行内样式
			if (scrollTop >= top && scrollTop <= maxTop) {
				jOutline.css({'position': 'fixed', 'top': 0});
			}
			else if (scrollTop < top) {
				/*
							jOutline.css({'position': 'absolute','float':'left', 'top': '150px'});
				*/
				jOutline.css({'position': 'absolute', 'top': '200px'});
			}
			else {
				/*
							jOutline.css({'position': 'absolute','float':'left', 'top': maxTop + 'px'});
				*/
				jOutline.css({'position': 'absolute', 'top': maxTop + 'px'});
			}

		}

		function updateOutline() {
			//设置哪些级别的目录
			// var arrAllHeader = jContent.find("h1,h2,h3,h4,h5,h6");
			var arrAllHeader = jContent.find("h2,h3,h4,h5,h6");
			var arrOutline = ['<ul>'];
			var header, headerText;
			var id = 0;
			var level = 0,
				lastLevel = 1;
			var levelCount = 0;
			for (var i = 0, c = arrAllHeader.length; i < c; i++) {
				header = arrAllHeader[i];
				headerText = $(header).text();

				header.setAttribute('id', id);

				level = header.tagName.match(/^h(\d)$/i)[1];
				levelCount = level - lastLevel;

				if (levelCount > 0) {
					for (var j = 0; j < levelCount; j++) {
						arrOutline.push('<ul>');
					}
				} else if (levelCount < 0) {
					levelCount *= -1;
					for (var j = 0; j < levelCount; j++) {
						arrOutline.push('</ul>');
					}
				}
				;
				arrOutline.push('<li>');
				arrOutline.push('<a href="#' + id + '">' + headerText + '</a>');
				arrOutline.push('</li>');
				lastLevel = level;
				id++;
			}
			arrOutline.push('</ul>')
			if (arrOutline.length > 2) {
				jOutline.append(arrOutline.join(''));
				jOutline.find('ul').each(function (i, n) {
					var jThis = $(this);
					if (jThis.children('li').length === 0) {
						jThis.replaceWith(jThis.children());
					}
				});
				showOutline();
			}
			else {
				hideOutline();
			}
		}

		function showOutline() {
			var offset = jContent.offset();

			//目录左侧偏移量
			/*        jOutline.css({
						left: offset.left + jContent.width() + 10 + 'px',
					}).show();*/
			jOutline.css({
				left:8 + 'px',
			}).show();
		}

		function hideOutline() {
			jOutline.hide();
		}
	
	
	}




    
});

//生成目录结束




</script>
    </div>
</body>
</html>