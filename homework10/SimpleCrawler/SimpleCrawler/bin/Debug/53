<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="前言 前情提要： &amp;quot;Git应用详解第三讲：本地分支的重要操作&amp;quot; 作为一款版本控制工具，其最核心的功能就是版本回退，没有之一。熟悉 版本回退的操作能够让你真真正正地放开手脚去开发，不" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Git应用详解第四讲：版本回退的三种方式与stash - AhuntSun - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/AhuntSun-blog/custom.css?v=aQxv9ugmgmxj9aI02HToOmJXaLs=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=-Yh290MhQyDeXLmvKTSses9H6-49lqbpXFh55zvS0w8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/AhuntSun-blog/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/AhuntSun-blog/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/AhuntSun-blog/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=wKnarAbt-YO5waLYR80IqCLKpzPpF-s-32JKmKCtJxg"></script>
    <script>
        var currentBlogId = 555013;
        var currentBlogApp = 'AhuntSun-blog';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'Custom';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
         
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/AhuntSun-blog/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/AhuntSun-blog/">AhuntSun</a>
</h1>
<h2>
Talk is cheap, Show me the code.
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/AhuntSun-blog/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/AhuntSun">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/AhuntSun-blog/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
127&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
70</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/AhuntSun-blog/p/12700155.html">Git应用详解第四讲：版本回退的三种方式与stash</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h2 id="前言">前言</h2>
<blockquote>
<p>前情提要：<a href="https://www.cnblogs.com/AhuntSun-blog/p/12694197.html">Git应用详解第三讲：本地分支的重要操作</a></p>
</blockquote>
<p><code>git</code>作为一款版本控制工具，其最核心的功能就是版本回退，没有之一。熟悉<code>git</code>版本回退的操作能够让你真真正正地放开手脚去开发，不用小心翼翼，怕一不小心删除了不该删除的文件。本节除了介绍版本回退的内容之外，还会介绍<code>stash</code>的使用。</p>
<h2 id="一、版本回退">一、版本回退</h2>
<p>在<code>git</code>中永远有后悔药可吃，总是可以回到<strong>版本库</strong>的某一个时刻，这就叫做<strong>版本回退</strong>；</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/1.png" alt="image-20200406144058526"></p>
<p>如上图所示：当前<code>master</code>分支指针指向<code>D</code>，通过版本回退可以使<code>master</code>指向<code>C</code>、<code>B</code>或<code>A</code>。进行版本回退的命令大体上有三种：<code>reset</code>、<code>revert</code>和<code>checkout</code>。下面就来一一讲解：</p>
<h3 id="ⅰgit-reset">Ⅰ.<code>git reset</code></h3>
<h4 id="1参数">1.参数</h4>
<p><code>reset</code>命令可以添加很多参数，常用的有<code>--mixed</code>、<code>--soft</code>和<code>--hard</code>三种。下图为一次完整提交的四个阶段：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/2.png" alt="image-20200412192613526"></p>
<p>三个参数大体上的区别为：</p>
<ul>
<li><code>--mixed</code>：为默认值，等同于<code>git reset</code>。作用为：将文件回退到<strong>工作区</strong>，此时会保留<strong>工作区</strong>中的文件，但会丢弃<strong>暂存区</strong>中的文件；</li>
<li><code>--soft</code>：作用为：将文件回退到<strong>暂存区</strong>，此时会保留<strong>工作区</strong>和<strong>暂存区</strong>中的文件；</li>
<li><code>--hard</code>：作用为：将文件回退到<strong>修改前</strong>，此时会丢弃<strong>工作区</strong>和<strong>暂存区</strong>中的文件；</li>
</ul>
<p>下面就来详细地讲解它们的使用方法：</p>
<p>首先在<code>master</code>分支进行四次提交，每次提交在<code>test.txt</code>中添加一行文本信息：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/3.png" alt="image-20200406164503683"></p>
<h5 id="--mixed"><code>--mixed</code></h5>
<p>该参数为默认值，作用为：将文件回退到工作区中：如下图所示，将<code>test.txt</code>文件回退一次提交：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/4.png" alt="image-20200412194811197"></p>
<p>可以看到第四次提交对<code>test.txt</code>的修改操作被回退到了工作区当中，并且保留了工作区中第四次提交对<code>test.txt</code>所做的修改，所以工作区中的<code>test.txt</code>文件内容与回退前一致。</p>
<h5 id="--soft"><code>--soft</code></h5>
<p>该参数的作用为：将文件回退到暂存区中：如下图所示，将<code>test.txt</code>文件回退一次提交：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/5.png" alt="image-20200412195321082"></p>
<p>可以看到第四次提交对<code>test.txt</code>的修改操作被回退到了暂存区当中，并且保留了工作区和暂存区中第四次提交对<code>test.txt</code>所做的修改，所以，工作区中的文件内容与回退前一致。</p>
<h5 id="--hard"><code>--hard</code></h5>
<p>该参数的作用为：将文件回退到修改前：如下图所示，将<code>test.txt</code>文件回退一次提交：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/6.png" alt="image-20200412205112201"></p>
<p>可以看到<code>test.txt</code>直接回到了进行第四次提交前，此时删除了工作区和暂存区中第四次提交对<code>test.txt</code>所做的修改。所以，工作区变得干净了，<code>test.txt</code>文件内容回退到刚完成第三次提交时。</p>
<h4 id="2写法">2.写法</h4>
<p>为了方便演示<code>reset</code>的各种使用方法，下面的指令都采用<code>--hard</code>参数。</p>
<h5 id="git-reset---hard-head"><code>git reset --hard HEAD^</code></h5>
<p><strong>该命令的作用为回退一次提交：</strong></p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/7.png" alt="image-20200406164628192"></p>
<p>回退后的状态为：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/8.png" alt="image-20200406164713774"></p>
<p>可以看到，该方法会同时改变了<code>HEAD</code>和<code>master</code>指针的指向；</p>
<h5 id="git--reset---hard-head"><code>git  reset --hard HEAD^^</code></h5>
<p><strong>该命令的作用为回退两次提交：</strong></p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/9.png" alt="image-20200406170323254"></p>
<p>回退后的状态为：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/10.png" alt="image-20200406170352024"></p>
<p>同样，使用<code>--hard</code>参数回退，工作区是干净的；可以看到，该方法也会同时改变<code>HEAD</code>和<code>master</code>指针的指向；</p>
<h5 id="git-reset---hard-headn"><code>git reset --hard HEAD~n</code></h5>
<p><strong>该命令的作用为回退<code>n</code>次提交：</strong></p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/11.png" alt="image-20200406203027868"></p>
<p>可以看到使用了<code>--hard</code>参数，回退结果符合预期，并且该方法也会同步修改<code>HEAD</code>和分支<code>master</code>指针的指向。</p>
<p><strong>注意：该方式只能向前回退，不能向后回退</strong>。</p>
<blockquote>
<p>上述命令中的<code>HEAD</code>可以更换为分支名，比如<code>master</code>：</p>
<pre><code>git reset --hard master~n
</code></pre>
<p>该命令表示将<code>master</code>分支回退<code>n</code>次提交。由于<code>HEAD</code>始终指向当前分支，所以使用分支名和使用<code>HEAD</code>效果是一样的。</p>
</blockquote>
<h5 id="git-reset---hard-commit_id"><code>git reset --hard commit_id</code></h5>
<p><strong>该指令的作用为回退到指定的<code>commit id</code>的提交版本；</strong>由于<code>commit id</code>是不会重复的，一般只需要写前几（<code>6</code>）位就可以识别出来。通过<code>commit id</code>的回退方式<strong>既可以向前回退，也可以向后回退。</strong>如下所示，从<code>1st commit</code>往后回退到<code>4th commit</code>，其中<code>4th commit</code>的<code>commit id = bdb373...</code>。</p>
<p>为了熟悉该指令，我们分两种方式进行回退：使用<code>--hard</code>参数与使用默认参数。</p>
<ul>
<li>
<p><strong>使用<code>--hard</code>参数</strong></p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/12.png" alt="image-20200406193422130"></p>
<p>从图中可以看出：通过第四次提交的<code>commit_id: bdb373</code>顺利地从第一次提交向后回退到了第四次提交，并且工作区干净。该方法也同时修改了<code>HEAD</code>和分支<code>master</code>的指向，具体过程为：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/13.png" alt="image-20200414171228274"></p>
</li>
<li>
<p><strong>使用默认参数</strong></p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/14.png" alt="image-20200406193005200"></p>
<p>可以看到切换回了<code>4th commit</code>，但是工作区的<code>test.txt</code>文件并没有变化；这是因为，在<code>4th -&gt; 1st</code>的过程中，需要在工作区中删除<code>test.txt</code>文件中的<code>2nd line、3rd line、4th line</code>。通过默认参数<code>--mixed</code>，将<code>4th commit</code>对文件的修改回退到了工作区当中，如下图所示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/15.png" alt="image-20200406202451310"></p>
<p>这个过程丢弃了<strong>暂存区</strong>中对文件的删除操作，但是保留了<strong>工作区</strong>中对文件的删除操作。所以，工作区中的<code>test.txt</code>文件仍然处于删除了三行内容的状态。</p>
<p>此时只需要将修改操作从阶段<code>1</code>移动到修改前的阶段<code>0</code>，即可将文件恢复到修改前的状态，并清空工作区。可以采用<code>git restore test.txt</code>实现：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/16.png" alt="image-20200406202716247"></p>
</li>
</ul>
<h3 id="ⅱgit-revert">Ⅱ.<code>git revert</code></h3>
<p><code>revert</code>是回滚，重做的意思。不同于<code>reset</code>直接通过改变分支指向来进行版本回退，并且不产生新的提交；<code>revert</code>是通过额外创建一次提交，来取消分支上指定的某次提交的方式，来实现版本回退的。如下图所示，假如想要重做提交<code>B</code>，重做前与重做后的状态为：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/17.png" alt="image-20200413234440432"></p>
<p>所谓重做提交<code>B</code>，指的是在新建的提交<code>B'</code>中取消提交<code>B</code>中所做的一切操作。也就是说<code>revert</code>的思想为：通过创建一个新提交来取消不要的提交。所以，提交数会增加。</p>
<h4 id="1参数-2">1.参数</h4>
<p><code>git</code>同样为<code>revert</code>提供了许多参数，常用的有以下三种。为了演示它们的作用，首先需要设置对应的测试环境：在<code>dev</code>分支上进行四次提交，每次提交都为<code>test.txt</code>添加一行内容：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/18.png" alt="image-20200414000404304"></p>
<h5 id="-e"><code>-e</code></h5>
<p><code>-e</code>参数是<code>--edit</code>的缩写，为<code>revert</code>指令的默认参数，即<code>git revert -e</code>等同于<code>git revert</code>。该参数的作用为在重做过程中，新建一次提交的同时编辑提交信息。比如通过以下命令重做上述的<code>dev2</code>提交：</p>
<pre><code>git revert f4a95
</code></pre>
<p>执行该指令后会创建一次新的提交来取消提交<code>dev2</code>所做的一切操作，并且会进入<code>vim</code>编辑器，编辑新提交的提交注释：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/19.png" alt="image-20200414115052089"></p>
<p>如下图所示，提交<code>dev2</code>为文件<code>test.txt</code>添加的<code>dev2</code>文本被取消了，并且<code>dev</code>分支上多了一次提交：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/20.png" alt="image-20200414114945783"></p>
<h5 id="--no-edit"><code>--no-edit</code></h5>
<p>该参数的作用为不编辑由于<code>revert</code>重做，所新增提交的注释信息。如下图所示，通过：</p>
<pre><code>git revert --no-edit f4a95b
</code></pre>
<p>重做提交<code>dev2</code>的过程中，并不会进入<code>vim</code>编辑器编辑新增提交的注释信息，而是采用默认的注释信息：<code>Revert &quot;dev2&quot;</code>：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/21.png" alt="image-20200414114748865"></p>
<h5 id="-n"><code>-n</code></h5>
<p><code>-n</code>参数是<code>--no-commit</code>的简写形式，作用为对<code>revert</code>重做某次提交时所产生的修改，不进行提交，也就是不会新增一次提交；</p>
<p>如下图所示，这是<code>revert</code>指令通过新建提交<code>B'</code>来取消提交<code>B</code>的过程，分为<code>0~4</code>个阶段。不添加<code>-n</code>参数时，<code>revert</code>指令会产生一次额外提交<code>B'</code>，此时处于下图中的第<code>3</code>阶段。而使用<code>-n</code>参数时，虽然<code>revert</code>指令也会通过新建提交<code>B'</code>来重做提交<code>B</code>。但是，此时还处于生成提交<code>B'</code>的过程，还没有完全生成提交<code>B'</code>，也就是处于下图中的第<code>2</code>阶段。</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/22.png" alt="image-20200414002942670"></p>
<p>这种做法的好处是，允许我们干涉<code>revert</code>重做过程，手动进行提交。如下图所示，通过：</p>
<pre><code>git revert -n f4a95
</code></pre>
<p>重做提交<code>dev2</code>的过程中，手动暂停了重做过程。虽然提交<code>dev2</code>对<code>test.txt</code>所做的修改已被撤销，但是这一重做操作还未进行提交：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/23.png" alt="image-20200414120436217"></p>
<p>这样我们既可以修改重做过程中不满意的地方，也可以随意添加注释。修改完后，通过手动提交的方式，完成重做（<code>REVERTING</code>）操作：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/24.png" alt="image-20200414121147251"></p>
<h4 id="2写法-2">2.写法</h4>
<p><code>revert</code>指令也有多种写法，下面介绍主要的几种。为了方便演示，下列指令都采用默认参数<code>-e</code>手动编辑每次新增提交的注释信息。</p>
<h5 id="git-revert-commit_id"><code>git revert commit_id</code></h5>
<p>这是最常用的写法，通过<code>commit_id</code>精准地选择想要重做的提交。分两种情况：</p>
<ul>
<li>
<p><strong>情况一：</strong>重做最新一次提交，不会发生冲突。</p>
<p>例如：通过以下指令，重做<code>dev</code>分支上最新的一次提交<code>dev2</code>：</p>
<pre><code>git revert f4a95b
</code></pre>
<p>首先进入<code>vim</code>编辑器编辑新增提交的注释信息：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/25.png" alt="image-20200414135326937"></p>
<p>随后完成重做操作，如下图所示；可见提交<code>dev2</code>给<code>test.txt</code>添加的<code>dev2</code>内容被删除了，并且多出一次提交，说明重做成功：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/26.png" alt="image-20200414140040443"></p>
</li>
<li>
<p><strong>情况二：</strong>重做非最新一次提交，会发生冲突。</p>
<p>例如：通过以下指令，重做<code>dev</code>分支上的第三次提交<code>dev1</code>：</p>
<pre><code>git revert dbde45
</code></pre>
<p>会出现合并冲突：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/27.png" alt="image-20200414140502098"></p>
<p>使用<code>git mergetool</code>指令，通过<code>vim</code>编辑器的工具<code>vimdiff</code>显示冲突文件<code>test.txt</code>：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/28.png" alt="image-20200414140645448"></p>
<p>回车进入<code>vim</code>编辑器界面，解决冲突：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/29.png" alt="image-20200414141354304"></p>
<p>解决冲突之后，手动进行一次提交，完成<code>revert</code>过程：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/30.png" alt="image-20200414142323103"></p>
</li>
<li>
<p><strong>为什么会出现冲突？</strong></p>
<p>通过上面的例子不难看出，<code>revert</code>操作生成的<strong>新提交其实是通过两次提交合并而成</strong>的。如下图所示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/31.png" alt="image-20200414143430837"></p>
<ul>
<li>首先，将被重做的提交<code>dev1</code>的前一次提交<code>2nd</code>复制一份，即图中的<code>2nd'</code>；</li>
<li>然后，将它与当前分支的最新提交<code>dev2</code>进行合并，由此生成<code>revert</code>操作新增的提交；</li>
</ul>
<p>知道了<code>revert</code>操作新增的提交的由来后，就不难解释为什么会出现合并冲突了，如下图所示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/32.png" alt="image-20200414144109389"></p>
<p>合并的两次提交中，文件<code>test.txt</code>的内容不一样。<code>git</code>不知道以哪个版本为准，自然会导致自动合并失败，需要手动合并。</p>
</li>
</ul>
<h5 id="git-revert-head"><code>git revert HEAD</code></h5>
<p>该指令的作用为重做所在分支的最新一次提交，并且不会发生冲突：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/33.png" alt="image-20200414150640086"></p>
<h5 id="git-revert-head-2"><code>git revert HEAD^</code></h5>
<p>该指令的作用为重做所在分支的倒数第二次提交，会发生冲突，需要手动合并，完成重做操作：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/34.png" alt="image-20200414151002143"></p>
<h5 id="git-revert-head-3"><code>git revert HEAD^^</code></h5>
<p>该指令的作用为重做所在分支的倒数第三次提交，会发生冲突，需要手动合并，完成重做操作：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/35.png" alt="image-20200414180953703"></p>
<h5 id="git-revert-headn"><code>git revert HEAD~n</code></h5>
<p>该指令的作用为重做所在分支的倒数第<code>n+1</code>次提交，会发生冲突，需要手动合并，完成重做操作。过程与上述一致，这里就不再赘述了。</p>
<blockquote>
<p><strong>总结：</strong>常用<code>git revert commit_id</code>这种方式。</p>
</blockquote>
<h4 id="3撤销revert操作">3.撤销<code>revert</code>操作</h4>
<p>思路很简单，再次通过<code>revert</code>操作取消上一次的<code>revert</code>操作（即所谓&quot;负负得正&quot;）。</p>
<p>操作前，<code>dev</code>分支上的提交记录和<code>test.txt</code>文件内容如下：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/36.png" alt="image-20200414153206034"></p>
<p>通过：<code>git revert --no-edit f4a95</code>重做提交<code>dev2</code>（<code>--no-edit</code>表示不修改新增提交的注释）：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/37.png" alt="image-20200414153456451"></p>
<p>重做后，多了一次提交，并且<code>test.txt</code>文件中删除了<code>dev2</code>这一行内容。此时，可以通过：</p>
<pre><code>git revert --no-edit 582d127
</code></pre>
<p>重做上一次重做操作，以此达到取消上一次重做操作的目的：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/38.png" alt="image-20200414153724455"></p>
<p>如上图所示，虽然多出了一次提交，但是<code>test.txt</code>文件中被删除的<code>dev2</code>内容被恢复了，这样就撤销了<code>revert</code>操作。</p>
<h3 id="ⅲgit-checkout">Ⅲ.<code>git checkout</code></h3>
<h4 id="1git-checkout-commit_id">1.<code>git checkout commit_id</code></h4>
<p>使用<code>checkout</code>可以进行版本回退，如直接使用：</p>
<pre><code>git checkout cb214 
</code></pre>
<p>回退到提交<code>3rd</code>，此时会出现如下提示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/39.png" alt="image-20200311111540863"></p>
<p>注意到，切换后<code>HEAD</code>指向的不再是<code>master</code>分支，而是<code>cb214...</code>即第三次提交，查看历史提交记录：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/40.png" alt="image-20200311111719389"></p>
<p>可看到只有<code>3</code>次提交，什么意思呢？如下图所示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/41.png" alt="image-20200412001646768"></p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/42.png" alt="image-20200311112656834"></p>
<p>通过<code>git checkout</code>让<code>HEAD</code>指针指向了第<code>3</code>次提交，可以将它想象为一个新的分支。但是却没有实际创建分支，即此时<code>head</code>指向的由提交<code>1~3</code>组成的<code>commit</code>对象链条处于游离状态；</p>
<p>接着，在<code>HEAD</code>还指向游离的提交节点<code>3</code>的基础上对文件做出新的修改：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/43.png" alt="image-20200311113237150"></p>
<ul>
<li>此时如果我们切换回<code>master</code>分支，会出现下列错误</li>
</ul>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/44.png" alt="image-20200311113209483"></p>
<p>提示显示：如果没有保存就从游离的提交上切换到<code>master</code>分支，这一修改就会被<code>checkout</code>命令覆盖。我们可以在切换前进行一次提交操作：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/45.png" alt="image-20200311113625297"></p>
<p>此时的状态为：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/46.png" alt="image-20200412002213790"></p>
<ul>
<li>在游离的<code>Commit</code>对象链中进行了一次提交之后，再次通过：<code>git checkout master</code>切换到<code>master</code>分支：</li>
</ul>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/47.png" alt="image-20200311114055018"></p>
<p>提示大意为：如果没有任何分支指向刚才在游离的<code>Commit</code>对象链中进行的提交，那么该提交就会被忽略。此时的状态如下图所示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/48.png" alt="image-20200412002655921"></p>
<p>如果想要创建一个分支保存（指向）这条游离的<code>Commit</code>对象链，现在就是很好的时机。根据上述提示的命令：</p>
<pre><code>git branch mycommit  c4d5cc3
</code></pre>
<p>创建指向<code>commit_id</code>为<code>c4d5cc3</code>的提交（即上述的提交节点<code>5</code>）的分支<code>mycommit</code>：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/49.png" alt="image-20200311115117279"></p>
<p>由此游离的<code>commit</code>对象链得以被新分支所指向，并得到了保存，此时的状态如下图所示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/50.png" alt="image-20200412004042471"></p>
<blockquote>
<p><strong>总结：</strong></p>
<ul>
<li>
<p>通过<code>checkout</code>进行版本回退会造成游离的提交对象链，需要额外创建一个分支进行保存；</p>
</li>
<li>
<p>因此，使用<code>checkout</code>进行版本回退的思路为，先切换到想要回退的提交版本，再删除进行版本回退的分支<code>dev</code>。最后，创建一个新的<code>dev</code>分支指向游离的提交对象链，完成分支<code>dev</code>的版本回退，简称&quot;偷天换日&quot;；</p>
</li>
<li>
<p>只要有分支指向，提交就不会被丢弃。</p>
</li>
</ul>
</blockquote>
<h3 id="ⅳrevert与reset的选择">Ⅳ.<code>revert</code>与<code>reset</code>的选择</h3>
<p>由于<code>checkout</code>会造成游离的提交对象链，所以，一般不使用<code>checkout</code>而是使用<code>reset</code>和<code>revert</code>进行版本回退：</p>
<ul>
<li>
<p><code>revert</code>通过创建一个新提交的方式来撤销某次操作，该操作之前和之后的提交记录都会被保留，并且会将该撤销操作作为最新的提交；</p>
</li>
<li>
<p><code>reset</code>是通过改变<code>HEAD</code>和分支指针指向的方式，进行版本回退，该操作之后的提交记录不会被保留，并且不会创建新的提交；</p>
</li>
</ul>
<p>在个人开发上，建议使用<code>reset</code>；但是在团队开发中建议使用<code>revert</code>，特别是公共的分支（比如<code>master</code>)，这样能够完整保留提交历史，方便回溯。</p>
<h3 id="ⅴ回退方法汇总">Ⅴ.回退方法汇总</h3>
<p>版本回退主要有<strong>三大方式</strong>：<code>reset</code>、<code>revert</code>和<code>checkout</code>，各方式的比较如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">效果</th>
<th style="text-align:center">向前回退</th>
<th style="text-align:center">向后回退</th>
<th style="text-align:center">同步修改<code>HEAD</code>与分支指向</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>git reset --hard HEAD^</code></td>
<td style="text-align:center">往前回退<code>1</code>次提交</td>
<td style="text-align:center">能</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center"><code>git reset --hard HEAD^^</code></td>
<td style="text-align:center">往前回退<code>2</code>次提交</td>
<td style="text-align:center">能</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center"><code>git reset --hard HEAD~n</code></td>
<td style="text-align:center">往前回退<code>n</code>次提交</td>
<td style="text-align:center">能</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center"><code>git reset --hard &lt;commit_id&gt;</code></td>
<td style="text-align:center">回退到指定<code>commit id</code>的提交</td>
<td style="text-align:center">能</td>
<td style="text-align:center">能</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center"><code>git revert HEAD</code></td>
<td style="text-align:center">重做最新一次提交</td>
<td style="text-align:center">能</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center"><code>git revert HEAD^</code></td>
<td style="text-align:center">重做倒数第二次提交</td>
<td style="text-align:center">能</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center"><code>git revert HEAD^^</code></td>
<td style="text-align:center">重做倒数第三次提交</td>
<td style="text-align:center">能</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center"><code>git revert HEAD~n</code></td>
<td style="text-align:center">重做倒数第<code>n+1</code>次提交</td>
<td style="text-align:center">能</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center"><code>git revert commit_id</code></td>
<td style="text-align:center">重做指定<code>commit_id</code>的提交</td>
<td style="text-align:center">能</td>
<td style="text-align:center">能</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center"><code>git checkout commit_id</code></td>
<td style="text-align:center">回退到指定<code>commit id</code>的提交</td>
<td style="text-align:center">能</td>
<td style="text-align:center">能</td>
<td style="text-align:center">否</td>
</tr>
</tbody>
</table>
<p>从上表可知，只有下列三种方式可以自由地向前向后回退：</p>
<pre><code>git reset --hard commit_id
git revert commit_id
git checkout commit_id
</code></pre>
<p>但是，使用<code>checkout</code>进行回退会出现游离的提交，需要创建一个新分支进行保存，所以不常用。</p>
<h2 id="二、git-stash">二、<code>git stash</code></h2>
<h4 id="1git-stash的作用">1.<code>git stash</code>的作用</h4>
<p><code>git stash</code>指令的作用为：对没有提交到版本库的，位于工作区或暂存区中游离的修改进行保存，在需要时可进行恢复。具体应用场景如下：</p>
<p>在<code>master</code>分支进行两次提交：<code>1st</code>和<code>2nd</code>，随后创建并切换到<code>dev</code>分支。在<code>dev</code>分支上进行一次提交（<code>dev1</code>），此时两分支的状态为：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/51.png" alt="image-20200412235844426"></p>
<p>随后在<code>dev</code>分支上给文件<code>test.txt</code>添加一行<code>dev2</code>，但是不提交到暂存区，直接切换到<code>master</code>分支，会出现如下错误：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/52.png" alt="image-20200413001632846"></p>
<p>图中显示的错误大意为：在<code>dev</code>分支上的修改会被<code>checkout</code>操作覆盖。下面我们来看看，将<code>dev</code>分支上的这一修改操作添加到暂存区后，再切换分支，是否还会出现同样的问题：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/53.png" alt="image-20200413001752227"></p>
<p>可见还是会出现该错误，这初步验证了位于工作区和暂存区中的修改都会被<code>checkout</code>操作覆盖的结论。原因如下图所示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/54.png" alt="image-20200413001917190"></p>
<p>虽然在<code>dev</code>分支上修改了文件，但是没有将这一修改操作进行提交。这样就不会产生提交节点，就如上图所示，修改<code>dev2</code>是游离的，在切换分支的时候会被丢弃。</p>
<p>这种情况在日常开发中很常见，当在<code>develop</code>分支上开发新功能的时候，<code>master</code>分支出现紧急情况需要切换回去进行修复。但是，当前分支的新功能还没开发完全，贸然切换分支，原来开发的内容就会因被覆盖而丢失，怎么办呢？</p>
<p>有人可能会说进行一次<code>commit</code>不就可以了吗？确实可以。但是，这样不符合提交的代码就是正确代码的原则。更好的解决方法为使用<code>git stash</code>，如下图所示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/55.png" alt="image-20200413002115302"></p>
<p>可见<code>git stash</code>可以将当前<code>dev</code>分支上，位于在工作区或暂存区中的修改，在未提交的情况下进行了保存；并且将分支回退到修改前的状态，保存过后，就可以很顺畅地切换回<code>master</code>分支了。</p>
<blockquote>
<p>图中的<code>WIP</code>（<code>working in progress</code>）表示的是正在进行的工作；</p>
</blockquote>
<p>当我们在<code>master</code>分支上完成了工作，再次切换回<code>dev</code>分支时，查看<code>test.txt</code>文件：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/56.png" alt="image-20200413002256321"></p>
<p>发现切换分支前所做的修改<code>dev2</code>消失了，这是为什么呢？</p>
<ul>
<li>
<p>其实，上面通过<code>git stash</code>将<code>dev</code>分支上工作区或暂存区中的修改，提交到了<code>stash</code>区域进行保存，并将<code>dev</code>分支回退到修改前的状态。如下图所示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/57.png" alt="image-20200413003349365"></p>
</li>
<li>
<p>切换到<code>master</code>分支时<code>test</code>分支上的修改依旧会被覆盖。所以，再次回到<code>dev</code>分支时需要从<code>stash</code>区域中恢复切换分支前保存的修改；</p>
</li>
</ul>
<p>怎样恢复通过<code>git stash</code>保存到<code>stash</code>中的修改呢？可以通过：</p>
<pre><code>git stash list
</code></pre>
<p>查看该分支上被<code>stash</code>保存的修改：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/58.png" alt="image-20200413224408623"></p>
<p>继续给<code>test.txt</code>文件添加内容：<code>dev3</code>，并通过以下指令保存修改的同时添加注释：</p>
<pre><code>git stash save '注释'
</code></pre>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/59.png" alt="image-20200413225024618"></p>
<ul>
<li>首先，通过上述命令可以修改<code>stash</code>中存储修改的备注信息；</li>
<li>其次，虽然在<code>test</code>分支上进行了两次修改，但是使用<code>git stash</code>保存修改后，文件<code>test.txt</code>并没有实际被修改；</li>
</ul>
<h4 id="2恢复stash存储的修改">2.恢复<code>stash</code>存储的修改</h4>
<p>方法有很多，主要有以下三种：</p>
<h5 id="git-stash-pop"><code>git stash pop</code></h5>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/60.png" alt="image-20200413225140030"></p>
<p>如图所示，通过上述命令将<code>stash</code>中存储的最新一次修改恢复了。相信你已经发现了，<code>stash</code>与<strong>栈</strong>非常类似：先保存的修改，排在最后，序号最大；后保存的修改，排在最前，序号最小；</p>
<p>恢复了最新一次修改后，再次查看<code>stash</code>：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/61.png" alt="image-20200413225221071"></p>
<p>可以看到存储的修改只剩下一条了，由此可推断出<code>git stash pop</code>作用为：</p>
<ul>
<li><strong>第一：</strong>恢复<code>stash</code>中存储的最新一次修改；</li>
<li><strong>第二：</strong>将该修改从<code>stash</code>中删除；</li>
</ul>
<h5 id="git-stash-apply"><code>git stash apply</code></h5>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/62.png" alt="image-20200413225457480"></p>
<p>如上图所示，使用该指令时发生了合并冲突。这是因为，<code>stash</code>中保存的每一次修改代表的都是一个版本。</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/63.png" alt="image-20200413231349820"></p>
<ul>
<li>
<p>如上图所示，在<code>test</code>分支上，进行第一次修改后，通过<code>git stash</code>将该修改作为修改<code>0</code>保存到<code>stash</code>中，此时分支中的文件并没有发生改变；</p>
</li>
<li>
<p>进行第二次修改后，通过<code>git stash</code>将修改作为修改<code>1</code>保存到<code>stash</code>中，分支中的文件依旧没有发生改变；此时的<code>stash</code>中相当于保存着同一分支上两个修改后的版本；</p>
</li>
<li>
<p>此时通过<strong><code>git stash pop</code></strong>取出修改<code>0</code>，与<code>test</code>分支进行合并；再通过<strong><code>git stash pop</code></strong>取出修改<code>1</code>，再次与<code>test</code>分支进行合并，两个版本合并自然会产生冲突。</p>
</li>
</ul>
<p>手动解决冲突后，要进行一次提交才算完成了手动合并；随后查看<code>stash</code>：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/64.png" alt="image-20200413230750201"></p>
<p>修改<code>0</code>仍然存在，说明<strong><code>git stash apply</code></strong>的作用为取出<code>stash</code>中最新（前面）的修改并与分支进行合并。但是，<code>stash</code>中存储的该修改并不会被删除；</p>
<h5 id="git-stash-apply-stashn"><code>git stash apply stash@{n}</code></h5>
<p>这是最常用的方法，作用为从<code>stash</code>中恢复特定的修改，并且不删除<code>stash</code>中的该修改。</p>
<p>将<code>test.txt</code>的两次修改通过<code>git stash</code>存储到<code>stash</code>中，如下图所示：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/65.png" alt="image-20200413232024080"></p>
<p>通过<strong><code>git stash apply stash@{1}</code></strong>恢复<code>stash</code>中存储的修改<code>1</code>：</p>
<p><img src="http://ahuntsun.gitee.io/blogimagebed/img/git/lesson4/66.png" alt="image-20200413232309330"></p>
<p>如上图所示，成功地恢复了<code>stash</code>中的修改<code>1</code>，并且<code>stash</code>中的修改<code>1</code>并没有被删除；</p>
<p><strong>总结：</strong></p>
<ul>
<li><code>git stash pop</code>：恢复并删除<code>stash</code>中存储的最新修改；</li>
<li><code>git stash apply</code>：恢复但不删除<code>stash</code>中存储的最新修改；</li>
<li><code>git stash apply stash@{0}</code>：恢复但不删除<code>stash</code>中存储的特定提交；</li>
</ul>
<blockquote>
<p>以上就是这一节的全部内容了，相信看到这里的你已经能够熟练地使用<code>Git</code>进行版本回退了。下一节将会介绍大名鼎鼎的<code>Github</code>与<code>Git</code>的图形化操作界面。期待与你再次相见！</p>
</blockquote>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-14 18:59</span>&nbsp;
<a href="https://www.cnblogs.com/AhuntSun-blog/">AhuntSun</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12700155" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12700155);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 555013, cb_blogApp = 'AhuntSun-blog', cb_blogUserGuid = 'bad5555f-0923-4a98-9bae-08d753a8c051';
    var cb_entryId = 12700155, cb_entryCreatedDate = '2020-04-14 18:59', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 AhuntSun
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <!--代码复制-->
<script src="https://cdn.bootcss.com/clipboard.js/2.0.4/clipboard.min.js"></script>

<!--主题-->
<script src="https://blog-static.cnblogs.com/files/AhuntSun-blog/bilibili2.js" ></script>
<!--scrollTo-->
<script src="https://cdn.bootcss.com/jquery-scrollTo/2.1.2/jquery.scrollTo.js"></script>
<!--owo表情-->
<script src="https://blog-static.cnblogs.com/files/gshang/gshang.owo.2020.01.05.1.js"></script>
<link rel="stylesheet" href="https://blog-static.cnblogs.com/files/elkyo/OwO.min.css" />

<!-- import Vue.js -->
<script src="https://cdn.staticfile.org/vue/2.2.2/vue.min.js"></script>

<!-- 额外小特效 -->
 <!--鼠标特效-->
 <script src="https://blog-static.cnblogs.com/files/zouwangblog/mouse-click.js"></script>
 <canvas width="1777" height="841" style="position: fixed; left: 0px; top: 0px; z-index: 2147483647; pointer-events: none;"></canvas>
 <!--鼠标特效 end-->

<!--图片放大器-->
<script type="text/javascript" src="https://cdn.bootcss.com/fancybox/3.5.7/jquery.fancybox.js"></script>
<link rel="stylesheet" href="https://cdn.bootcss.com/fancybox/3.5.7/jquery.fancybox.css">
<script>

<!--指定fancybox作用的区域-->
$(".forFlow img").each(function () {
    var element = document.createElement("a");
    $(element).attr("data-fancybox", "gallery");
    $(element).attr("href", $(this).attr("src"));
    $(this).wrap(element);
});
</script>

    </div>
</body>
</html>